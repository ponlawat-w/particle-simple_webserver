
c:/Users/Ponlawat/source/particle/web-server/target/1.5.2/photon/web-server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004414  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4430  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a4434  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000630  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a44a0  080a44a0  000344a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a44c8  080a44c8  000344c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b9317  00000000  00000000  000344cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f57f  00000000  00000000  000ed7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014f83  00000000  00000000  000fcd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f78  00000000  00000000  00111ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000035f8  00000000  00000000  00113c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002391c  00000000  00000000  00117255  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021a26  00000000  00000000  0013ab71  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aca51  00000000  00000000  0015c597  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bd2c  00000000  00000000  00208fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fa9f 	bl	80a3570 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fabf 	bl	80a35bc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4434 	.word	0x080a4434
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000069c 	.word	0x2000069c
 80a0058:	2000069c 	.word	0x2000069c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fa1d 	bl	80a249c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a43f4 	.word	0x080a43f4
 80a0084:	080a4428 	.word	0x080a4428

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b84a 	b.w	80a0120 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8e5 	bl	80a025c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b9c3 	b.w	80a2420 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bbef 	b.w	80a187c <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bbed 	b.w	80a187c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bbf3 	b.w	80a188c <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bbf1 	b.w	80a188c <free>
	...

080a00ac <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a03      	ldr	r2, [pc, #12]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b0:	2100      	movs	r1, #0
 80a00b2:	200c      	movs	r0, #12
 80a00b4:	f001 fb06 	bl	80a16c4 <panic_>
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a14d5 	.word	0x080a14d5

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_Z19restAPI_QueryStatusR18RestAPIEndpointMsgR6String>:
#include "RestAPIEndpoints.h"

RestAPIEndpoints restAPIEndpoints;
RdWebServer* pWebServer = NULL;

void restAPI_QueryStatus(RestAPIEndpointMsg& apiMsg, String& responseStr) {
 80a00d0:	4608      	mov	r0, r1
  responseStr = "{\"msg\": \"Hello World!\"}";
 80a00d2:	4901      	ldr	r1, [pc, #4]	; (80a00d8 <_Z19restAPI_QueryStatusR18RestAPIEndpointMsgR6String+0x8>)
 80a00d4:	f001 bf49 	b.w	80a1f6a <_ZN6StringaSEPKc>
 80a00d8:	080a390c 	.word	0x080a390c

080a00dc <_ZN16RestAPIEndpointsD1Ev>:
    RestAPIEndpoints()
    {
        _numEndpoints = 0;
    }

    ~RestAPIEndpoints()
 80a00dc:	b570      	push	{r4, r5, r6, lr}
 80a00de:	4606      	mov	r6, r0
    {
        // Clean-up
        for (int i = 0; i < _numEndpoints; i++)
 80a00e0:	2500      	movs	r5, #0
 80a00e2:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
 80a00e6:	429d      	cmp	r5, r3
 80a00e8:	da17      	bge.n	80a011a <_ZN16RestAPIEndpointsD1Ev+0x3e>
        {
            delete _pEndpoints[i];
 80a00ea:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]
 80a00ee:	b194      	cbz	r4, 80a0116 <_ZN16RestAPIEndpointsD1Ev+0x3a>

// Callback function for any endpoint
typedef void (*RestAPIEndpointCallbackType)(RestAPIEndpointMsg& restAPIEndpointMsg, String& retStr);

// Definition of an endpoint
class RestAPIEndpointDef
 80a00f0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a00f4:	f001 fea0 	bl	80a1e38 <_ZN6StringD1Ev>
 80a00f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a00fc:	f001 fe9c 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0100:	f104 0014 	add.w	r0, r4, #20
 80a0104:	f001 fe98 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0108:	4620      	mov	r0, r4
 80a010a:	f001 fe95 	bl	80a1e38 <_ZN6StringD1Ev>
    ~RestAPIEndpoints()
    {
        // Clean-up
        for (int i = 0; i < _numEndpoints; i++)
        {
            delete _pEndpoints[i];
 80a010e:	214c      	movs	r1, #76	; 0x4c
 80a0110:	4620      	mov	r0, r4
 80a0112:	f003 f8ce 	bl	80a32b2 <_ZdlPvj>
    }

    ~RestAPIEndpoints()
    {
        // Clean-up
        for (int i = 0; i < _numEndpoints; i++)
 80a0116:	3501      	adds	r5, #1
 80a0118:	e7e3      	b.n	80a00e2 <_ZN16RestAPIEndpointsD1Ev+0x6>
        {
            delete _pEndpoints[i];
        }
        _numEndpoints = 0;
    }
 80a011a:	4630      	mov	r0, r6
 80a011c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0120 <setup>:
}

// setup() runs once, when the device is first turned on.
void setup() {
 80a0120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0124:	b090      	sub	sp, #64	; 0x40
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0126:	2300      	movs	r3, #0
 80a0128:	2204      	movs	r2, #4
 80a012a:	a904      	add	r1, sp, #16
 80a012c:	4842      	ldr	r0, [pc, #264]	; (80a0238 <setup+0x118>)
 80a012e:	f001 fb75 	bl	80a181c <spark_variable>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0132:	4b42      	ldr	r3, [pc, #264]	; (80a023c <setup+0x11c>)
 80a0134:	2200      	movs	r2, #0
 80a0136:	4611      	mov	r1, r2
 80a0138:	6858      	ldr	r0, [r3, #4]
 80a013a:	f001 fb17 	bl	80a176c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a013e:	1c81      	adds	r1, r0, #2
 80a0140:	a80a      	add	r0, sp, #40	; 0x28
 80a0142:	f002 fccb 	bl	80a2adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
  // Put initialization like pinMode and begin functions here.

  char ipAddress[24];
  Particle.variable("ipAddress", ipAddress, STRING);
  IPAddress ip = WiFi.localIP();
  sprintf(ipAddress, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 80a0146:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80a014a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80a014e:	9101      	str	r1, [sp, #4]
 80a0150:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 80a0154:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80a0158:	9100      	str	r1, [sp, #0]
 80a015a:	a804      	add	r0, sp, #16
 80a015c:	4938      	ldr	r1, [pc, #224]	; (80a0240 <setup+0x120>)
 80a015e:	f001 fba5 	bl	80a18ac <sprintf>
 80a0162:	4b38      	ldr	r3, [pc, #224]	; (80a0244 <setup+0x124>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0164:	2200      	movs	r2, #0
 80a0166:	781b      	ldrb	r3, [r3, #0]
 80a0168:	a904      	add	r1, sp, #16
 80a016a:	f88d 3000 	strb.w	r3, [sp]
 80a016e:	a802      	add	r0, sp, #8
 80a0170:	233c      	movs	r3, #60	; 0x3c
 80a0172:	f002 fb01 	bl	80a2778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0176:	9c03      	ldr	r4, [sp, #12]
 80a0178:	b17c      	cbz	r4, 80a019a <setup+0x7a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a017a:	6863      	ldr	r3, [r4, #4]
 80a017c:	3b01      	subs	r3, #1
 80a017e:	6063      	str	r3, [r4, #4]
 80a0180:	b95b      	cbnz	r3, 80a019a <setup+0x7a>
        {
          _M_dispose();
 80a0182:	6823      	ldr	r3, [r4, #0]
 80a0184:	4620      	mov	r0, r4
 80a0186:	689b      	ldr	r3, [r3, #8]
 80a0188:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a018a:	68a3      	ldr	r3, [r4, #8]
 80a018c:	3b01      	subs	r3, #1
 80a018e:	60a3      	str	r3, [r4, #8]
 80a0190:	b91b      	cbnz	r3, 80a019a <setup+0x7a>
            _M_destroy();
 80a0192:	6823      	ldr	r3, [r4, #0]
 80a0194:	4620      	mov	r0, r4
 80a0196:	68db      	ldr	r3, [r3, #12]
 80a0198:	4798      	blx	r3
                const char* pContentEncoding = NULL,
                bool pNoCache = true,
                const char* pExtraHeaders = NULL)
    {
        // Check for overflow
        if (_numEndpoints >= MAX_WEB_SERVER_ENDPOINTS)
 80a019a:	4d2b      	ldr	r5, [pc, #172]	; (80a0248 <setup+0x128>)
 80a019c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 80a01a0:	2b31      	cmp	r3, #49	; 0x31
 80a01a2:	dc33      	bgt.n	80a020c <setup+0xec>

        // Create new command definition and add
        RestAPIEndpointDef *pNewEndpointDef =
                new RestAPIEndpointDef(pEndpointStr, endpointType, callback,
                            pContentType, pContentEncoding,
                            pNoCache, pExtraHeaders);
 80a01a4:	204c      	movs	r0, #76	; 0x4c
 80a01a6:	f7ff ff78 	bl	80a009a <_Znwj>
 80a01aa:	4604      	mov	r4, r0
 80a01ac:	b338      	cbz	r0, 80a01fe <setup+0xde>
                RestAPIEndpointCallbackType callback,
                const char* pContentType,
                const char* pContentEncoding,
                bool noCache,
                const char* pExtraHeaders)
    {
 80a01ae:	4927      	ldr	r1, [pc, #156]	; (80a024c <setup+0x12c>)
 80a01b0:	f104 0714 	add.w	r7, r4, #20
 80a01b4:	f001 fe87 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01b8:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80a01bc:	4923      	ldr	r1, [pc, #140]	; (80a024c <setup+0x12c>)
 80a01be:	4638      	mov	r0, r7
 80a01c0:	f001 fe81 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01c4:	4921      	ldr	r1, [pc, #132]	; (80a024c <setup+0x12c>)
 80a01c6:	4630      	mov	r0, r6
 80a01c8:	f001 fe7d 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01cc:	491f      	ldr	r1, [pc, #124]	; (80a024c <setup+0x12c>)
 80a01ce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a01d2:	f001 fe78 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
        _endpointStr = pStr;
 80a01d6:	491e      	ldr	r1, [pc, #120]	; (80a0250 <setup+0x130>)
 80a01d8:	4620      	mov	r0, r4
 80a01da:	f001 fec6 	bl	80a1f6a <_ZN6StringaSEPKc>
        _endpointType = endpointType;
        _callback = callback;
 80a01de:	4b1d      	ldr	r3, [pc, #116]	; (80a0254 <setup+0x134>)
                const char* pContentEncoding,
                bool noCache,
                const char* pExtraHeaders)
    {
        _endpointStr = pStr;
        _endpointType = endpointType;
 80a01e0:	f04f 0801 	mov.w	r8, #1
        _callback = callback;
 80a01e4:	6363      	str	r3, [r4, #52]	; 0x34
        _contentType = pContentType;
 80a01e6:	4919      	ldr	r1, [pc, #100]	; (80a024c <setup+0x12c>)
                const char* pContentEncoding,
                bool noCache,
                const char* pExtraHeaders)
    {
        _endpointStr = pStr;
        _endpointType = endpointType;
 80a01e8:	f8c4 8010 	str.w	r8, [r4, #16]
        _callback = callback;
        _contentType = pContentType;
 80a01ec:	4638      	mov	r0, r7
 80a01ee:	f001 febc 	bl	80a1f6a <_ZN6StringaSEPKc>
        if (pContentEncoding)
            _contentEncoding = pContentEncoding;
 80a01f2:	4916      	ldr	r1, [pc, #88]	; (80a024c <setup+0x12c>)
 80a01f4:	4630      	mov	r0, r6
 80a01f6:	f001 feb8 	bl	80a1f6a <_ZN6StringaSEPKc>
        _noCache = noCache;
 80a01fa:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
        // Create new command definition and add
        RestAPIEndpointDef *pNewEndpointDef =
                new RestAPIEndpointDef(pEndpointStr, endpointType, callback,
                            pContentType, pContentEncoding,
                            pNoCache, pExtraHeaders);
        _pEndpoints[_numEndpoints] = pNewEndpointDef;
 80a01fe:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 80a0202:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
        _numEndpoints++;
 80a0206:	3301      	adds	r3, #1
 80a0208:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8

  Particle.publish(ipAddress, PRIVATE);

  restAPIEndpoints.addEndpoint("Q", RestAPIEndpointDef::ENDPOINT_CALLBACK, restAPI_QueryStatus, "", "");

  pWebServer = new RdWebServer();
 80a020c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80a0210:	f7ff ff43 	bl	80a009a <_Znwj>
 80a0214:	4605      	mov	r5, r0
 80a0216:	b108      	cbz	r0, 80a021c <setup+0xfc>
 80a0218:	f000 fefc 	bl	80a1014 <_ZN11RdWebServerC1Ev>
 80a021c:	4c0e      	ldr	r4, [pc, #56]	; (80a0258 <setup+0x138>)
  pWebServer->addRestAPIEndpoints(&restAPIEndpoints);
 80a021e:	4628      	mov	r0, r5
 80a0220:	4909      	ldr	r1, [pc, #36]	; (80a0248 <setup+0x128>)

  Particle.publish(ipAddress, PRIVATE);

  restAPIEndpoints.addEndpoint("Q", RestAPIEndpointDef::ENDPOINT_CALLBACK, restAPI_QueryStatus, "", "");

  pWebServer = new RdWebServer();
 80a0222:	6025      	str	r5, [r4, #0]
  pWebServer->addRestAPIEndpoints(&restAPIEndpoints);
 80a0224:	f001 f940 	bl	80a14a8 <_ZN11RdWebServer19addRestAPIEndpointsEP16RestAPIEndpoints>
  pWebServer->start(80);
 80a0228:	2150      	movs	r1, #80	; 0x50
 80a022a:	6820      	ldr	r0, [r4, #0]
 80a022c:	f000 ff42 	bl	80a10b4 <_ZN11RdWebServer5startEi>
}
 80a0230:	b010      	add	sp, #64	; 0x40
 80a0232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0236:	bf00      	nop
 80a0238:	080a3924 	.word	0x080a3924
 80a023c:	200005d0 	.word	0x200005d0
 80a0240:	080a392e 	.word	0x080a392e
 80a0244:	2000013c 	.word	0x2000013c
 80a0248:	20000070 	.word	0x20000070
 80a024c:	080a3a44 	.word	0x080a3a44
 80a0250:	080a393a 	.word	0x080a393a
 80a0254:	080a00d1 	.word	0x080a00d1
 80a0258:	20000140 	.word	0x20000140

080a025c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  if (pWebServer) {
 80a025c:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <loop+0xc>)
 80a025e:	6818      	ldr	r0, [r3, #0]
 80a0260:	b108      	cbz	r0, 80a0266 <loop+0xa>
    pWebServer->service();
 80a0262:	f001 b8e5 	b.w	80a1430 <_ZN11RdWebServer7serviceEv>
 80a0266:	4770      	bx	lr
 80a0268:	20000140 	.word	0x20000140

080a026c <_GLOBAL__sub_I_restAPIEndpoints>:
  }
}
 80a026c:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a026e:	4b07      	ldr	r3, [pc, #28]	; (80a028c <_GLOBAL__sub_I_restAPIEndpoints+0x20>)
 80a0270:	2201      	movs	r2, #1
 80a0272:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0274:	f001 f91e 	bl	80a14b4 <HAL_Pin_Map>
    // Max endpoints we can accommodate
    static const int MAX_WEB_SERVER_ENDPOINTS = 50;

    RestAPIEndpoints()
    {
        _numEndpoints = 0;
 80a0278:	4805      	ldr	r0, [pc, #20]	; (80a0290 <_GLOBAL__sub_I_restAPIEndpoints+0x24>)
 80a027a:	2300      	movs	r3, #0
 80a027c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 * Prototype: https://community.particle.io/t/tiny-webserver-code/3297/2
 */
#include "RdWebServer.h"
#include "RestAPIEndpoints.h"

RestAPIEndpoints restAPIEndpoints;
 80a0280:	4a04      	ldr	r2, [pc, #16]	; (80a0294 <_GLOBAL__sub_I_restAPIEndpoints+0x28>)
 80a0282:	4905      	ldr	r1, [pc, #20]	; (80a0298 <_GLOBAL__sub_I_restAPIEndpoints+0x2c>)
void loop() {
  // The core of your code will likely live here.
  if (pWebServer) {
    pWebServer->service();
  }
}
 80a0284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * Prototype: https://community.particle.io/t/tiny-webserver-code/3297/2
 */
#include "RdWebServer.h"
#include "RestAPIEndpoints.h"

RestAPIEndpoints restAPIEndpoints;
 80a0288:	f003 b80e 	b.w	80a32a8 <__aeabi_atexit>
 80a028c:	2000013c 	.word	0x2000013c
 80a0290:	20000070 	.word	0x20000070
 80a0294:	2000006c 	.word	0x2000006c
 80a0298:	080a00dd 	.word	0x080a00dd

080a029c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.11>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a029c:	b510      	push	{r4, lr}
 80a029e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a02a0:	6803      	ldr	r3, [r0, #0]
 80a02a2:	689b      	ldr	r3, [r3, #8]
 80a02a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02a6:	68a3      	ldr	r3, [r4, #8]
 80a02a8:	3b01      	subs	r3, #1
 80a02aa:	60a3      	str	r3, [r4, #8]
 80a02ac:	b92b      	cbnz	r3, 80a02ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.11+0x1e>
            _M_destroy();
 80a02ae:	6823      	ldr	r3, [r4, #0]
 80a02b0:	4620      	mov	r0, r4
        }
    }
 80a02b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a02b6:	68db      	ldr	r3, [r3, #12]
 80a02b8:	4718      	bx	r3
 80a02ba:	bd10      	pop	{r4, pc}

080a02bc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a02bc:	b510      	push	{r4, lr}
 80a02be:	4b06      	ldr	r3, [pc, #24]	; (80a02d8 <_ZN9TCPClientD1Ev+0x1c>)
 80a02c0:	4604      	mov	r4, r0
 80a02c2:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a02c4:	6980      	ldr	r0, [r0, #24]
 80a02c6:	b128      	cbz	r0, 80a02d4 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a02c8:	6843      	ldr	r3, [r0, #4]
 80a02ca:	3b01      	subs	r3, #1
 80a02cc:	6043      	str	r3, [r0, #4]
 80a02ce:	b90b      	cbnz	r3, 80a02d4 <_ZN9TCPClientD1Ev+0x18>
 80a02d0:	f7ff ffe4 	bl	80a029c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.11>
 80a02d4:	4620      	mov	r0, r4
 80a02d6:	bd10      	pop	{r4, pc}
 80a02d8:	080a3f2c 	.word	0x080a3f2c

080a02dc <_ZN9TCPClientD0Ev>:
 80a02dc:	b510      	push	{r4, lr}
 80a02de:	4604      	mov	r4, r0
 80a02e0:	f7ff ffec 	bl	80a02bc <_ZN9TCPClientD1Ev>
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	211c      	movs	r1, #28
 80a02e8:	f002 ffe3 	bl	80a32b2 <_ZdlPvj>
 80a02ec:	4620      	mov	r0, r4
 80a02ee:	bd10      	pop	{r4, pc}

080a02f0 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 80a02f0:	b40e      	push	{r1, r2, r3}
 80a02f2:	b500      	push	{lr}
 80a02f4:	b08c      	sub	sp, #48	; 0x30
 80a02f6:	aa0d      	add	r2, sp, #52	; 0x34
 80a02f8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a02fc:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a02fe:	e88d 0006 	stmia.w	sp, {r1, r2}
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a0302:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0304:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0306:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0308:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a030a:	aa04      	add	r2, sp, #16
 80a030c:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a030e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0310:	f001 f9e8 	bl	80a16e4 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
 80a0314:	b00c      	add	sp, #48	; 0x30
 80a0316:	f85d eb04 	ldr.w	lr, [sp], #4
 80a031a:	b003      	add	sp, #12
 80a031c:	4770      	bx	lr

080a031e <_ZNK5spark6Logger4infoEPKcz>:

inline void spark::Logger::info(const char *fmt, ...) const {
 80a031e:	b40e      	push	{r1, r2, r3}
 80a0320:	b500      	push	{lr}
 80a0322:	b08c      	sub	sp, #48	; 0x30
 80a0324:	aa0d      	add	r2, sp, #52	; 0x34
 80a0326:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a032a:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a032c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a0330:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0332:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0334:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0336:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0338:	aa04      	add	r2, sp, #16
 80a033a:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a033c:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a033e:	f001 f9d1 	bl	80a16e4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80a0342:	b00c      	add	sp, #48	; 0x30
 80a0344:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0348:	b003      	add	sp, #12
 80a034a:	4770      	bx	lr

080a034c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String>:
        return numArgs;
    }


    // Convert encoded URL
    static String unencodeHTTPChars(String& inStr)
 80a034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a034e:	460c      	mov	r4, r1
    {
        inStr.replace("+", " ");
 80a0350:	4fca      	ldr	r7, [pc, #808]	; (80a067c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x330>)
        return numArgs;
    }


    // Convert encoded URL
    static String unencodeHTTPChars(String& inStr)
 80a0352:	b089      	sub	sp, #36	; 0x24
    {
        inStr.replace("+", " ");
 80a0354:	4eca      	ldr	r6, [pc, #808]	; (80a0680 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x334>)
        return numArgs;
    }


    // Convert encoded URL
    static String unencodeHTTPChars(String& inStr)
 80a0356:	4605      	mov	r5, r0
    {
        inStr.replace("+", " ");
 80a0358:	4639      	mov	r1, r7
 80a035a:	4668      	mov	r0, sp
 80a035c:	f001 fdb3 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0360:	4631      	mov	r1, r6
 80a0362:	a804      	add	r0, sp, #16
 80a0364:	f001 fdaf 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0368:	aa04      	add	r2, sp, #16
 80a036a:	4669      	mov	r1, sp
 80a036c:	4620      	mov	r0, r4
 80a036e:	f001 fe7a 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0372:	a804      	add	r0, sp, #16
 80a0374:	f001 fd60 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0378:	4668      	mov	r0, sp
 80a037a:	f001 fd5d 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%20", " ");
 80a037e:	49c1      	ldr	r1, [pc, #772]	; (80a0684 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x338>)
 80a0380:	4668      	mov	r0, sp
 80a0382:	f001 fda0 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0386:	4631      	mov	r1, r6
 80a0388:	a804      	add	r0, sp, #16
 80a038a:	f001 fd9c 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a038e:	aa04      	add	r2, sp, #16
 80a0390:	4669      	mov	r1, sp
 80a0392:	4620      	mov	r0, r4
 80a0394:	f001 fe67 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0398:	a804      	add	r0, sp, #16
 80a039a:	f001 fd4d 	bl	80a1e38 <_ZN6StringD1Ev>
 80a039e:	4668      	mov	r0, sp
 80a03a0:	f001 fd4a 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%21", "!");
 80a03a4:	49b8      	ldr	r1, [pc, #736]	; (80a0688 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x33c>)
 80a03a6:	4668      	mov	r0, sp
 80a03a8:	f001 fd8d 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03ac:	49b7      	ldr	r1, [pc, #732]	; (80a068c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x340>)
 80a03ae:	a804      	add	r0, sp, #16
 80a03b0:	f001 fd89 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03b4:	aa04      	add	r2, sp, #16
 80a03b6:	4669      	mov	r1, sp
 80a03b8:	4620      	mov	r0, r4
 80a03ba:	f001 fe54 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a03be:	a804      	add	r0, sp, #16
 80a03c0:	f001 fd3a 	bl	80a1e38 <_ZN6StringD1Ev>
 80a03c4:	4668      	mov	r0, sp
 80a03c6:	f001 fd37 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%22", "\"");
 80a03ca:	49b1      	ldr	r1, [pc, #708]	; (80a0690 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x344>)
 80a03cc:	4668      	mov	r0, sp
 80a03ce:	f001 fd7a 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03d2:	49b0      	ldr	r1, [pc, #704]	; (80a0694 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x348>)
 80a03d4:	a804      	add	r0, sp, #16
 80a03d6:	f001 fd76 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03da:	aa04      	add	r2, sp, #16
 80a03dc:	4669      	mov	r1, sp
 80a03de:	4620      	mov	r0, r4
 80a03e0:	f001 fe41 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a03e4:	a804      	add	r0, sp, #16
 80a03e6:	f001 fd27 	bl	80a1e38 <_ZN6StringD1Ev>
 80a03ea:	4668      	mov	r0, sp
 80a03ec:	f001 fd24 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%23", "#");
 80a03f0:	49a9      	ldr	r1, [pc, #676]	; (80a0698 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x34c>)
 80a03f2:	4668      	mov	r0, sp
 80a03f4:	f001 fd67 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03f8:	49a8      	ldr	r1, [pc, #672]	; (80a069c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x350>)
 80a03fa:	a804      	add	r0, sp, #16
 80a03fc:	f001 fd63 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0400:	aa04      	add	r2, sp, #16
 80a0402:	4669      	mov	r1, sp
 80a0404:	4620      	mov	r0, r4
 80a0406:	f001 fe2e 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a040a:	a804      	add	r0, sp, #16
 80a040c:	f001 fd14 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0410:	4668      	mov	r0, sp
 80a0412:	f001 fd11 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%24", "$");
 80a0416:	49a2      	ldr	r1, [pc, #648]	; (80a06a0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x354>)
 80a0418:	4668      	mov	r0, sp
 80a041a:	f001 fd54 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a041e:	49a1      	ldr	r1, [pc, #644]	; (80a06a4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x358>)
 80a0420:	a804      	add	r0, sp, #16
 80a0422:	f001 fd50 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0426:	aa04      	add	r2, sp, #16
 80a0428:	4669      	mov	r1, sp
 80a042a:	4620      	mov	r0, r4
 80a042c:	f001 fe1b 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0430:	a804      	add	r0, sp, #16
 80a0432:	f001 fd01 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0436:	4668      	mov	r0, sp
 80a0438:	f001 fcfe 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%25", "%");
 80a043c:	499a      	ldr	r1, [pc, #616]	; (80a06a8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x35c>)
 80a043e:	4668      	mov	r0, sp
 80a0440:	f001 fd41 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0444:	4999      	ldr	r1, [pc, #612]	; (80a06ac <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x360>)
 80a0446:	a804      	add	r0, sp, #16
 80a0448:	f001 fd3d 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a044c:	aa04      	add	r2, sp, #16
 80a044e:	4669      	mov	r1, sp
 80a0450:	4620      	mov	r0, r4
 80a0452:	f001 fe08 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0456:	a804      	add	r0, sp, #16
 80a0458:	f001 fcee 	bl	80a1e38 <_ZN6StringD1Ev>
 80a045c:	4668      	mov	r0, sp
 80a045e:	f001 fceb 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%26", "&");
 80a0462:	4993      	ldr	r1, [pc, #588]	; (80a06b0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x364>)
 80a0464:	4668      	mov	r0, sp
 80a0466:	f001 fd2e 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a046a:	4992      	ldr	r1, [pc, #584]	; (80a06b4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x368>)
 80a046c:	a804      	add	r0, sp, #16
 80a046e:	f001 fd2a 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0472:	aa04      	add	r2, sp, #16
 80a0474:	4669      	mov	r1, sp
 80a0476:	4620      	mov	r0, r4
 80a0478:	f001 fdf5 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a047c:	a804      	add	r0, sp, #16
 80a047e:	f001 fcdb 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%27", "^");
 80a0482:	4e8d      	ldr	r6, [pc, #564]	; (80a06b8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x36c>)
        inStr.replace("%21", "!");
        inStr.replace("%22", "\"");
        inStr.replace("%23", "#");
        inStr.replace("%24", "$");
        inStr.replace("%25", "%");
        inStr.replace("%26", "&");
 80a0484:	4668      	mov	r0, sp
 80a0486:	f001 fcd7 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%27", "^");
 80a048a:	498c      	ldr	r1, [pc, #560]	; (80a06bc <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x370>)
 80a048c:	4668      	mov	r0, sp
 80a048e:	f001 fd1a 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0492:	4631      	mov	r1, r6
 80a0494:	a804      	add	r0, sp, #16
 80a0496:	f001 fd16 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a049a:	aa04      	add	r2, sp, #16
 80a049c:	4669      	mov	r1, sp
 80a049e:	4620      	mov	r0, r4
 80a04a0:	f001 fde1 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a04a4:	a804      	add	r0, sp, #16
 80a04a6:	f001 fcc7 	bl	80a1e38 <_ZN6StringD1Ev>
 80a04aa:	4668      	mov	r0, sp
 80a04ac:	f001 fcc4 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%28", "(");
 80a04b0:	4983      	ldr	r1, [pc, #524]	; (80a06c0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x374>)
 80a04b2:	4668      	mov	r0, sp
 80a04b4:	f001 fd07 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a04b8:	4982      	ldr	r1, [pc, #520]	; (80a06c4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x378>)
 80a04ba:	a804      	add	r0, sp, #16
 80a04bc:	f001 fd03 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a04c0:	aa04      	add	r2, sp, #16
 80a04c2:	4669      	mov	r1, sp
 80a04c4:	4620      	mov	r0, r4
 80a04c6:	f001 fdce 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a04ca:	a804      	add	r0, sp, #16
 80a04cc:	f001 fcb4 	bl	80a1e38 <_ZN6StringD1Ev>
 80a04d0:	4668      	mov	r0, sp
 80a04d2:	f001 fcb1 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%29", ")");
 80a04d6:	497c      	ldr	r1, [pc, #496]	; (80a06c8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x37c>)
 80a04d8:	4668      	mov	r0, sp
 80a04da:	f001 fcf4 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a04de:	497b      	ldr	r1, [pc, #492]	; (80a06cc <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x380>)
 80a04e0:	a804      	add	r0, sp, #16
 80a04e2:	f001 fcf0 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a04e6:	aa04      	add	r2, sp, #16
 80a04e8:	4669      	mov	r1, sp
 80a04ea:	4620      	mov	r0, r4
 80a04ec:	f001 fdbb 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a04f0:	a804      	add	r0, sp, #16
 80a04f2:	f001 fca1 	bl	80a1e38 <_ZN6StringD1Ev>
 80a04f6:	4668      	mov	r0, sp
 80a04f8:	f001 fc9e 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2A", "*");
 80a04fc:	4974      	ldr	r1, [pc, #464]	; (80a06d0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x384>)
 80a04fe:	4668      	mov	r0, sp
 80a0500:	f001 fce1 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0504:	4973      	ldr	r1, [pc, #460]	; (80a06d4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x388>)
 80a0506:	a804      	add	r0, sp, #16
 80a0508:	f001 fcdd 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a050c:	aa04      	add	r2, sp, #16
 80a050e:	4669      	mov	r1, sp
 80a0510:	4620      	mov	r0, r4
 80a0512:	f001 fda8 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0516:	a804      	add	r0, sp, #16
 80a0518:	f001 fc8e 	bl	80a1e38 <_ZN6StringD1Ev>
 80a051c:	4668      	mov	r0, sp
 80a051e:	f001 fc8b 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2B", "+");
 80a0522:	496d      	ldr	r1, [pc, #436]	; (80a06d8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x38c>)
 80a0524:	4668      	mov	r0, sp
 80a0526:	f001 fcce 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a052a:	4639      	mov	r1, r7
 80a052c:	a804      	add	r0, sp, #16
 80a052e:	f001 fcca 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0532:	aa04      	add	r2, sp, #16
 80a0534:	4669      	mov	r1, sp
 80a0536:	4620      	mov	r0, r4
 80a0538:	f001 fd95 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a053c:	a804      	add	r0, sp, #16
 80a053e:	f001 fc7b 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0542:	4668      	mov	r0, sp
 80a0544:	f001 fc78 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2C", ",");
 80a0548:	4964      	ldr	r1, [pc, #400]	; (80a06dc <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x390>)
 80a054a:	4668      	mov	r0, sp
 80a054c:	f001 fcbb 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0550:	4963      	ldr	r1, [pc, #396]	; (80a06e0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x394>)
 80a0552:	a804      	add	r0, sp, #16
 80a0554:	f001 fcb7 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0558:	aa04      	add	r2, sp, #16
 80a055a:	4669      	mov	r1, sp
 80a055c:	4620      	mov	r0, r4
 80a055e:	f001 fd82 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0562:	a804      	add	r0, sp, #16
 80a0564:	f001 fc68 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0568:	4668      	mov	r0, sp
 80a056a:	f001 fc65 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2D", "-");
 80a056e:	495d      	ldr	r1, [pc, #372]	; (80a06e4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x398>)
 80a0570:	4668      	mov	r0, sp
 80a0572:	f001 fca8 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0576:	495c      	ldr	r1, [pc, #368]	; (80a06e8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x39c>)
 80a0578:	a804      	add	r0, sp, #16
 80a057a:	f001 fca4 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a057e:	aa04      	add	r2, sp, #16
 80a0580:	4669      	mov	r1, sp
 80a0582:	4620      	mov	r0, r4
 80a0584:	f001 fd6f 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0588:	a804      	add	r0, sp, #16
 80a058a:	f001 fc55 	bl	80a1e38 <_ZN6StringD1Ev>
 80a058e:	4668      	mov	r0, sp
 80a0590:	f001 fc52 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2E", ".");
 80a0594:	4955      	ldr	r1, [pc, #340]	; (80a06ec <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3a0>)
 80a0596:	4668      	mov	r0, sp
 80a0598:	f001 fc95 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a059c:	4954      	ldr	r1, [pc, #336]	; (80a06f0 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3a4>)
 80a059e:	a804      	add	r0, sp, #16
 80a05a0:	f001 fc91 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05a4:	aa04      	add	r2, sp, #16
 80a05a6:	4669      	mov	r1, sp
 80a05a8:	4620      	mov	r0, r4
 80a05aa:	f001 fd5c 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a05ae:	a804      	add	r0, sp, #16
 80a05b0:	f001 fc42 	bl	80a1e38 <_ZN6StringD1Ev>
 80a05b4:	4668      	mov	r0, sp
 80a05b6:	f001 fc3f 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%2F", "/");
 80a05ba:	494e      	ldr	r1, [pc, #312]	; (80a06f4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3a8>)
 80a05bc:	4668      	mov	r0, sp
 80a05be:	f001 fc82 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05c2:	494d      	ldr	r1, [pc, #308]	; (80a06f8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3ac>)
 80a05c4:	a804      	add	r0, sp, #16
 80a05c6:	f001 fc7e 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05ca:	aa04      	add	r2, sp, #16
 80a05cc:	4669      	mov	r1, sp
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	f001 fd49 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a05d4:	a804      	add	r0, sp, #16
 80a05d6:	f001 fc2f 	bl	80a1e38 <_ZN6StringD1Ev>
 80a05da:	4668      	mov	r0, sp
 80a05dc:	f001 fc2c 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%3A", ":");
 80a05e0:	4946      	ldr	r1, [pc, #280]	; (80a06fc <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3b0>)
 80a05e2:	4668      	mov	r0, sp
 80a05e4:	f001 fc6f 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05e8:	4945      	ldr	r1, [pc, #276]	; (80a0700 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3b4>)
 80a05ea:	a804      	add	r0, sp, #16
 80a05ec:	f001 fc6b 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05f0:	aa04      	add	r2, sp, #16
 80a05f2:	4669      	mov	r1, sp
 80a05f4:	4620      	mov	r0, r4
 80a05f6:	f001 fd36 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a05fa:	a804      	add	r0, sp, #16
 80a05fc:	f001 fc1c 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0600:	4668      	mov	r0, sp
 80a0602:	f001 fc19 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%3B", ";");
 80a0606:	493f      	ldr	r1, [pc, #252]	; (80a0704 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3b8>)
 80a0608:	4668      	mov	r0, sp
 80a060a:	f001 fc5c 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a060e:	493e      	ldr	r1, [pc, #248]	; (80a0708 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3bc>)
 80a0610:	a804      	add	r0, sp, #16
 80a0612:	f001 fc58 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0616:	aa04      	add	r2, sp, #16
 80a0618:	4669      	mov	r1, sp
 80a061a:	4620      	mov	r0, r4
 80a061c:	f001 fd23 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0620:	a804      	add	r0, sp, #16
 80a0622:	f001 fc09 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0626:	4668      	mov	r0, sp
 80a0628:	f001 fc06 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%3C", "<");
 80a062c:	4937      	ldr	r1, [pc, #220]	; (80a070c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3c0>)
 80a062e:	4668      	mov	r0, sp
 80a0630:	f001 fc49 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0634:	4936      	ldr	r1, [pc, #216]	; (80a0710 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3c4>)
 80a0636:	a804      	add	r0, sp, #16
 80a0638:	f001 fc45 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a063c:	aa04      	add	r2, sp, #16
 80a063e:	4669      	mov	r1, sp
 80a0640:	4620      	mov	r0, r4
 80a0642:	f001 fd10 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0646:	a804      	add	r0, sp, #16
 80a0648:	f001 fbf6 	bl	80a1e38 <_ZN6StringD1Ev>
 80a064c:	4668      	mov	r0, sp
 80a064e:	f001 fbf3 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%3D", "=");
 80a0652:	4930      	ldr	r1, [pc, #192]	; (80a0714 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3c8>)
 80a0654:	4668      	mov	r0, sp
 80a0656:	f001 fc36 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a065a:	492f      	ldr	r1, [pc, #188]	; (80a0718 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3cc>)
 80a065c:	a804      	add	r0, sp, #16
 80a065e:	f001 fc32 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0662:	aa04      	add	r2, sp, #16
 80a0664:	4669      	mov	r1, sp
 80a0666:	4620      	mov	r0, r4
 80a0668:	f001 fcfd 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a066c:	a804      	add	r0, sp, #16
 80a066e:	f001 fbe3 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0672:	4668      	mov	r0, sp
 80a0674:	f001 fbe0 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0678:	e050      	b.n	80a071c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x3d0>
 80a067a:	bf00      	nop
 80a067c:	080a393c 	.word	0x080a393c
 80a0680:	080a403e 	.word	0x080a403e
 80a0684:	080a393e 	.word	0x080a393e
 80a0688:	080a3942 	.word	0x080a3942
 80a068c:	080a3946 	.word	0x080a3946
 80a0690:	080a3948 	.word	0x080a3948
 80a0694:	080a394c 	.word	0x080a394c
 80a0698:	080a394e 	.word	0x080a394e
 80a069c:	080a3952 	.word	0x080a3952
 80a06a0:	080a3954 	.word	0x080a3954
 80a06a4:	080a3958 	.word	0x080a3958
 80a06a8:	080a395a 	.word	0x080a395a
 80a06ac:	080a395e 	.word	0x080a395e
 80a06b0:	080a3960 	.word	0x080a3960
 80a06b4:	080a3964 	.word	0x080a3964
 80a06b8:	080a396a 	.word	0x080a396a
 80a06bc:	080a3966 	.word	0x080a3966
 80a06c0:	080a396c 	.word	0x080a396c
 80a06c4:	080a3970 	.word	0x080a3970
 80a06c8:	080a3972 	.word	0x080a3972
 80a06cc:	080a3976 	.word	0x080a3976
 80a06d0:	080a3978 	.word	0x080a3978
 80a06d4:	080a397c 	.word	0x080a397c
 80a06d8:	080a397e 	.word	0x080a397e
 80a06dc:	080a3982 	.word	0x080a3982
 80a06e0:	080a3986 	.word	0x080a3986
 80a06e4:	080a3988 	.word	0x080a3988
 80a06e8:	080a398c 	.word	0x080a398c
 80a06ec:	080a398e 	.word	0x080a398e
 80a06f0:	080a3992 	.word	0x080a3992
 80a06f4:	080a3994 	.word	0x080a3994
 80a06f8:	080a3998 	.word	0x080a3998
 80a06fc:	080a399a 	.word	0x080a399a
 80a0700:	080a3a27 	.word	0x080a3a27
 80a0704:	080a399e 	.word	0x080a399e
 80a0708:	080a39a2 	.word	0x080a39a2
 80a070c:	080a39a4 	.word	0x080a39a4
 80a0710:	080a39a8 	.word	0x080a39a8
 80a0714:	080a39aa 	.word	0x080a39aa
 80a0718:	080a39ae 	.word	0x080a39ae
        inStr.replace("%3E", ">");
 80a071c:	4975      	ldr	r1, [pc, #468]	; (80a08f4 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5a8>)
 80a071e:	4668      	mov	r0, sp
 80a0720:	f001 fbd1 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0724:	4974      	ldr	r1, [pc, #464]	; (80a08f8 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5ac>)
 80a0726:	a804      	add	r0, sp, #16
 80a0728:	f001 fbcd 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a072c:	aa04      	add	r2, sp, #16
 80a072e:	4669      	mov	r1, sp
 80a0730:	4620      	mov	r0, r4
 80a0732:	f001 fc98 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0736:	a804      	add	r0, sp, #16
 80a0738:	f001 fb7e 	bl	80a1e38 <_ZN6StringD1Ev>
 80a073c:	4668      	mov	r0, sp
 80a073e:	f001 fb7b 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%3F", "?");
 80a0742:	496e      	ldr	r1, [pc, #440]	; (80a08fc <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5b0>)
 80a0744:	4668      	mov	r0, sp
 80a0746:	f001 fbbe 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a074a:	496d      	ldr	r1, [pc, #436]	; (80a0900 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5b4>)
 80a074c:	a804      	add	r0, sp, #16
 80a074e:	f001 fbba 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0752:	aa04      	add	r2, sp, #16
 80a0754:	4669      	mov	r1, sp
 80a0756:	4620      	mov	r0, r4
 80a0758:	f001 fc85 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a075c:	a804      	add	r0, sp, #16
 80a075e:	f001 fb6b 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0762:	4668      	mov	r0, sp
 80a0764:	f001 fb68 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%5B", "[");
 80a0768:	4966      	ldr	r1, [pc, #408]	; (80a0904 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5b8>)
 80a076a:	4668      	mov	r0, sp
 80a076c:	f001 fbab 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0770:	4965      	ldr	r1, [pc, #404]	; (80a0908 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5bc>)
 80a0772:	a804      	add	r0, sp, #16
 80a0774:	f001 fba7 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0778:	aa04      	add	r2, sp, #16
 80a077a:	4669      	mov	r1, sp
 80a077c:	4620      	mov	r0, r4
 80a077e:	f001 fc72 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0782:	a804      	add	r0, sp, #16
 80a0784:	f001 fb58 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0788:	4668      	mov	r0, sp
 80a078a:	f001 fb55 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%5C", "\\");
 80a078e:	495f      	ldr	r1, [pc, #380]	; (80a090c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5c0>)
 80a0790:	4668      	mov	r0, sp
 80a0792:	f001 fb98 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0796:	495e      	ldr	r1, [pc, #376]	; (80a0910 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5c4>)
 80a0798:	a804      	add	r0, sp, #16
 80a079a:	f001 fb94 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a079e:	aa04      	add	r2, sp, #16
 80a07a0:	4669      	mov	r1, sp
 80a07a2:	4620      	mov	r0, r4
 80a07a4:	f001 fc5f 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a07a8:	a804      	add	r0, sp, #16
 80a07aa:	f001 fb45 	bl	80a1e38 <_ZN6StringD1Ev>
 80a07ae:	4668      	mov	r0, sp
 80a07b0:	f001 fb42 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%5D", "]");
 80a07b4:	4957      	ldr	r1, [pc, #348]	; (80a0914 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5c8>)
 80a07b6:	4668      	mov	r0, sp
 80a07b8:	f001 fb85 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a07bc:	4956      	ldr	r1, [pc, #344]	; (80a0918 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5cc>)
 80a07be:	a804      	add	r0, sp, #16
 80a07c0:	f001 fb81 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a07c4:	aa04      	add	r2, sp, #16
 80a07c6:	4669      	mov	r1, sp
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	f001 fc4c 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a07ce:	a804      	add	r0, sp, #16
 80a07d0:	f001 fb32 	bl	80a1e38 <_ZN6StringD1Ev>
 80a07d4:	4668      	mov	r0, sp
 80a07d6:	f001 fb2f 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%5E", "^");
 80a07da:	4950      	ldr	r1, [pc, #320]	; (80a091c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5d0>)
 80a07dc:	4668      	mov	r0, sp
 80a07de:	f001 fb72 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a07e2:	4631      	mov	r1, r6
 80a07e4:	a804      	add	r0, sp, #16
 80a07e6:	f001 fb6e 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a07ea:	aa04      	add	r2, sp, #16
 80a07ec:	4669      	mov	r1, sp
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	f001 fc39 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a07f4:	a804      	add	r0, sp, #16
 80a07f6:	f001 fb1f 	bl	80a1e38 <_ZN6StringD1Ev>
 80a07fa:	4668      	mov	r0, sp
 80a07fc:	f001 fb1c 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%5F", "_");
 80a0800:	4947      	ldr	r1, [pc, #284]	; (80a0920 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5d4>)
 80a0802:	4668      	mov	r0, sp
 80a0804:	f001 fb5f 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0808:	4946      	ldr	r1, [pc, #280]	; (80a0924 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5d8>)
 80a080a:	a804      	add	r0, sp, #16
 80a080c:	f001 fb5b 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0810:	aa04      	add	r2, sp, #16
 80a0812:	4669      	mov	r1, sp
 80a0814:	4620      	mov	r0, r4
 80a0816:	f001 fc26 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a081a:	a804      	add	r0, sp, #16
 80a081c:	f001 fb0c 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0820:	4668      	mov	r0, sp
 80a0822:	f001 fb09 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%60", "`");
 80a0826:	4940      	ldr	r1, [pc, #256]	; (80a0928 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5dc>)
 80a0828:	4668      	mov	r0, sp
 80a082a:	f001 fb4c 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a082e:	493f      	ldr	r1, [pc, #252]	; (80a092c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5e0>)
 80a0830:	a804      	add	r0, sp, #16
 80a0832:	f001 fb48 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0836:	aa04      	add	r2, sp, #16
 80a0838:	4669      	mov	r1, sp
 80a083a:	4620      	mov	r0, r4
 80a083c:	f001 fc13 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0840:	a804      	add	r0, sp, #16
 80a0842:	f001 faf9 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0846:	4668      	mov	r0, sp
 80a0848:	f001 faf6 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%7B", "{");
 80a084c:	4938      	ldr	r1, [pc, #224]	; (80a0930 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5e4>)
 80a084e:	4668      	mov	r0, sp
 80a0850:	f001 fb39 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0854:	4937      	ldr	r1, [pc, #220]	; (80a0934 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5e8>)
 80a0856:	a804      	add	r0, sp, #16
 80a0858:	f001 fb35 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a085c:	aa04      	add	r2, sp, #16
 80a085e:	4669      	mov	r1, sp
 80a0860:	4620      	mov	r0, r4
 80a0862:	f001 fc00 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a0866:	a804      	add	r0, sp, #16
 80a0868:	f001 fae6 	bl	80a1e38 <_ZN6StringD1Ev>
 80a086c:	4668      	mov	r0, sp
 80a086e:	f001 fae3 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%7C", "|");
 80a0872:	4931      	ldr	r1, [pc, #196]	; (80a0938 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5ec>)
 80a0874:	4668      	mov	r0, sp
 80a0876:	f001 fb26 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a087a:	4930      	ldr	r1, [pc, #192]	; (80a093c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5f0>)
 80a087c:	a804      	add	r0, sp, #16
 80a087e:	f001 fb22 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0882:	aa04      	add	r2, sp, #16
 80a0884:	4669      	mov	r1, sp
 80a0886:	4620      	mov	r0, r4
 80a0888:	f001 fbed 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a088c:	a804      	add	r0, sp, #16
 80a088e:	f001 fad3 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0892:	4668      	mov	r0, sp
 80a0894:	f001 fad0 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%7D", "}");
 80a0898:	4929      	ldr	r1, [pc, #164]	; (80a0940 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5f4>)
 80a089a:	4668      	mov	r0, sp
 80a089c:	f001 fb13 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08a0:	4928      	ldr	r1, [pc, #160]	; (80a0944 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5f8>)
 80a08a2:	a804      	add	r0, sp, #16
 80a08a4:	f001 fb0f 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08a8:	aa04      	add	r2, sp, #16
 80a08aa:	4669      	mov	r1, sp
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	f001 fbda 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a08b2:	a804      	add	r0, sp, #16
 80a08b4:	f001 fac0 	bl	80a1e38 <_ZN6StringD1Ev>
 80a08b8:	4668      	mov	r0, sp
 80a08ba:	f001 fabd 	bl	80a1e38 <_ZN6StringD1Ev>
        inStr.replace("%7E", "~");
 80a08be:	4922      	ldr	r1, [pc, #136]	; (80a0948 <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x5fc>)
 80a08c0:	4668      	mov	r0, sp
 80a08c2:	f001 fb00 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08c6:	4921      	ldr	r1, [pc, #132]	; (80a094c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String+0x600>)
 80a08c8:	a804      	add	r0, sp, #16
 80a08ca:	f001 fafc 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08ce:	aa04      	add	r2, sp, #16
 80a08d0:	4669      	mov	r1, sp
 80a08d2:	4620      	mov	r0, r4
 80a08d4:	f001 fbc7 	bl	80a2066 <_ZN6String7replaceERKS_S1_>
 80a08d8:	a804      	add	r0, sp, #16
 80a08da:	f001 faad 	bl	80a1e38 <_ZN6StringD1Ev>
 80a08de:	4668      	mov	r0, sp
 80a08e0:	f001 faaa 	bl	80a1e38 <_ZN6StringD1Ev>
        return inStr;
 80a08e4:	4621      	mov	r1, r4
 80a08e6:	4628      	mov	r0, r5
 80a08e8:	f001 fb2c 	bl	80a1f44 <_ZN6StringC1ERKS_>
    }
 80a08ec:	4628      	mov	r0, r5
 80a08ee:	b009      	add	sp, #36	; 0x24
 80a08f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a08f2:	bf00      	nop
 80a08f4:	080a39b0 	.word	0x080a39b0
 80a08f8:	080a39b4 	.word	0x080a39b4
 80a08fc:	080a39b6 	.word	0x080a39b6
 80a0900:	080a39ba 	.word	0x080a39ba
 80a0904:	080a39bc 	.word	0x080a39bc
 80a0908:	080a4046 	.word	0x080a4046
 80a090c:	080a39c0 	.word	0x080a39c0
 80a0910:	080a39c4 	.word	0x080a39c4
 80a0914:	080a39c6 	.word	0x080a39c6
 80a0918:	080a39ca 	.word	0x080a39ca
 80a091c:	080a39cc 	.word	0x080a39cc
 80a0920:	080a39d0 	.word	0x080a39d0
 80a0924:	080a39d4 	.word	0x080a39d4
 80a0928:	080a39d6 	.word	0x080a39d6
 80a092c:	080a39da 	.word	0x080a39da
 80a0930:	080a39dc 	.word	0x080a39dc
 80a0934:	080a39e0 	.word	0x080a39e0
 80a0938:	080a39e2 	.word	0x080a39e2
 80a093c:	080a39e6 	.word	0x080a39e6
 80a0940:	080a39e8 	.word	0x080a39e8
 80a0944:	080a3922 	.word	0x080a3922
 80a0948:	080a39ec 	.word	0x080a39ec
 80a094c:	080a39f0 	.word	0x080a39f0

080a0950 <_ZN11RdWebClientC1Ev>:

#include "application.h"
#include "RdWebServer.h"
#include "RdWebServerUtils.h"

RdWebClient::RdWebClient()
 80a0950:	b538      	push	{r3, r4, r5, lr}
 80a0952:	4604      	mov	r4, r0
 80a0954:	4d0d      	ldr	r5, [pc, #52]	; (80a098c <_ZN11RdWebClientC1Ev+0x3c>)
 80a0956:	f001 fa0f 	bl	80a1d78 <_ZN9TCPClientC1Ev>
 80a095a:	4629      	mov	r1, r5
 80a095c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a0960:	f001 fab1 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0964:	4629      	mov	r1, r5
 80a0966:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a096a:	f001 faac 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
{
  _webClientState        = WEB_CLIENT_NONE;
 80a096e:	2300      	movs	r3, #0
 80a0970:	7723      	strb	r3, [r4, #28]
  _webClientStateEntryMs = 0;
 80a0972:	6223      	str	r3, [r4, #32]
  _pResourceToSend       = NULL;
 80a0974:	6563      	str	r3, [r4, #84]	; 0x54
  _resourceSendIdx       = 0;
 80a0976:	65a3      	str	r3, [r4, #88]	; 0x58
  _resourceSendBlkCount  = 0;
 80a0978:	65e3      	str	r3, [r4, #92]	; 0x5c
  _resourceSendMillis    = 0;
 80a097a:	6623      	str	r3, [r4, #96]	; 0x60
  _pHttpReqPayload       = NULL;
 80a097c:	6363      	str	r3, [r4, #52]	; 0x34
  _httpReqPayloadLen     = 0;
 80a097e:	63a3      	str	r3, [r4, #56]	; 0x38
  _curHttpPayloadRxPos   = 0;
 80a0980:	6423      	str	r3, [r4, #64]	; 0x40
  _keepAlive             = false;
 80a0982:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80a0986:	4620      	mov	r0, r4
 80a0988:	bd38      	pop	{r3, r4, r5, pc}
 80a098a:	bf00      	nop
 80a098c:	080a3a44 	.word	0x080a3a44

080a0990 <_ZN11RdWebClient7cleanUpEv>:
}


void RdWebClient::cleanUp()
{
  delete _pHttpReqPayload;
 80a0990:	2101      	movs	r1, #1
 80a0992:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a0994:	f002 bc8d 	b.w	80a32b2 <_ZdlPvj>

080a0998 <_ZN11RdWebClientD1Ev>:
  _curHttpPayloadRxPos   = 0;
  _keepAlive             = false;
}


RdWebClient::~RdWebClient()
 80a0998:	b510      	push	{r4, lr}
 80a099a:	4604      	mov	r4, r0
{
  cleanUp();
 80a099c:	f7ff fff8 	bl	80a0990 <_ZN11RdWebClient7cleanUpEv>
  _curHttpPayloadRxPos   = 0;
  _keepAlive             = false;
}


RdWebClient::~RdWebClient()
 80a09a0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a09a4:	f001 fa48 	bl	80a1e38 <_ZN6StringD1Ev>
 80a09a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a09ac:	f001 fa44 	bl	80a1e38 <_ZN6StringD1Ev>
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	f7ff fc83 	bl	80a02bc <_ZN9TCPClientD1Ev>
{
  cleanUp();
}
 80a09b6:	4620      	mov	r0, r4
 80a09b8:	bd10      	pop	{r4, pc}
	...

080a09bc <_ZN11RdWebServerD1Ev>:
  }
}


// Destructor
RdWebServer::~RdWebServer()
 80a09bc:	b570      	push	{r4, r5, r6, lr}
 80a09be:	4606      	mov	r6, r0
 80a09c0:	4605      	mov	r5, r0
 80a09c2:	4b07      	ldr	r3, [pc, #28]	; (80a09e0 <_ZN11RdWebServerD1Ev+0x24>)
 80a09c4:	f500 74a8 	add.w	r4, r0, #336	; 0x150
 80a09c8:	f846 3b0c 	str.w	r3, [r6], #12
 80a09cc:	42b4      	cmp	r4, r6
 80a09ce:	d004      	beq.n	80a09da <_ZN11RdWebServerD1Ev+0x1e>
 80a09d0:	3c6c      	subs	r4, #108	; 0x6c
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	f7ff ffe0 	bl	80a0998 <_ZN11RdWebClientD1Ev>
 80a09d8:	e7f8      	b.n	80a09cc <_ZN11RdWebServerD1Ev+0x10>
{
}
 80a09da:	4628      	mov	r0, r5
 80a09dc:	bd70      	pop	{r4, r5, r6, pc}
 80a09de:	bf00      	nop
 80a09e0:	080a3ef4 	.word	0x080a3ef4

080a09e4 <_ZN11RdWebServerD0Ev>:
  }
}


// Destructor
RdWebServer::~RdWebServer()
 80a09e4:	b510      	push	{r4, lr}
 80a09e6:	4604      	mov	r4, r0
{
}
 80a09e8:	f7ff ffe8 	bl	80a09bc <_ZN11RdWebServerD1Ev>
 80a09ec:	4620      	mov	r0, r4
 80a09ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80a09f2:	f002 fc5e 	bl	80a32b2 <_ZdlPvj>
 80a09f6:	4620      	mov	r0, r4
 80a09f8:	bd10      	pop	{r4, pc}
	...

080a09fc <_ZN11RdWebClient12connStateStrEv>:
}


const char *RdWebClient::connStateStr()
{
  switch (_webClientState)
 80a09fc:	7f03      	ldrb	r3, [r0, #28]
 80a09fe:	2b03      	cmp	r3, #3
 80a0a00:	bf9a      	itte	ls
 80a0a02:	4a02      	ldrls	r2, [pc, #8]	; (80a0a0c <_ZN11RdWebClient12connStateStrEv+0x10>)
 80a0a04:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 80a0a08:	4801      	ldrhi	r0, [pc, #4]	; (80a0a10 <_ZN11RdWebClient12connStateStrEv+0x14>)

    case WEB_CLIENT_SEND_RESOURCE:
      return "Send";
  }
  return "Unknown";
}
 80a0a0a:	4770      	bx	lr
 80a0a0c:	080a3edc 	.word	0x080a3edc
 80a0a10:	080a39f2 	.word	0x080a39f2

080a0a14 <_ZN11RdWebClient8setStateENS_14WebClientStateE>:
  delete _pHttpReqPayload;
}


void RdWebClient::setState(WebClientState newState)
{
 80a0a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a16:	4604      	mov	r4, r0
 80a0a18:	460d      	mov	r5, r1
  _webClientState        = newState;
 80a0a1a:	7721      	strb	r1, [r4, #28]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0a1c:	f000 fd62 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
  _webClientStateEntryMs = millis();
  if ((newState != WEB_CLIENT_SEND_RESOURCE) && (newState != WEB_CLIENT_SEND_RESOURCE_WAIT))
 80a0a20:	3d02      	subs	r5, #2
 80a0a22:	2d01      	cmp	r5, #1
 80a0a24:	4601      	mov	r1, r0


void RdWebClient::setState(WebClientState newState)
{
  _webClientState        = newState;
  _webClientStateEntryMs = millis();
 80a0a26:	6220      	str	r0, [r4, #32]
  if ((newState != WEB_CLIENT_SEND_RESOURCE) && (newState != WEB_CLIENT_SEND_RESOURCE_WAIT))
 80a0a28:	d909      	bls.n	80a0a3e <_ZN11RdWebClient8setStateENS_14WebClientStateE+0x2a>
  {
    Log.trace("WebClient#%d State: %s @Ms %ld", _clientIdx, connStateStr(), _webClientStateEntryMs);
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	f7ff ffe6 	bl	80a09fc <_ZN11RdWebClient12connStateStrEv>
 80a0a30:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0a32:	9100      	str	r1, [sp, #0]
 80a0a34:	4603      	mov	r3, r0
 80a0a36:	4903      	ldr	r1, [pc, #12]	; (80a0a44 <_ZN11RdWebClient8setStateENS_14WebClientStateE+0x30>)
 80a0a38:	4803      	ldr	r0, [pc, #12]	; (80a0a48 <_ZN11RdWebClient8setStateENS_14WebClientStateE+0x34>)
 80a0a3a:	f7ff fc59 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
  }
}
 80a0a3e:	b003      	add	sp, #12
 80a0a40:	bd30      	pop	{r4, r5, pc}
 80a0a42:	bf00      	nop
 80a0a44:	080a39fa 	.word	0x080a39fa
 80a0a48:	20000150 	.word	0x20000150

080a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>:
}

////////////////////////////////////////////
// Clean up resources used for TCP reception
void RdWebClient::cleanupTCPRxResources()
{
 80a0a4c:	b538      	push	{r3, r4, r5, lr}
  // Deallocate memory and reset payload length etc
  _httpReqPayloadLen  = 0;
 80a0a4e:	2300      	movs	r3, #0
}

////////////////////////////////////////////
// Clean up resources used for TCP reception
void RdWebClient::cleanupTCPRxResources()
{
 80a0a50:	4604      	mov	r4, r0
  // Deallocate memory and reset payload length etc
  _httpReqPayloadLen  = 0;
 80a0a52:	6383      	str	r3, [r0, #56]	; 0x38
  _httpHeaderComplete = false;
 80a0a54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  delete [] _pHttpReqPayload;
 80a0a58:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a0a5a:	461d      	mov	r5, r3
 80a0a5c:	b108      	cbz	r0, 80a0a62 <_ZN11RdWebClient21cleanupTCPRxResourcesEv+0x16>
 80a0a5e:	f7ff fb22 	bl	80a00a6 <_ZdaPv>
  _pHttpReqPayload = NULL;
 80a0a62:	6365      	str	r5, [r4, #52]	; 0x34
  _httpReqStr      = "";
 80a0a64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a0a68:	4902      	ldr	r1, [pc, #8]	; (80a0a74 <_ZN11RdWebClient21cleanupTCPRxResourcesEv+0x28>)
}
 80a0a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Deallocate memory and reset payload length etc
  _httpReqPayloadLen  = 0;
  _httpHeaderComplete = false;
  delete [] _pHttpReqPayload;
  _pHttpReqPayload = NULL;
  _httpReqStr      = "";
 80a0a6e:	f001 ba7c 	b.w	80a1f6a <_ZN6StringaSEPKc>
 80a0a72:	bf00      	nop
 80a0a74:	080a3a44 	.word	0x080a3a44

080a0a78 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_>:


//////////////////////////////////////
// Extract arguments from rest api string
bool RdWebClient::extractEndpointArgs(const char *buf, String& endpointStr, String& argStr)
{
 80a0a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a7a:	460f      	mov	r7, r1
 80a0a7c:	b085      	sub	sp, #20
 80a0a7e:	4616      	mov	r6, r2
  if (buf == NULL)
 80a0a80:	b380      	cbz	r0, 80a0ae4 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x6c>
  {
    return false;
  }

  // Check for first slash
  char *pSlash1 = strchr(buf, '/');
 80a0a82:	212f      	movs	r1, #47	; 0x2f
 80a0a84:	f002 fe1c 	bl	80a36c0 <strchr>
  if (pSlash1 == NULL)
 80a0a88:	b370      	cbz	r0, 80a0ae8 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x70>
 80a0a8a:	1c44      	adds	r4, r0, #1
  {
    return false;
  }
  pSlash1++;
  // Extract command
  while (*pSlash1)
 80a0a8c:	4625      	mov	r5, r4
 80a0a8e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a92:	b341      	cbz	r1, 80a0ae6 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x6e>
  {
    if ((*pSlash1 == '/') || (*pSlash1 == ' ') || (*pSlash1 == '\n') ||
 80a0a94:	292f      	cmp	r1, #47	; 0x2f
 80a0a96:	d011      	beq.n	80a0abc <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x44>
 80a0a98:	2920      	cmp	r1, #32
 80a0a9a:	d024      	beq.n	80a0ae6 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x6e>
 80a0a9c:	290a      	cmp	r1, #10
 80a0a9e:	d022      	beq.n	80a0ae6 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x6e>
 80a0aa0:	293f      	cmp	r1, #63	; 0x3f
 80a0aa2:	d00b      	beq.n	80a0abc <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x44>
        (*pSlash1 == '?') || (*pSlash1 == '&'))
 80a0aa4:	2926      	cmp	r1, #38	; 0x26
 80a0aa6:	d009      	beq.n	80a0abc <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x44>
    {
      break;
    }
    endpointStr.concat(*pSlash1++);
 80a0aa8:	4638      	mov	r0, r7
 80a0aaa:	f001 faa3 	bl	80a1ff4 <_ZN6String6concatEc>
  {
    return false;
  }
  pSlash1++;
  // Extract command
  while (*pSlash1)
 80a0aae:	462c      	mov	r4, r5
 80a0ab0:	e7ec      	b.n	80a0a8c <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x14>
  }
  // Now args
  pSlash1++;
  while (*pSlash1)
  {
    if ((*pSlash1 == ' ') || (*pSlash1 == '\n'))
 80a0ab2:	290a      	cmp	r1, #10
 80a0ab4:	d007      	beq.n	80a0ac6 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x4e>
    {
      break;
    }
    argStr.concat(*pSlash1++);
 80a0ab6:	4630      	mov	r0, r6
 80a0ab8:	f001 fa9c 	bl	80a1ff4 <_ZN6String6concatEc>
  {
    return true;
  }
  // Now args
  pSlash1++;
  while (*pSlash1)
 80a0abc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80a0ac0:	f011 0fdf 	tst.w	r1, #223	; 0xdf
 80a0ac4:	d1f5      	bne.n	80a0ab2 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x3a>
      break;
    }
    argStr.concat(*pSlash1++);
  }
  // Convert escaped characters
  RestAPIEndpoints::unencodeHTTPChars(endpointStr);
 80a0ac6:	4639      	mov	r1, r7
 80a0ac8:	4668      	mov	r0, sp
 80a0aca:	f7ff fc3f 	bl	80a034c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String>
 80a0ace:	4668      	mov	r0, sp
 80a0ad0:	f001 f9b2 	bl	80a1e38 <_ZN6StringD1Ev>
  RestAPIEndpoints::unencodeHTTPChars(argStr);
 80a0ad4:	4668      	mov	r0, sp
 80a0ad6:	4631      	mov	r1, r6
 80a0ad8:	f7ff fc38 	bl	80a034c <_ZN16RestAPIEndpoints17unencodeHTTPCharsER6String>
 80a0adc:	4668      	mov	r0, sp
 80a0ade:	f001 f9ab 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0ae2:	e000      	b.n	80a0ae6 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x6e>
 80a0ae4:	e000      	b.n	80a0ae8 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_+0x70>
    }
    endpointStr.concat(*pSlash1++);
  }
  if ((*pSlash1 == '\0') || (*pSlash1 == ' ') || (*pSlash1 == '\n'))
  {
    return true;
 80a0ae6:	2001      	movs	r0, #1
  }
  // Convert escaped characters
  RestAPIEndpoints::unencodeHTTPChars(endpointStr);
  RestAPIEndpoints::unencodeHTTPChars(argStr);
  return true;
}
 80a0ae8:	b005      	add	sp, #20
 80a0aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0aec <_ZN11RdWebClient26getContentLengthFromHeaderEPKc>:

// Helpers
int RdWebClient::getContentLengthFromHeader(const char *msgBuf)
{
 80a0aec:	b508      	push	{r3, lr}
  char *ptr = strstr(msgBuf, "Content-Length:");
 80a0aee:	4905      	ldr	r1, [pc, #20]	; (80a0b04 <_ZN11RdWebClient26getContentLengthFromHeaderEPKc+0x18>)
 80a0af0:	f002 fe57 	bl	80a37a2 <strstr>

  if (ptr)
 80a0af4:	b120      	cbz	r0, 80a0b00 <_ZN11RdWebClient26getContentLengthFromHeaderEPKc+0x14>
  {
    ptr += 15;
    int contentLen = atoi(ptr);
 80a0af6:	300f      	adds	r0, #15
 80a0af8:	f002 fd28 	bl	80a354c <atoi>
 80a0afc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    {
      return contentLen;
    }
  }
  return 0;
}
 80a0b00:	bd08      	pop	{r3, pc}
 80a0b02:	bf00      	nop
 80a0b04:	080a3a19 	.word	0x080a3a19

080a0b08 <_ZN11RdWebClient22getKeepAliveFromHeaderEPKc>:

//Helpers
bool RdWebClient::getKeepAliveFromHeader(const char *msgBuf)
{
 80a0b08:	b508      	push	{r3, lr}
  char *ptr = strstr(msgBuf, "Connection:");
 80a0b0a:	4906      	ldr	r1, [pc, #24]	; (80a0b24 <_ZN11RdWebClient22getKeepAliveFromHeaderEPKc+0x1c>)
 80a0b0c:	f002 fe49 	bl	80a37a2 <strstr>
  if (ptr)
 80a0b10:	b130      	cbz	r0, 80a0b20 <_ZN11RdWebClient22getKeepAliveFromHeaderEPKc+0x18>
  {
    char *ptr2 = strcasestr(ptr + 10, "keep-alive");
 80a0b12:	4905      	ldr	r1, [pc, #20]	; (80a0b28 <_ZN11RdWebClient22getKeepAliveFromHeaderEPKc+0x20>)
 80a0b14:	300a      	adds	r0, #10
 80a0b16:	f002 fd9f 	bl	80a3658 <strcasestr>
    if (ptr2)
 80a0b1a:	3000      	adds	r0, #0
 80a0b1c:	bf18      	it	ne
 80a0b1e:	2001      	movne	r0, #1
      return true;
  }
  return false;
}
 80a0b20:	bd08      	pop	{r3, pc}
 80a0b22:	bf00      	nop
 80a0b24:	080a3a29 	.word	0x080a3a29
 80a0b28:	080a3a35 	.word	0x080a3a35

080a0b2c <_ZN11RdWebClient17handleTCPReadDataEi>:


//////////////////////////////
// Handle read from TCP client
void RdWebClient::handleTCPReadData(int numToRead)
{
 80a0b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b30:	4604      	mov	r4, r0
  // Note: reads to a position a few chars ahead of the start of the buffer - this is
  // to permit chars from the end of a previous buffer to be added for end of header testing
  // allowing that the header might be split across two frames
  const char *headerEndSequence = "\r\n\r\n";
  const int  headerEndSeqLen    = strlen(headerEndSequence);
  uint8_t    *pTCPReadBuf       = new uint8_t[numToRead + headerEndSeqLen + 1];
 80a0b32:	1d48      	adds	r0, r1, #5


//////////////////////////////
// Handle read from TCP client
void RdWebClient::handleTCPReadData(int numToRead)
{
 80a0b34:	460e      	mov	r6, r1
  // Note: reads to a position a few chars ahead of the start of the buffer - this is
  // to permit chars from the end of a previous buffer to be added for end of header testing
  // allowing that the header might be split across two frames
  const char *headerEndSequence = "\r\n\r\n";
  const int  headerEndSeqLen    = strlen(headerEndSequence);
  uint8_t    *pTCPReadBuf       = new uint8_t[numToRead + headerEndSeqLen + 1];
 80a0b36:	f7ff fab2 	bl	80a009e <_Znaj>

  // Fill initial chars with spaces
  memset(pTCPReadBuf, ' ', headerEndSeqLen);
 80a0b3a:	4605      	mov	r5, r0
 80a0b3c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 80a0b40:	f845 3b04 	str.w	r3, [r5], #4
  // Pointer to where data actually read to
  uint8_t *pTCPReadPos = pTCPReadBuf + headerEndSeqLen;
  int     numRead      = _TCPClient.read(pTCPReadPos, numToRead);
 80a0b44:	4632      	mov	r2, r6
  // Note: reads to a position a few chars ahead of the start of the buffer - this is
  // to permit chars from the end of a previous buffer to be added for end of header testing
  // allowing that the header might be split across two frames
  const char *headerEndSequence = "\r\n\r\n";
  const int  headerEndSeqLen    = strlen(headerEndSequence);
  uint8_t    *pTCPReadBuf       = new uint8_t[numToRead + headerEndSeqLen + 1];
 80a0b46:	4607      	mov	r7, r0

  // Fill initial chars with spaces
  memset(pTCPReadBuf, ' ', headerEndSeqLen);
  // Pointer to where data actually read to
  uint8_t *pTCPReadPos = pTCPReadBuf + headerEndSeqLen;
  int     numRead      = _TCPClient.read(pTCPReadPos, numToRead);
 80a0b48:	4629      	mov	r1, r5
 80a0b4a:	4620      	mov	r0, r4
 80a0b4c:	f000 ff77 	bl	80a1a3e <_ZN9TCPClient4readEPhj>
  if (numRead <= 0)
 80a0b50:	1e06      	subs	r6, r0, #0
 80a0b52:	f340 8099 	ble.w	80a0c88 <_ZN11RdWebClient17handleTCPReadDataEi+0x15c>
  {
    delete [] pTCPReadBuf;
    return;
  }
  // Terminate buffer
  pTCPReadPos[numRead] = '\0';
 80a0b56:	f04f 0800 	mov.w	r8, #0
 80a0b5a:	f805 8006 	strb.w	r8, [r5, r6]

  // Check if header already complete
  if (!_httpHeaderComplete)
 80a0b5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a0b62:	2b00      	cmp	r3, #0
 80a0b64:	d17c      	bne.n	80a0c60 <_ZN11RdWebClient17handleTCPReadDataEi+0x134>
  {
    // See if the end of header might be split across frames
    if ((pTCPReadPos[0] == '\r') || (pTCPReadPos[0] == '\n'))
 80a0b66:	793b      	ldrb	r3, [r7, #4]
 80a0b68:	2b0d      	cmp	r3, #13
 80a0b6a:	d008      	beq.n	80a0b7e <_ZN11RdWebClient17handleTCPReadDataEi+0x52>
 80a0b6c:	2b0a      	cmp	r3, #10
 80a0b6e:	d006      	beq.n	80a0b7e <_ZN11RdWebClient17handleTCPReadDataEi+0x52>
      }
    }
    // Location of end of header in read buffer
    uint8_t *pEndOfHeaderInReadBuf = NULL;
    // Check if the composite buffer contains the end of header string
    uint8_t *pEOLEOL = (uint8_t *) strstr((const char *) pTCPReadBuf, headerEndSequence);
 80a0b70:	4948      	ldr	r1, [pc, #288]	; (80a0c94 <_ZN11RdWebClient17handleTCPReadDataEi+0x168>)
 80a0b72:	4638      	mov	r0, r7
 80a0b74:	f002 fe15 	bl	80a37a2 <strstr>
    if (pEOLEOL != NULL)
 80a0b78:	b980      	cbnz	r0, 80a0b9c <_ZN11RdWebClient17handleTCPReadDataEi+0x70>
      {
        pTCPReadBuf[headerEndSeqLen - i - 1] = pReqStr[reqLen - i - 1];
      }
    }
    // Location of end of header in read buffer
    uint8_t *pEndOfHeaderInReadBuf = NULL;
 80a0b7a:	4680      	mov	r8, r0
 80a0b7c:	e019      	b.n	80a0bb2 <_ZN11RdWebClient17handleTCPReadDataEi+0x86>
 80a0b7e:	4629      	mov	r1, r5
 80a0b80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0b82:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if ((pTCPReadPos[0] == '\r') || (pTCPReadPos[0] == '\n'))
    {
      // Copy at most headerEndSeqLen chars to the bit before the data we read
      int        reqLen   = _httpReqStr.length();
      const char *pReqStr = _httpReqStr.c_str();
      for (int i = 0; (i < headerEndSeqLen) && (i < reqLen); i++)
 80a0b84:	2300      	movs	r3, #0
 80a0b86:	4402      	add	r2, r0
 80a0b88:	4298      	cmp	r0, r3
 80a0b8a:	ddf1      	ble.n	80a0b70 <_ZN11RdWebClient17handleTCPReadDataEi+0x44>
      {
        pTCPReadBuf[headerEndSeqLen - i - 1] = pReqStr[reqLen - i - 1];
 80a0b8c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    if ((pTCPReadPos[0] == '\r') || (pTCPReadPos[0] == '\n'))
    {
      // Copy at most headerEndSeqLen chars to the bit before the data we read
      int        reqLen   = _httpReqStr.length();
      const char *pReqStr = _httpReqStr.c_str();
      for (int i = 0; (i < headerEndSeqLen) && (i < reqLen); i++)
 80a0b90:	3301      	adds	r3, #1
 80a0b92:	2b04      	cmp	r3, #4
      {
        pTCPReadBuf[headerEndSeqLen - i - 1] = pReqStr[reqLen - i - 1];
 80a0b94:	f801 ed01 	strb.w	lr, [r1, #-1]!
    if ((pTCPReadPos[0] == '\r') || (pTCPReadPos[0] == '\n'))
    {
      // Copy at most headerEndSeqLen chars to the bit before the data we read
      int        reqLen   = _httpReqStr.length();
      const char *pReqStr = _httpReqStr.c_str();
      for (int i = 0; (i < headerEndSeqLen) && (i < reqLen); i++)
 80a0b98:	d1f6      	bne.n	80a0b88 <_ZN11RdWebClient17handleTCPReadDataEi+0x5c>
 80a0b9a:	e7e9      	b.n	80a0b70 <_ZN11RdWebClient17handleTCPReadDataEi+0x44>
    if (pEOLEOL != NULL)
    {
      // End of the string to be added to the request header
      pEndOfHeaderInReadBuf = pEOLEOL + headerEndSeqLen;
      // Header now complete
      _httpHeaderComplete = true;
 80a0b9c:	2301      	movs	r3, #1
    }
    // Copy the header portion to the request header string
    uint8_t charReplacedForTerminator = 0;
    if (pEndOfHeaderInReadBuf != NULL)
 80a0b9e:	f110 0804 	adds.w	r8, r0, #4
    if (pEOLEOL != NULL)
    {
      // End of the string to be added to the request header
      pEndOfHeaderInReadBuf = pEOLEOL + headerEndSeqLen;
      // Header now complete
      _httpHeaderComplete = true;
 80a0ba2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    }
    // Copy the header portion to the request header string
    uint8_t charReplacedForTerminator = 0;
    if (pEndOfHeaderInReadBuf != NULL)
 80a0ba6:	d004      	beq.n	80a0bb2 <_ZN11RdWebClient17handleTCPReadDataEi+0x86>
    {
      charReplacedForTerminator = *pEndOfHeaderInReadBuf;
      // Terminate string temporarily
      *pEndOfHeaderInReadBuf = 0;
 80a0ba8:	2300      	movs	r3, #0
    }
    // Copy the header portion to the request header string
    uint8_t charReplacedForTerminator = 0;
    if (pEndOfHeaderInReadBuf != NULL)
    {
      charReplacedForTerminator = *pEndOfHeaderInReadBuf;
 80a0baa:	f890 9004 	ldrb.w	r9, [r0, #4]
      // Terminate string temporarily
      *pEndOfHeaderInReadBuf = 0;
 80a0bae:	7103      	strb	r3, [r0, #4]
 80a0bb0:	e000      	b.n	80a0bb4 <_ZN11RdWebClient17handleTCPReadDataEi+0x88>
      pEndOfHeaderInReadBuf = pEOLEOL + headerEndSeqLen;
      // Header now complete
      _httpHeaderComplete = true;
    }
    // Copy the header portion to the request header string
    uint8_t charReplacedForTerminator = 0;
 80a0bb2:	46c1      	mov	r9, r8
    {
      charReplacedForTerminator = *pEndOfHeaderInReadBuf;
      // Terminate string temporarily
      *pEndOfHeaderInReadBuf = 0;
    }
    if ((_httpReqStr.length() + strlen((const char *) pTCPReadPos) < HTTPD_MAX_REQ_LENGTH))
 80a0bb4:	4628      	mov	r0, r5
 80a0bb6:	f002 fdb4 	bl	80a3722 <strlen>
 80a0bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a0bbc:	4418      	add	r0, r3
 80a0bbe:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a0bc2:	d204      	bcs.n	80a0bce <_ZN11RdWebClient17handleTCPReadDataEi+0xa2>
      _httpReqStr.concat((char *) pTCPReadPos);
 80a0bc4:	4629      	mov	r1, r5
 80a0bc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a0bca:	f001 fa04 	bl	80a1fd6 <_ZN6String6concatEPKc>
    // Put back the char which we replaced with terminator
    if (pEndOfHeaderInReadBuf != NULL)
 80a0bce:	f1b8 0f00 	cmp.w	r8, #0
 80a0bd2:	d001      	beq.n	80a0bd8 <_ZN11RdWebClient17handleTCPReadDataEi+0xac>
      *pEndOfHeaderInReadBuf = charReplacedForTerminator;
 80a0bd4:	f888 9000 	strb.w	r9, [r8]
    // Get the length of the payload
    if (_httpHeaderComplete)
 80a0bd8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a0bdc:	b353      	cbz	r3, 80a0c34 <_ZN11RdWebClient17handleTCPReadDataEi+0x108>
    {
      int payloadLen = getContentLengthFromHeader(_httpReqStr);
 80a0bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0be0:	f7ff ff84 	bl	80a0aec <_ZN11RdWebClient26getContentLengthFromHeaderEPKc>
 80a0be4:	4681      	mov	r9, r0
      _curHttpPayloadRxPos = 0;
 80a0be6:	f04f 0a00 	mov.w	sl, #0
      Log.trace("WebClient#%d Payload length %d", _clientIdx, payloadLen);
 80a0bea:	4603      	mov	r3, r0
      *pEndOfHeaderInReadBuf = charReplacedForTerminator;
    // Get the length of the payload
    if (_httpHeaderComplete)
    {
      int payloadLen = getContentLengthFromHeader(_httpReqStr);
      _curHttpPayloadRxPos = 0;
 80a0bec:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
      Log.trace("WebClient#%d Payload length %d", _clientIdx, payloadLen);
 80a0bf0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0bf2:	4929      	ldr	r1, [pc, #164]	; (80a0c98 <_ZN11RdWebClient17handleTCPReadDataEi+0x16c>)
 80a0bf4:	4829      	ldr	r0, [pc, #164]	; (80a0c9c <_ZN11RdWebClient17handleTCPReadDataEi+0x170>)
 80a0bf6:	f7ff fb7b 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
      // We have to ignore payloads that are too big for our memory
      if (payloadLen > HTTP_MAX_PAYLOAD_LENGTH)
 80a0bfa:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80a0bfe:	dc11      	bgt.n	80a0c24 <_ZN11RdWebClient17handleTCPReadDataEi+0xf8>
      {
        payloadLen = 0;
      }
      if ((payloadLen != 0) && (payloadLen != _httpReqPayloadLen))
 80a0c00:	f1b9 0f00 	cmp.w	r9, #0
 80a0c04:	d00f      	beq.n	80a0c26 <_ZN11RdWebClient17handleTCPReadDataEi+0xfa>
 80a0c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0c08:	4599      	cmp	r9, r3
 80a0c0a:	d00c      	beq.n	80a0c26 <_ZN11RdWebClient17handleTCPReadDataEi+0xfa>
      {
        delete [] _pHttpReqPayload;
 80a0c0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a0c0e:	b108      	cbz	r0, 80a0c14 <_ZN11RdWebClient17handleTCPReadDataEi+0xe8>
 80a0c10:	f7ff fa49 	bl	80a00a6 <_ZdaPv>
        // Add space for null terminator
        _pHttpReqPayload    = new unsigned char[payloadLen + 1];
 80a0c14:	f109 0001 	add.w	r0, r9, #1
 80a0c18:	f7ff fa41 	bl	80a009e <_Znaj>
        _pHttpReqPayload[0] = 0;
 80a0c1c:	2300      	movs	r3, #0
      }
      if ((payloadLen != 0) && (payloadLen != _httpReqPayloadLen))
      {
        delete [] _pHttpReqPayload;
        // Add space for null terminator
        _pHttpReqPayload    = new unsigned char[payloadLen + 1];
 80a0c1e:	6360      	str	r0, [r4, #52]	; 0x34
        _pHttpReqPayload[0] = 0;
 80a0c20:	7003      	strb	r3, [r0, #0]
 80a0c22:	e000      	b.n	80a0c26 <_ZN11RdWebClient17handleTCPReadDataEi+0xfa>
      _curHttpPayloadRxPos = 0;
      Log.trace("WebClient#%d Payload length %d", _clientIdx, payloadLen);
      // We have to ignore payloads that are too big for our memory
      if (payloadLen > HTTP_MAX_PAYLOAD_LENGTH)
      {
        payloadLen = 0;
 80a0c24:	46d1      	mov	r9, sl
        delete [] _pHttpReqPayload;
        // Add space for null terminator
        _pHttpReqPayload    = new unsigned char[payloadLen + 1];
        _pHttpReqPayload[0] = 0;
      }
      _httpReqPayloadLen = payloadLen;
 80a0c26:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
      // Handle Connection: Keep-alive
      _keepAlive = getKeepAliveFromHeader(_httpReqStr);
 80a0c2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0c2c:	f7ff ff6c 	bl	80a0b08 <_ZN11RdWebClient22getKeepAliveFromHeaderEPKc>
 80a0c30:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    }
    // Copy payload data to the payload buffer (if any)
    if ((_httpReqPayloadLen > 0) && (pEndOfHeaderInReadBuf != NULL))
 80a0c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0c36:	2b00      	cmp	r3, #0
 80a0c38:	dd26      	ble.n	80a0c88 <_ZN11RdWebClient17handleTCPReadDataEi+0x15c>
 80a0c3a:	f1b8 0f00 	cmp.w	r8, #0
 80a0c3e:	d023      	beq.n	80a0c88 <_ZN11RdWebClient17handleTCPReadDataEi+0x15c>
    {
      int toCopy = numRead - (pEndOfHeaderInReadBuf - pTCPReadPos);
 80a0c40:	ebc5 0508 	rsb	r5, r5, r8
 80a0c44:	1b76      	subs	r6, r6, r5
 80a0c46:	429e      	cmp	r6, r3
 80a0c48:	bfa8      	it	ge
 80a0c4a:	461e      	movge	r6, r3
      if (toCopy > _httpReqPayloadLen)
      {
        toCopy = _httpReqPayloadLen;
      }
      memcpy(_pHttpReqPayload, pEndOfHeaderInReadBuf, toCopy);
 80a0c4c:	4641      	mov	r1, r8
 80a0c4e:	4632      	mov	r2, r6
 80a0c50:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a0c52:	f002 fc8d 	bl	80a3570 <memcpy>
      _curHttpPayloadRxPos                       = toCopy;
      *(_pHttpReqPayload + _curHttpPayloadRxPos) = 0;
 80a0c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80a0c58:	2200      	movs	r2, #0
      if (toCopy > _httpReqPayloadLen)
      {
        toCopy = _httpReqPayloadLen;
      }
      memcpy(_pHttpReqPayload, pEndOfHeaderInReadBuf, toCopy);
      _curHttpPayloadRxPos                       = toCopy;
 80a0c5a:	6426      	str	r6, [r4, #64]	; 0x40
      *(_pHttpReqPayload + _curHttpPayloadRxPos) = 0;
 80a0c5c:	559a      	strb	r2, [r3, r6]
 80a0c5e:	e013      	b.n	80a0c88 <_ZN11RdWebClient17handleTCPReadDataEi+0x15c>
    }
  }
  else
  {
    // Copy data to payload
    int spaceLeft = _httpReqPayloadLen - _curHttpPayloadRxPos;
 80a0c60:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a0c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0c64:	1a1b      	subs	r3, r3, r0
    if (spaceLeft > 0)
 80a0c66:	2b00      	cmp	r3, #0
 80a0c68:	dd0e      	ble.n	80a0c88 <_ZN11RdWebClient17handleTCPReadDataEi+0x15c>
 80a0c6a:	429e      	cmp	r6, r3
 80a0c6c:	bfa8      	it	ge
 80a0c6e:	461e      	movge	r6, r3
      int toCopy = numRead;
      if (toCopy > spaceLeft)
      {
        toCopy = spaceLeft;
      }
      memcpy(_pHttpReqPayload + _curHttpPayloadRxPos, pTCPReadPos, toCopy);
 80a0c70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80a0c72:	4632      	mov	r2, r6
 80a0c74:	4418      	add	r0, r3
 80a0c76:	4629      	mov	r1, r5
 80a0c78:	f002 fc7a 	bl	80a3570 <memcpy>
      _curHttpPayloadRxPos                      += toCopy;
 80a0c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a0c7e:	441e      	add	r6, r3
      *(_pHttpReqPayload + _curHttpPayloadRxPos) = 0;
 80a0c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
      if (toCopy > spaceLeft)
      {
        toCopy = spaceLeft;
      }
      memcpy(_pHttpReqPayload + _curHttpPayloadRxPos, pTCPReadPos, toCopy);
      _curHttpPayloadRxPos                      += toCopy;
 80a0c82:	6426      	str	r6, [r4, #64]	; 0x40
      *(_pHttpReqPayload + _curHttpPayloadRxPos) = 0;
 80a0c84:	f803 8006 	strb.w	r8, [r3, r6]
    }
  }

  // Clean up temp buffer
  delete [] pTCPReadBuf;
 80a0c88:	4638      	mov	r0, r7
}
 80a0c8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      *(_pHttpReqPayload + _curHttpPayloadRxPos) = 0;
    }
  }

  // Clean up temp buffer
  delete [] pTCPReadBuf;
 80a0c8e:	f7ff ba0a 	b.w	80a00a6 <_ZdaPv>
 80a0c92:	bf00      	nop
 80a0c94:	080a3a40 	.word	0x080a3a40
 80a0c98:	080a3a45 	.word	0x080a3a45
 80a0c9c:	20000150 	.word	0x20000150

080a0ca0 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_>:
// Form a header to respond
void RdWebClient::formHTTPResponse(String& respStr, const char *rsltCode,
                                   const char *contentType, const char *contentEncoding,
                                   const char *respBody, int contentLen, bool noCache,
                                   bool keepAlive, const char *extraHeaders)
{
 80a0ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0ca4:	b085      	sub	sp, #20
 80a0ca6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80a0ca8:	461f      	mov	r7, r3
  if (contentLen == -1)
 80a0caa:	1c6b      	adds	r3, r5, #1
// Form a header to respond
void RdWebClient::formHTTPResponse(String& respStr, const char *rsltCode,
                                   const char *contentType, const char *contentEncoding,
                                   const char *respBody, int contentLen, bool noCache,
                                   bool keepAlive, const char *extraHeaders)
{
 80a0cac:	4604      	mov	r4, r0
 80a0cae:	4688      	mov	r8, r1
 80a0cb0:	4691      	mov	r9, r2
 80a0cb2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (contentLen == -1)
 80a0cb4:	d103      	bne.n	80a0cbe <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x1e>
  {
    contentLen = strlen(respBody);
 80a0cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0cb8:	f002 fd33 	bl	80a3722 <strlen>
 80a0cbc:	4605      	mov	r5, r0
  }
  respStr = String::format("HTTP/1.1 %s\r\nAccess-Control-Allow-Origin: *\r\nContent-Type: %s\r\n", rsltCode, contentType);
 80a0cbe:	464b      	mov	r3, r9
 80a0cc0:	4642      	mov	r2, r8
 80a0cc2:	491f      	ldr	r1, [pc, #124]	; (80a0d40 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0xa0>)
 80a0cc4:	4668      	mov	r0, sp
 80a0cc6:	f001 fa6f 	bl	80a21a8 <_ZN6String6formatEPKcz>
 80a0cca:	4669      	mov	r1, sp
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	f001 f944 	bl	80a1f5a <_ZN6StringaSEOS_>
 80a0cd2:	4668      	mov	r0, sp
 80a0cd4:	f001 f8b0 	bl	80a1e38 <_ZN6StringD1Ev>
  if ((contentEncoding != NULL) && (strlen(contentEncoding) != 0))
 80a0cd8:	b16f      	cbz	r7, 80a0cf6 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x56>
 80a0cda:	783b      	ldrb	r3, [r7, #0]
 80a0cdc:	b15b      	cbz	r3, 80a0cf6 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x56>
    respStr += String::format("Content-Encoding: %s\r\n", contentEncoding);
 80a0cde:	463a      	mov	r2, r7
 80a0ce0:	4918      	ldr	r1, [pc, #96]	; (80a0d44 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0xa4>)
 80a0ce2:	4668      	mov	r0, sp
 80a0ce4:	f001 fa60 	bl	80a21a8 <_ZN6String6formatEPKcz>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0ce8:	4669      	mov	r1, sp
 80a0cea:	4620      	mov	r0, r4
 80a0cec:	f001 f965 	bl	80a1fba <_ZN6String6concatERKS_>
 80a0cf0:	4668      	mov	r0, sp
 80a0cf2:	f001 f8a1 	bl	80a1e38 <_ZN6StringD1Ev>
  if (keepAlive)
 80a0cf6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80a0cfa:	b11b      	cbz	r3, 80a0d04 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x64>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0cfc:	4912      	ldr	r1, [pc, #72]	; (80a0d48 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0xa8>)
 80a0cfe:	4620      	mov	r0, r4
 80a0d00:	f001 f969 	bl	80a1fd6 <_ZN6String6concatEPKc>
    respStr += "Connection: keep-alive\r\n";
  if ((extraHeaders != NULL) && (strlen(extraHeaders) != 0))
 80a0d04:	b12e      	cbz	r6, 80a0d12 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x72>
 80a0d06:	7833      	ldrb	r3, [r6, #0]
 80a0d08:	b11b      	cbz	r3, 80a0d12 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x72>
 80a0d0a:	4631      	mov	r1, r6
 80a0d0c:	4620      	mov	r0, r4
 80a0d0e:	f001 f962 	bl	80a1fd6 <_ZN6String6concatEPKc>
    respStr += extraHeaders;
  if (noCache)
 80a0d12:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80a0d16:	b11b      	cbz	r3, 80a0d20 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0x80>
 80a0d18:	490c      	ldr	r1, [pc, #48]	; (80a0d4c <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0xac>)
 80a0d1a:	4620      	mov	r0, r4
 80a0d1c:	f001 f95b 	bl	80a1fd6 <_ZN6String6concatEPKc>
    respStr += "Cache-Control: no-cache, no-store, must-revalidate\r\n";
  respStr += String::format("Content-Length: %d\r\n\r\n%s", contentLen, respBody);
 80a0d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0d22:	462a      	mov	r2, r5
 80a0d24:	4668      	mov	r0, sp
 80a0d26:	490a      	ldr	r1, [pc, #40]	; (80a0d50 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_+0xb0>)
 80a0d28:	f001 fa3e 	bl	80a21a8 <_ZN6String6formatEPKcz>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0d2c:	4669      	mov	r1, sp
 80a0d2e:	4620      	mov	r0, r4
 80a0d30:	f001 f943 	bl	80a1fba <_ZN6String6concatERKS_>
 80a0d34:	4668      	mov	r0, sp
 80a0d36:	f001 f87f 	bl	80a1e38 <_ZN6StringD1Ev>
}
 80a0d3a:	b005      	add	sp, #20
 80a0d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0d40:	080a3a64 	.word	0x080a3a64
 80a0d44:	080a3aa4 	.word	0x080a3aa4
 80a0d48:	080a3abb 	.word	0x080a3abb
 80a0d4c:	080a3ad4 	.word	0x080a3ad4
 80a0d50:	080a3b09 	.word	0x080a3b09

080a0d54 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer>:


//////////////////////////////////////
// Handle an HTTP request
RdWebServerResourceDescr *RdWebClient::handleReceivedHttp(bool& handledOk, RdWebServer *pWebServer)
{
 80a0d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  handledOk = false;
 80a0d58:	2300      	movs	r3, #0
 80a0d5a:	700b      	strb	r3, [r1, #0]
 80a0d5c:	6a46      	ldr	r6, [r0, #36]	; 0x24


//////////////////////////////////////
// Handle an HTTP request
RdWebServerResourceDescr *RdWebClient::handleReceivedHttp(bool& handledOk, RdWebServer *pWebServer)
{
 80a0d5e:	b09b      	sub	sp, #108	; 0x6c
 80a0d60:	4604      	mov	r4, r0
 80a0d62:	460f      	mov	r7, r1
 80a0d64:	4690      	mov	r8, r2
  // Request string
  const char *pHttpReq = _httpReqStr.c_str();

  // Get HTTP method
  int httpMethod = METHOD_OTHER;
  if (strncmp(pHttpReq, "GET ", 4) == 0)
 80a0d66:	4998      	ldr	r1, [pc, #608]	; (80a0fc8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x274>)
 80a0d68:	2204      	movs	r2, #4
 80a0d6a:	4630      	mov	r0, r6
 80a0d6c:	f002 fd04 	bl	80a3778 <strncmp>
 80a0d70:	b188      	cbz	r0, 80a0d96 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x42>
  {
    httpMethod = METHOD_GET;
  }
  else if (strncmp(pHttpReq, "POST", 4) == 0)
 80a0d72:	2204      	movs	r2, #4
 80a0d74:	4995      	ldr	r1, [pc, #596]	; (80a0fcc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x278>)
 80a0d76:	4630      	mov	r0, r6
 80a0d78:	f002 fcfe 	bl	80a3778 <strncmp>
 80a0d7c:	b170      	cbz	r0, 80a0d9c <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x48>
  {
    httpMethod = METHOD_POST;
  }
  else if (strncmp(pHttpReq, "OPTIONS", 7) == 0)
 80a0d7e:	2207      	movs	r2, #7
 80a0d80:	4993      	ldr	r1, [pc, #588]	; (80a0fd0 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x27c>)
 80a0d82:	4630      	mov	r0, r6
 80a0d84:	f002 fcf8 	bl	80a3778 <strncmp>
  {
    httpMethod = METHOD_OPTIONS;
 80a0d88:	2800      	cmp	r0, #0
 80a0d8a:	bf14      	ite	ne
 80a0d8c:	f04f 0a00 	movne.w	sl, #0
 80a0d90:	f04f 0a03 	moveq.w	sl, #3
 80a0d94:	e004      	b.n	80a0da0 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x4c>

  // Get HTTP method
  int httpMethod = METHOD_OTHER;
  if (strncmp(pHttpReq, "GET ", 4) == 0)
  {
    httpMethod = METHOD_GET;
 80a0d96:	f04f 0a01 	mov.w	sl, #1
 80a0d9a:	e001      	b.n	80a0da0 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x4c>
  }
  else if (strncmp(pHttpReq, "POST", 4) == 0)
  {
    httpMethod = METHOD_POST;
 80a0d9c:	f04f 0a02 	mov.w	sl, #2
  {
    httpMethod = METHOD_OPTIONS;
  }

  // See if there is a valid HTTP command
  String endpointStr, argStr;
 80a0da0:	498c      	ldr	r1, [pc, #560]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0da2:	a808      	add	r0, sp, #32
 80a0da4:	f001 f88f 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0da8:	498a      	ldr	r1, [pc, #552]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0daa:	a80c      	add	r0, sp, #48	; 0x30
 80a0dac:	f001 f88b 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
  if (extractEndpointArgs(pHttpReq + 3, endpointStr, argStr))
 80a0db0:	aa0c      	add	r2, sp, #48	; 0x30
 80a0db2:	a908      	add	r1, sp, #32
 80a0db4:	1cf0      	adds	r0, r6, #3
 80a0db6:	f7ff fe5f 	bl	80a0a78 <_ZN11RdWebClient19extractEndpointArgsEPKcR6StringS3_>
 80a0dba:	4605      	mov	r5, r0
 80a0dbc:	2800      	cmp	r0, #0
 80a0dbe:	f000 80a5 	beq.w	80a0f0c <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1b8>
  {
    // Received cmd and arguments
    Log.trace("WebClient#%d handleHTTP EndPtStr %s ArgStr %s",
                  _clientIdx, endpointStr.c_str(), argStr.c_str());
 80a0dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0dc4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0dc6:	9300      	str	r3, [sp, #0]
 80a0dc8:	4983      	ldr	r1, [pc, #524]	; (80a0fd8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x284>)
 80a0dca:	9b08      	ldr	r3, [sp, #32]
 80a0dcc:	4883      	ldr	r0, [pc, #524]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0dce:	f7ff fa8f 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
 80a0dd2:	f8d8 b158 	ldr.w	fp, [r8, #344]	; 0x158
 80a0dd6:	9b08      	ldr	r3, [sp, #32]
    }

    // Endpoints
    RestAPIEndpointDef* getEndpoint(const char* endpointStr)
    {
        if (!_pRestAPIEndpoints)
 80a0dd8:	f1bb 0f00 	cmp.w	fp, #0
 80a0ddc:	d066      	beq.n	80a0eac <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x158>

    // Get the endpoint definition corresponding to a requested endpoint
    RestAPIEndpointDef *getEndpoint(const char *pEndpointStr)
    {
        // Look for the command in the registered callbacks
        for (int endpointIdx = 0; endpointIdx < _numEndpoints; endpointIdx++)
 80a0dde:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 80a0de2:	f04f 0900 	mov.w	r9, #0
 80a0de6:	454a      	cmp	r2, r9
 80a0de8:	9207      	str	r2, [sp, #28]
 80a0dea:	dd5f      	ble.n	80a0eac <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x158>
        {
            RestAPIEndpointDef *pEndpoint = _pEndpoints[endpointIdx];
 80a0dec:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
            if (strcasecmp(pEndpoint->_endpointStr.c_str(), pEndpointStr) == 0)
 80a0df0:	4619      	mov	r1, r3
 80a0df2:	6828      	ldr	r0, [r5, #0]
 80a0df4:	9306      	str	r3, [sp, #24]
 80a0df6:	f002 fc11 	bl	80a361c <strcasecmp>
 80a0dfa:	9b06      	ldr	r3, [sp, #24]
 80a0dfc:	b118      	cbz	r0, 80a0e06 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0xb2>

    // Get the endpoint definition corresponding to a requested endpoint
    RestAPIEndpointDef *getEndpoint(const char *pEndpointStr)
    {
        // Look for the command in the registered callbacks
        for (int endpointIdx = 0; endpointIdx < _numEndpoints; endpointIdx++)
 80a0dfe:	f109 0901 	add.w	r9, r9, #1
 80a0e02:	9a07      	ldr	r2, [sp, #28]
 80a0e04:	e7ef      	b.n	80a0de6 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x92>
    // Handle REST API commands
    RestAPIEndpointDef *pEndpoint = pWebServer->getEndpoint(endpointStr);
    if (pEndpoint)
    {
      Log.trace("WebClient#%d FoundEndpoint <%s> Type %d",
                _clientIdx, endpointStr.c_str(), pEndpoint->_endpointType);
 80a0e06:	692a      	ldr	r2, [r5, #16]
 80a0e08:	4975      	ldr	r1, [pc, #468]	; (80a0fe0 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x28c>)
 80a0e0a:	9200      	str	r2, [sp, #0]
 80a0e0c:	4873      	ldr	r0, [pc, #460]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0e0e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0e10:	f7ff fa6e 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
      if (pEndpoint->_endpointType == RestAPIEndpointDef::ENDPOINT_CALLBACK)
 80a0e14:	692b      	ldr	r3, [r5, #16]
 80a0e16:	2b01      	cmp	r3, #1
 80a0e18:	d148      	bne.n	80a0eac <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x158>
      {
        String             retStr;
 80a0e1a:	496e      	ldr	r1, [pc, #440]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0e1c:	a810      	add	r0, sp, #64	; 0x40
 80a0e1e:	f001 f852 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
    unsigned char* _pMsgContent;
    int _msgContentLen;
    RestAPIEndpointMsg(int method, const char* pEndpointStr, const char* pArgStr, const char* pMsgHeader)
    {
        _method = method;
        _pEndpointStr = pEndpointStr;
 80a0e22:	9b08      	ldr	r3, [sp, #32]
        _pArgStr = pArgStr;
        _pMsgHeader = pMsgHeader;
 80a0e24:	9617      	str	r6, [sp, #92]	; 0x5c
    unsigned char* _pMsgContent;
    int _msgContentLen;
    RestAPIEndpointMsg(int method, const char* pEndpointStr, const char* pArgStr, const char* pMsgHeader)
    {
        _method = method;
        _pEndpointStr = pEndpointStr;
 80a0e26:	9315      	str	r3, [sp, #84]	; 0x54
        _pArgStr = pArgStr;
 80a0e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        RestAPIEndpointMsg apiMsg(httpMethod, endpointStr.c_str(),
                                  argStr.c_str(), pHttpReq);
        apiMsg._pMsgContent   = _pHttpReqPayload;
        apiMsg._msgContentLen = _httpReqPayloadLen;
        (pEndpoint->_callback)(apiMsg, retStr);
 80a0e2a:	a910      	add	r1, sp, #64	; 0x40
 80a0e2c:	9316      	str	r3, [sp, #88]	; 0x58
      if (pEndpoint->_endpointType == RestAPIEndpointDef::ENDPOINT_CALLBACK)
      {
        String             retStr;
        RestAPIEndpointMsg apiMsg(httpMethod, endpointStr.c_str(),
                                  argStr.c_str(), pHttpReq);
        apiMsg._pMsgContent   = _pHttpReqPayload;
 80a0e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        apiMsg._msgContentLen = _httpReqPayloadLen;
        (pEndpoint->_callback)(apiMsg, retStr);
 80a0e30:	a814      	add	r0, sp, #80	; 0x50
      if (pEndpoint->_endpointType == RestAPIEndpointDef::ENDPOINT_CALLBACK)
      {
        String             retStr;
        RestAPIEndpointMsg apiMsg(httpMethod, endpointStr.c_str(),
                                  argStr.c_str(), pHttpReq);
        apiMsg._pMsgContent   = _pHttpReqPayload;
 80a0e32:	9318      	str	r3, [sp, #96]	; 0x60
        apiMsg._msgContentLen = _httpReqPayloadLen;
 80a0e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    const char* _pMsgHeader;
    unsigned char* _pMsgContent;
    int _msgContentLen;
    RestAPIEndpointMsg(int method, const char* pEndpointStr, const char* pArgStr, const char* pMsgHeader)
    {
        _method = method;
 80a0e36:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 80a0e3a:	9319      	str	r3, [sp, #100]	; 0x64
        (pEndpoint->_callback)(apiMsg, retStr);
 80a0e3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80a0e3e:	4798      	blx	r3
        Log.trace("WebClient#%d api response len %d",
                  _clientIdx, retStr.length());
 80a0e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a0e42:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0e44:	4967      	ldr	r1, [pc, #412]	; (80a0fe4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x290>)
 80a0e46:	4865      	ldr	r0, [pc, #404]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0e48:	f7ff fa52 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
 80a0e4c:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 80a0e4e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        if (pEndpoint->_contentType.length() == 0)
 80a0e52:	69e9      	ldr	r1, [r5, #28]
        {
          formHTTPResponse(_httpRespStr, "200 OK", "application/json",
                           "", retStr.c_str(), -1,
                           pEndpoint->_noCache, _keepAlive,
                           pEndpoint->_extraHeaders.c_str());
 80a0e54:	9604      	str	r6, [sp, #16]
 80a0e56:	9203      	str	r2, [sp, #12]
 80a0e58:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 80a0e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a0e5e:	9202      	str	r2, [sp, #8]
 80a0e60:	f04f 32ff 	mov.w	r2, #4294967295
 80a0e64:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a0e68:	9201      	str	r2, [sp, #4]
 80a0e6a:	9300      	str	r3, [sp, #0]
        apiMsg._pMsgContent   = _pHttpReqPayload;
        apiMsg._msgContentLen = _httpReqPayloadLen;
        (pEndpoint->_callback)(apiMsg, retStr);
        Log.trace("WebClient#%d api response len %d",
                  _clientIdx, retStr.length());
        if (pEndpoint->_contentType.length() == 0)
 80a0e6c:	2900      	cmp	r1, #0
 80a0e6e:	d16e      	bne.n	80a0f4e <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1fa>
        {
          formHTTPResponse(_httpRespStr, "200 OK", "application/json",
                           "", retStr.c_str(), -1,
                           pEndpoint->_noCache, _keepAlive,
                           pEndpoint->_extraHeaders.c_str());
 80a0e70:	4b58      	ldr	r3, [pc, #352]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0e72:	4a5d      	ldr	r2, [pc, #372]	; (80a0fe8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x294>)
        else
        {
          formHTTPResponse(_httpRespStr, "200 OK", pEndpoint->_contentType,
                           pEndpoint->_contentEncoding, retStr.c_str(), -1,
                           pEndpoint->_noCache, _keepAlive,
                           pEndpoint->_extraHeaders.c_str());
 80a0e74:	495d      	ldr	r1, [pc, #372]	; (80a0fec <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x298>)
 80a0e76:	f7ff ff13 	bl	80a0ca0 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_>
        }
        Log.trace("WebClient#%d http response len %d", _clientIdx, _httpRespStr.length());
 80a0e7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0e7c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0e7e:	495c      	ldr	r1, [pc, #368]	; (80a0ff0 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x29c>)
 80a0e80:	4856      	ldr	r0, [pc, #344]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0e82:	f7ff fa35 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        // On Photon before 0.7.0-rc.4 this was needed
        // These delays arrived at by experimentation - 15ms seems ok, 10ms is not
        // delay(20);
        _TCPClient.write((uint8_t *) _httpRespStr.c_str(), _httpRespStr.length());
 80a0e86:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a0e88:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a0e8a:	4620      	mov	r0, r4
 80a0e8c:	f000 fd65 	bl	80a195a <_ZN9TCPClient5writeEPKhj>
        Log.trace("WebClient#%d write to tcp len %d", _clientIdx, _httpRespStr.length());
 80a0e90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0e92:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0e94:	4957      	ldr	r1, [pc, #348]	; (80a0ff4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2a0>)
 80a0e96:	4851      	ldr	r0, [pc, #324]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0e98:	f7ff fa2a 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        // // See comment above
        // delay(20);
        _TCPClient.flush();
 80a0e9c:	4620      	mov	r0, r4
 80a0e9e:	f000 fd70 	bl	80a1982 <_ZN9TCPClient5flushEv>
        handledOk = true;
 80a0ea2:	2301      	movs	r3, #1
 80a0ea4:	703b      	strb	r3, [r7, #0]
    {
      Log.trace("WebClient#%d FoundEndpoint <%s> Type %d",
                _clientIdx, endpointStr.c_str(), pEndpoint->_endpointType);
      if (pEndpoint->_endpointType == RestAPIEndpointDef::ENDPOINT_CALLBACK)
      {
        String             retStr;
 80a0ea6:	a810      	add	r0, sp, #64	; 0x40
 80a0ea8:	f000 ffc6 	bl	80a1e38 <_ZN6StringD1Ev>
        handledOk = true;
      }
    }

    // Look for the command in the static resources
    if (!handledOk)
 80a0eac:	783e      	ldrb	r6, [r7, #0]
 80a0eae:	bb1e      	cbnz	r6, 80a0ef8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1a4>
 80a0eb0:	f8d8 3160 	ldr.w	r3, [r8, #352]	; 0x160
 80a0eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80a0eb8:	9306      	str	r3, [sp, #24]
    RdWebServerResourceDescr* getResource(int resIdx)
    {
        if (!_pWebServerResources)
            return NULL;
        if ((resIdx >= 0) && (resIdx < _numWebServerResources))
            return _pWebServerResources + resIdx;
 80a0eba:	f04f 0b1c 	mov.w	fp, #28
    {
      for (int wsResIdx = 0; wsResIdx < pWebServer->getNumResources(); wsResIdx++)
 80a0ebe:	9b06      	ldr	r3, [sp, #24]
 80a0ec0:	429e      	cmp	r6, r3
 80a0ec2:	da19      	bge.n	80a0ef8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1a4>
        return _numWebServerResources;
    }

    RdWebServerResourceDescr* getResource(int resIdx)
    {
        if (!_pWebServerResources)
 80a0ec4:	f8d8 315c 	ldr.w	r3, [r8, #348]	; 0x15c
 80a0ec8:	2b00      	cmp	r3, #0
 80a0eca:	d070      	beq.n	80a0fae <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x25a>
            return NULL;
        if ((resIdx >= 0) && (resIdx < _numWebServerResources))
            return _pWebServerResources + resIdx;
 80a0ecc:	fb0b f206 	mul.w	r2, fp, r6
      {
        RdWebServerResourceDescr *pRes = pWebServer->getResource(wsResIdx);
        if ((strcasecmp(pRes->_pResId, endpointStr) == 0) ||
 80a0ed0:	f853 a002 	ldr.w	sl, [r3, r2]
 80a0ed4:	4649      	mov	r1, r9
 80a0ed6:	4650      	mov	r0, sl
 80a0ed8:	189d      	adds	r5, r3, r2
 80a0eda:	f002 fb9f 	bl	80a361c <strcasecmp>
 80a0ede:	2800      	cmp	r0, #0
 80a0ee0:	d038      	beq.n	80a0f54 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x200>
 80a0ee2:	f899 2000 	ldrb.w	r2, [r9]
 80a0ee6:	2a00      	cmp	r2, #0
 80a0ee8:	d15f      	bne.n	80a0faa <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x256>
            ((strlen(endpointStr) == 0) && (strcasecmp(pRes->_pResId, "index.html") == 0)))
 80a0eea:	4943      	ldr	r1, [pc, #268]	; (80a0ff8 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2a4>)
 80a0eec:	4650      	mov	r0, sl
 80a0eee:	f002 fb95 	bl	80a361c <strcasecmp>
 80a0ef2:	2800      	cmp	r0, #0
 80a0ef4:	d02e      	beq.n	80a0f54 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x200>
 80a0ef6:	e058      	b.n	80a0faa <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x256>
//////////////////////////////////////
// Handle an HTTP request
RdWebServerResourceDescr *RdWebClient::handleReceivedHttp(bool& handledOk, RdWebServer *pWebServer)
{
  handledOk = false;
  RdWebServerResourceDescr *pResourceToRespondWith = NULL;
 80a0ef8:	2500      	movs	r5, #0
        }
      }
    }

    // If not handled ok
    if (!handledOk)
 80a0efa:	783b      	ldrb	r3, [r7, #0]
 80a0efc:	b95b      	cbnz	r3, 80a0f16 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1c2>
    {
      Log.trace("WebClient#%d Endpoint %s not found or invalid", _clientIdx, endpointStr.c_str());
 80a0efe:	9b08      	ldr	r3, [sp, #32]
 80a0f00:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0f02:	493e      	ldr	r1, [pc, #248]	; (80a0ffc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2a8>)
 80a0f04:	4835      	ldr	r0, [pc, #212]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0f06:	f7ff f9f3 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
 80a0f0a:	e004      	b.n	80a0f16 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1c2>
    }
  }
  else
  {
    Log.trace("WebClient#%d Cannot find command or args", _clientIdx);
 80a0f0c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0f0e:	493c      	ldr	r1, [pc, #240]	; (80a1000 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2ac>)
 80a0f10:	4832      	ldr	r0, [pc, #200]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0f12:	f7ff f9ed 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
  }

  // Handle situations where the command wasn't handled ok
  if (!handledOk)
 80a0f16:	783e      	ldrb	r6, [r7, #0]
 80a0f18:	2e00      	cmp	r6, #0
 80a0f1a:	d14a      	bne.n	80a0fb2 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x25e>
  {
    Log.trace("WebClient#%d Returning 404 Not found", _clientIdx);
 80a0f1c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0f1e:	4939      	ldr	r1, [pc, #228]	; (80a1004 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2b0>)
 80a0f20:	482e      	ldr	r0, [pc, #184]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0f22:	f7ff f9e5 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
    formHTTPResponse(_httpRespStr, "404 Not Found", "text/plain", "", "404 Not Found", -1);
 80a0f26:	4938      	ldr	r1, [pc, #224]	; (80a1008 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2b4>)
 80a0f28:	f04f 33ff 	mov.w	r3, #4294967295
 80a0f2c:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a0f30:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a0f34:	9604      	str	r6, [sp, #16]
 80a0f36:	9603      	str	r6, [sp, #12]
 80a0f38:	9602      	str	r6, [sp, #8]
 80a0f3a:	4b26      	ldr	r3, [pc, #152]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0f3c:	4a33      	ldr	r2, [pc, #204]	; (80a100c <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2b8>)
 80a0f3e:	f7ff feaf 	bl	80a0ca0 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_>
    _TCPClient.write((uint8_t *) _httpRespStr.c_str(), _httpRespStr.length());
 80a0f42:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a0f44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	f000 fd07 	bl	80a195a <_ZN9TCPClient5writeEPKhj>
 80a0f4c:	e031      	b.n	80a0fb2 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x25e>
        else
        {
          formHTTPResponse(_httpRespStr, "200 OK", pEndpoint->_contentType,
                           pEndpoint->_contentEncoding, retStr.c_str(), -1,
                           pEndpoint->_noCache, _keepAlive,
                           pEndpoint->_extraHeaders.c_str());
 80a0f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a0f50:	696a      	ldr	r2, [r5, #20]
 80a0f52:	e78f      	b.n	80a0e74 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x120>
      {
        RdWebServerResourceDescr *pRes = pWebServer->getResource(wsResIdx);
        if ((strcasecmp(pRes->_pResId, endpointStr) == 0) ||
            ((strlen(endpointStr) == 0) && (strcasecmp(pRes->_pResId, "index.html") == 0)))
        {
          if (pRes->_pData != NULL)
 80a0f54:	68ea      	ldr	r2, [r5, #12]
 80a0f56:	b332      	cbz	r2, 80a0fa6 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x252>
          {
            Log.trace("WebClient#%d sending resource %s, %d bytes, %s",
                      _clientIdx, pRes->_pResId, pRes->_dataLen, pRes->_pMimeType);
 80a0f58:	686a      	ldr	r2, [r5, #4]
 80a0f5a:	4653      	mov	r3, sl
 80a0f5c:	9201      	str	r2, [sp, #4]
 80a0f5e:	692a      	ldr	r2, [r5, #16]
 80a0f60:	492b      	ldr	r1, [pc, #172]	; (80a1010 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x2bc>)
 80a0f62:	9200      	str	r2, [sp, #0]
 80a0f64:	481d      	ldr	r0, [pc, #116]	; (80a0fdc <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x288>)
 80a0f66:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a0f68:	f7ff f9c2 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
            // Form header
            formHTTPResponse(_httpRespStr, "200 OK", pRes->_pMimeType,
                             pRes->_pContentEncoding, "", pRes->_dataLen,
                             pRes->_noCache, _keepAlive,
                             pRes->_pExtraHeaders);
 80a0f6c:	69ab      	ldr	r3, [r5, #24]
 80a0f6e:	491f      	ldr	r1, [pc, #124]	; (80a0fec <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x298>)
 80a0f70:	9304      	str	r3, [sp, #16]
 80a0f72:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80a0f76:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a0f7a:	9303      	str	r3, [sp, #12]
 80a0f7c:	7d2b      	ldrb	r3, [r5, #20]
 80a0f7e:	9302      	str	r3, [sp, #8]
 80a0f80:	692b      	ldr	r3, [r5, #16]
 80a0f82:	9301      	str	r3, [sp, #4]
 80a0f84:	4b13      	ldr	r3, [pc, #76]	; (80a0fd4 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x280>)
 80a0f86:	9300      	str	r3, [sp, #0]
 80a0f88:	68ab      	ldr	r3, [r5, #8]
 80a0f8a:	686a      	ldr	r2, [r5, #4]
 80a0f8c:	f7ff fe88 	bl	80a0ca0 <_ZN11RdWebClient16formHTTPResponseER6StringPKcS3_S3_S3_ibbS3_>
            _TCPClient.write((uint8_t *) _httpRespStr.c_str(), _httpRespStr.length());
 80a0f90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a0f92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a0f94:	4620      	mov	r0, r4
 80a0f96:	f000 fce0 	bl	80a195a <_ZN9TCPClient5writeEPKhj>

            /*const char *pBuff   = _httpRespStr.c_str();
             * const int  bufffLen = strlen(pBuff);
             * Log.trace("Header %d = %02x %02x %02x ... %02x %02x %02x", _httpRespStr.length(),
             *        pBuff[0], pBuff[1], pBuff[2], pBuff[bufffLen - 3], pBuff[bufffLen - 2], pBuff[bufffLen - 1]);*/
            _TCPClient.flush();
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	f000 fcf1 	bl	80a1982 <_ZN9TCPClient5flushEv>
            // Respond with static resource
            pResourceToRespondWith = pRes;
            handledOk              = true;
 80a0fa0:	2301      	movs	r3, #1
 80a0fa2:	703b      	strb	r3, [r7, #0]
 80a0fa4:	e7a9      	b.n	80a0efa <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1a6>
//////////////////////////////////////
// Handle an HTTP request
RdWebServerResourceDescr *RdWebClient::handleReceivedHttp(bool& handledOk, RdWebServer *pWebServer)
{
  handledOk = false;
  RdWebServerResourceDescr *pResourceToRespondWith = NULL;
 80a0fa6:	4615      	mov	r5, r2
 80a0fa8:	e7a7      	b.n	80a0efa <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x1a6>
    }

    // Look for the command in the static resources
    if (!handledOk)
    {
      for (int wsResIdx = 0; wsResIdx < pWebServer->getNumResources(); wsResIdx++)
 80a0faa:	3601      	adds	r6, #1
 80a0fac:	e787      	b.n	80a0ebe <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer+0x16a>
      {
        RdWebServerResourceDescr *pRes = pWebServer->getResource(wsResIdx);
        if ((strcasecmp(pRes->_pResId, endpointStr) == 0) ||
 80a0fae:	681b      	ldr	r3, [r3, #0]
 80a0fb0:	deff      	udf	#255	; 0xff
  {
    httpMethod = METHOD_OPTIONS;
  }

  // See if there is a valid HTTP command
  String endpointStr, argStr;
 80a0fb2:	a80c      	add	r0, sp, #48	; 0x30
 80a0fb4:	f000 ff40 	bl	80a1e38 <_ZN6StringD1Ev>
 80a0fb8:	a808      	add	r0, sp, #32
 80a0fba:	f000 ff3d 	bl	80a1e38 <_ZN6StringD1Ev>
    Log.trace("WebClient#%d Returning 404 Not found", _clientIdx);
    formHTTPResponse(_httpRespStr, "404 Not Found", "text/plain", "", "404 Not Found", -1);
    _TCPClient.write((uint8_t *) _httpRespStr.c_str(), _httpRespStr.length());
  }
  return pResourceToRespondWith;
}
 80a0fbe:	4628      	mov	r0, r5
 80a0fc0:	b01b      	add	sp, #108	; 0x6c
 80a0fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0fc6:	bf00      	nop
 80a0fc8:	080a3b22 	.word	0x080a3b22
 80a0fcc:	080a3b27 	.word	0x080a3b27
 80a0fd0:	080a3b2c 	.word	0x080a3b2c
 80a0fd4:	080a3a44 	.word	0x080a3a44
 80a0fd8:	080a3b34 	.word	0x080a3b34
 80a0fdc:	20000150 	.word	0x20000150
 80a0fe0:	080a3cad 	.word	0x080a3cad
 80a0fe4:	080a3b62 	.word	0x080a3b62
 80a0fe8:	080a3b83 	.word	0x080a3b83
 80a0fec:	080a3b94 	.word	0x080a3b94
 80a0ff0:	080a3b9b 	.word	0x080a3b9b
 80a0ff4:	080a3bbd 	.word	0x080a3bbd
 80a0ff8:	080a3bde 	.word	0x080a3bde
 80a0ffc:	080a3c18 	.word	0x080a3c18
 80a1000:	080a3c46 	.word	0x080a3c46
 80a1004:	080a3c6f 	.word	0x080a3c6f
 80a1008:	080a3c9f 	.word	0x080a3c9f
 80a100c:	080a3c94 	.word	0x080a3c94
 80a1010:	080a3be9 	.word	0x080a3be9

080a1014 <_ZN11RdWebServerC1Ev>:
    respStr += "Cache-Control: no-cache, no-store, must-revalidate\r\n";
  respStr += String::format("Content-Length: %d\r\n\r\n%s", contentLen, respBody);
}


RdWebServer::RdWebServer()
 80a1014:	b510      	push	{r4, lr}
 80a1016:	4604      	mov	r4, r0
 80a1018:	4b12      	ldr	r3, [pc, #72]	; (80a1064 <_ZN11RdWebServerC1Ev+0x50>)
 80a101a:	f840 3b0c 	str.w	r3, [r0], #12
 80a101e:	f7ff fc97 	bl	80a0950 <_ZN11RdWebClientC1Ev>
 80a1022:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80a1026:	f7ff fc93 	bl	80a0950 <_ZN11RdWebClientC1Ev>
 80a102a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80a102e:	f7ff fc8f 	bl	80a0950 <_ZN11RdWebClientC1Ev>
{
  _pTCPServer                  = NULL;
 80a1032:	2300      	movs	r3, #0
 80a1034:	60a3      	str	r3, [r4, #8]
  _pRestAPIEndpoints           = NULL;
 80a1036:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  _pWebServerResources         = NULL;
 80a103a:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
  _numWebServerResources       = 0;
 80a103e:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  _TCPPort                     = 80;
  _webServerState              = WEB_SERVER_STOPPED;
 80a1042:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
  _webServerStateEntryMs       = 0;
 80a1046:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  _numWebServerResources       = 0;
  _webServerActiveLastUnixTime = 0;
 80a104a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
    RdWebClient();
    ~RdWebClient();

    void setClientIdx(int clientIdx)
    {
        _clientIdx = clientIdx;
 80a104e:	6763      	str	r3, [r4, #116]	; 0x74
 80a1050:	2301      	movs	r3, #1
{
  _pTCPServer                  = NULL;
  _pRestAPIEndpoints           = NULL;
  _pWebServerResources         = NULL;
  _numWebServerResources       = 0;
  _TCPPort                     = 80;
 80a1052:	2250      	movs	r2, #80	; 0x50
 80a1054:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80a1058:	2302      	movs	r3, #2
 80a105a:	6062      	str	r2, [r4, #4]
 80a105c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  // Configure each client
  for (int clientIdx = 0; clientIdx < MAX_WEB_CLIENTS; clientIdx++)
  {
    _webClients[clientIdx].setClientIdx(clientIdx);
  }
}
 80a1060:	4620      	mov	r0, r4
 80a1062:	bd10      	pop	{r4, pc}
 80a1064:	080a3ef4 	.word	0x080a3ef4

080a1068 <_ZN11RdWebServer12connStateStrEv>:
}


const char *RdWebServer::connStateStr()
{
  switch (_webServerState)
 80a1068:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
 80a106c:	2b02      	cmp	r3, #2
 80a106e:	bf9a      	itte	ls
 80a1070:	4a02      	ldrls	r2, [pc, #8]	; (80a107c <_ZN11RdWebServer12connStateStrEv+0x14>)
 80a1072:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 80a1076:	4802      	ldrhi	r0, [pc, #8]	; (80a1080 <_ZN11RdWebServer12connStateStrEv+0x18>)

    case WEB_SERVER_BEGUN:
      return "Begun";
  }
  return "Unknown";
}
 80a1078:	4770      	bx	lr
 80a107a:	bf00      	nop
 80a107c:	080a3efc 	.word	0x080a3efc
 80a1080:	080a39f2 	.word	0x080a39f2

080a1084 <_ZN11RdWebServer8setStateENS_14WebServerStateE>:
  return 'K';
}


void RdWebServer::setState(WebServerState newState)
{
 80a1084:	b510      	push	{r4, lr}
  _webServerState        = newState;
 80a1086:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
  return 'K';
}


void RdWebServer::setState(WebServerState newState)
{
 80a108a:	4604      	mov	r4, r0
 80a108c:	f000 fa2a 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
 80a1090:	4601      	mov	r1, r0
  _webServerState        = newState;
  _webServerStateEntryMs = millis();
 80a1092:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
  Log.trace("WebServerState: %s entryMs %ld", connStateStr(), _webServerStateEntryMs);
 80a1096:	4620      	mov	r0, r4
 80a1098:	f7ff ffe6 	bl	80a1068 <_ZN11RdWebServer12connStateStrEv>
 80a109c:	460b      	mov	r3, r1
 80a109e:	4602      	mov	r2, r0
 80a10a0:	4902      	ldr	r1, [pc, #8]	; (80a10ac <_ZN11RdWebServer8setStateENS_14WebServerStateE+0x28>)
 80a10a2:	4803      	ldr	r0, [pc, #12]	; (80a10b0 <_ZN11RdWebServer8setStateENS_14WebServerStateE+0x2c>)
 80a10a4:	f7ff f924 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
 80a10a8:	bd10      	pop	{r4, pc}
 80a10aa:	bf00      	nop
 80a10ac:	080a3cd5 	.word	0x080a3cd5
 80a10b0:	20000150 	.word	0x20000150

080a10b4 <_ZN11RdWebServer5startEi>:
}


void RdWebServer::start(int port)
{
 80a10b4:	b538      	push	{r3, r4, r5, lr}
 80a10b6:	4604      	mov	r4, r0
 80a10b8:	460d      	mov	r5, r1
  Log.info("WebServer: Start");
 80a10ba:	4805      	ldr	r0, [pc, #20]	; (80a10d0 <_ZN11RdWebServer5startEi+0x1c>)
 80a10bc:	4905      	ldr	r1, [pc, #20]	; (80a10d4 <_ZN11RdWebServer5startEi+0x20>)
 80a10be:	f7ff f92e 	bl	80a031e <_ZNK5spark6Logger4infoEPKcz>
  _TCPPort = port;
 80a10c2:	6065      	str	r5, [r4, #4]
  setState(WEB_SERVER_WAIT_CONN);
 80a10c4:	4620      	mov	r0, r4
}
 80a10c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void RdWebServer::start(int port)
{
  Log.info("WebServer: Start");
  _TCPPort = port;
  setState(WEB_SERVER_WAIT_CONN);
 80a10ca:	2101      	movs	r1, #1
 80a10cc:	f7ff bfda 	b.w	80a1084 <_ZN11RdWebServer8setStateENS_14WebServerStateE>
 80a10d0:	20000150 	.word	0x20000150
 80a10d4:	080a3cf4 	.word	0x080a3cf4

080a10d8 <_ZN11RdWebServer4stopEv>:
  setState(WEB_SERVER_WAIT_CONN);
}


void RdWebServer::stop()
{
 80a10d8:	b510      	push	{r4, lr}
 80a10da:	4604      	mov	r4, r0
  Log.info("WebServer: Stop");
 80a10dc:	490a      	ldr	r1, [pc, #40]	; (80a1108 <_ZN11RdWebServer4stopEv+0x30>)
 80a10de:	480b      	ldr	r0, [pc, #44]	; (80a110c <_ZN11RdWebServer4stopEv+0x34>)
 80a10e0:	f7ff f91d 	bl	80a031e <_ZNK5spark6Logger4infoEPKcz>
  if (_pTCPServer)
 80a10e4:	68a0      	ldr	r0, [r4, #8]
 80a10e6:	b140      	cbz	r0, 80a10fa <_ZN11RdWebServer4stopEv+0x22>
  {
    _pTCPServer->stop();
 80a10e8:	f001 ff24 	bl	80a2f34 <_ZN9TCPServer4stopEv>
    // Delete previous server
    delete _pTCPServer;
 80a10ec:	68a0      	ldr	r0, [r4, #8]
 80a10ee:	b110      	cbz	r0, 80a10f6 <_ZN11RdWebServer4stopEv+0x1e>
 80a10f0:	6803      	ldr	r3, [r0, #0]
 80a10f2:	685b      	ldr	r3, [r3, #4]
 80a10f4:	4798      	blx	r3
    _pTCPServer = NULL;
 80a10f6:	2300      	movs	r3, #0
 80a10f8:	60a3      	str	r3, [r4, #8]
  }
  setState(WEB_SERVER_STOPPED);
 80a10fa:	4620      	mov	r0, r4
}
 80a10fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _pTCPServer->stop();
    // Delete previous server
    delete _pTCPServer;
    _pTCPServer = NULL;
  }
  setState(WEB_SERVER_STOPPED);
 80a1100:	2100      	movs	r1, #0
 80a1102:	f7ff bfbf 	b.w	80a1084 <_ZN11RdWebServer8setStateENS_14WebServerStateE>
 80a1106:	bf00      	nop
 80a1108:	080a3d05 	.word	0x080a3d05
 80a110c:	20000150 	.word	0x20000150

080a1110 <_ZN11RdWebServer7restartEi>:
  setState(WEB_SERVER_WAIT_CONN);
}


void RdWebServer::restart(int port)
{
 80a1110:	b538      	push	{r3, r4, r5, lr}
 80a1112:	4604      	mov	r4, r0
 80a1114:	460d      	mov	r5, r1
  Log.info("WebServer: Restart");
 80a1116:	480d      	ldr	r0, [pc, #52]	; (80a114c <_ZN11RdWebServer7restartEi+0x3c>)
 80a1118:	490d      	ldr	r1, [pc, #52]	; (80a1150 <_ZN11RdWebServer7restartEi+0x40>)
 80a111a:	f7ff f900 	bl	80a031e <_ZNK5spark6Logger4infoEPKcz>
  // Check if already started
  if (_pTCPServer)
 80a111e:	68a3      	ldr	r3, [r4, #8]
 80a1120:	b113      	cbz	r3, 80a1128 <_ZN11RdWebServer7restartEi+0x18>
  {
    stop();
 80a1122:	4620      	mov	r0, r4
 80a1124:	f7ff ffd8 	bl	80a10d8 <_ZN11RdWebServer4stopEv>
  }
  // Create server and begin
  _TCPPort    = port;
 80a1128:	6065      	str	r5, [r4, #4]
  _pTCPServer = new TCPServer(_TCPPort);
 80a112a:	2030      	movs	r0, #48	; 0x30
 80a112c:	f7fe ffb5 	bl	80a009a <_Znwj>
 80a1130:	4605      	mov	r5, r0
 80a1132:	b118      	cbz	r0, 80a113c <_ZN11RdWebServer7restartEi+0x2c>
 80a1134:	2200      	movs	r2, #0
 80a1136:	88a1      	ldrh	r1, [r4, #4]
 80a1138:	f001 fecc 	bl	80a2ed4 <_ZN9TCPServerC1Etm>
 80a113c:	60a5      	str	r5, [r4, #8]
  setState(WEB_SERVER_WAIT_CONN);
 80a113e:	4620      	mov	r0, r4
}
 80a1140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    stop();
  }
  // Create server and begin
  _TCPPort    = port;
  _pTCPServer = new TCPServer(_TCPPort);
  setState(WEB_SERVER_WAIT_CONN);
 80a1144:	2101      	movs	r1, #1
 80a1146:	f7ff bf9d 	b.w	80a1084 <_ZN11RdWebServer8setStateENS_14WebServerStateE>
 80a114a:	bf00      	nop
 80a114c:	20000150 	.word	0x20000150
 80a1150:	080a3d15 	.word	0x080a3d15

080a1154 <_ZN11RdWebServer9availableEv>:
  setState(WEB_SERVER_STOPPED);
}


TCPClient RdWebServer::available()
{
 80a1154:	b510      	push	{r4, lr}
  if (_pTCPServer)
 80a1156:	6889      	ldr	r1, [r1, #8]
  setState(WEB_SERVER_STOPPED);
}


TCPClient RdWebServer::available()
{
 80a1158:	4604      	mov	r4, r0
  if (_pTCPServer)
 80a115a:	b111      	cbz	r1, 80a1162 <_ZN11RdWebServer9availableEv+0xe>
  {
    return _pTCPServer->available();
 80a115c:	f001 ff72 	bl	80a3044 <_ZN9TCPServer9availableEv>
 80a1160:	e003      	b.n	80a116a <_ZN11RdWebServer9availableEv+0x16>
  }
  return -1;
 80a1162:	f04f 31ff 	mov.w	r1, #4294967295
 80a1166:	f000 fdd5 	bl	80a1d14 <_ZN9TCPClientC1Em>
}
 80a116a:	4620      	mov	r0, r4
 80a116c:	bd10      	pop	{r4, pc}
	...

080a1170 <_ZN11RdWebClient7serviceEP11RdWebServer>:


//////////////////////////////////
// Handle the client state machine
void RdWebClient::service(RdWebServer *pWebServer)
{
 80a1170:	b570      	push	{r4, r5, r6, lr}
  // Handle different states
  switch (_webClientState)
 80a1172:	7f03      	ldrb	r3, [r0, #28]


//////////////////////////////////
// Handle the client state machine
void RdWebClient::service(RdWebServer *pWebServer)
{
 80a1174:	b08e      	sub	sp, #56	; 0x38
 80a1176:	4604      	mov	r4, r0
 80a1178:	460d      	mov	r5, r1
  // Handle different states
  switch (_webClientState)
 80a117a:	2b03      	cmp	r3, #3
 80a117c:	f200 813c 	bhi.w	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
 80a1180:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a1184:	00470004 	.word	0x00470004
 80a1188:	00ee00dd 	.word	0x00ee00dd
  {
    case WEB_CLIENT_NONE:
    {
      // See if a connection is ready to be accepted
      _TCPClient = pWebServer->available();
 80a118c:	a807      	add	r0, sp, #28
 80a118e:	f7ff ffe1 	bl	80a1154 <_ZN11RdWebServer9availableEv>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80a1192:	9b08      	ldr	r3, [sp, #32]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1194:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80a1196:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a1198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a119a:	60a3      	str	r3, [r4, #8]
 80a119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a119e:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a11a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a11a2:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a11a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a11a6:	6163      	str	r3, [r4, #20]

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80a11a8:	69a3      	ldr	r3, [r4, #24]
 80a11aa:	429d      	cmp	r5, r3
 80a11ac:	d00c      	beq.n	80a11c8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x58>
	  {
	    if (__tmp != 0)
 80a11ae:	b115      	cbz	r5, 80a11b6 <_ZN11RdWebClient7serviceEP11RdWebServer+0x46>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a11b0:	686b      	ldr	r3, [r5, #4]
 80a11b2:	3301      	adds	r3, #1
 80a11b4:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a11b6:	69a0      	ldr	r0, [r4, #24]
 80a11b8:	b128      	cbz	r0, 80a11c6 <_ZN11RdWebClient7serviceEP11RdWebServer+0x56>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a11ba:	6843      	ldr	r3, [r0, #4]
 80a11bc:	3b01      	subs	r3, #1
 80a11be:	6043      	str	r3, [r0, #4]
 80a11c0:	b90b      	cbnz	r3, 80a11c6 <_ZN11RdWebClient7serviceEP11RdWebServer+0x56>
 80a11c2:	f7ff f86b 	bl	80a029c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.11>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a11c6:	61a5      	str	r5, [r4, #24]
 80a11c8:	a807      	add	r0, sp, #28
 80a11ca:	f7ff f877 	bl	80a02bc <_ZN9TCPClientD1Ev>
      if (_TCPClient)
 80a11ce:	4620      	mov	r0, r4
 80a11d0:	f000 fd8c 	bl	80a1cec <_ZN9TCPClientcvbEv>
 80a11d4:	2800      	cmp	r0, #0
 80a11d6:	f000 810f 	beq.w	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
      {
        // Now connected
        _keepAlive = false;
 80a11da:	2300      	movs	r3, #0
 80a11dc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        cleanupTCPRxResources();
 80a11e0:	4620      	mov	r0, r4
 80a11e2:	f7ff fc33 	bl	80a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>
        setState(WEB_CLIENT_ACCEPTED);
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	2101      	movs	r1, #1
 80a11ea:	f7ff fc13 	bl	80a0a14 <_ZN11RdWebClient8setStateENS_14WebClientStateE>
        // Info
        IPAddress ip    = _TCPClient.remoteIP();
 80a11ee:	4621      	mov	r1, r4
 80a11f0:	a807      	add	r0, sp, #28
 80a11f2:	f000 fbe3 	bl	80a19bc <_ZN9TCPClient8remoteIPEv>
        String    ipStr = ip;
 80a11f6:	a907      	add	r1, sp, #28
 80a11f8:	a803      	add	r0, sp, #12
 80a11fa:	f000 ffbb 	bl	80a2174 <_ZN6StringC1ERK9Printable>
        Log.trace("WebClient#%d IP %s", _clientIdx, ipStr.c_str());
 80a11fe:	9b03      	ldr	r3, [sp, #12]
 80a1200:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a1202:	497e      	ldr	r1, [pc, #504]	; (80a13fc <_ZN11RdWebClient7serviceEP11RdWebServer+0x28c>)
 80a1204:	487e      	ldr	r0, [pc, #504]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a1206:	f7ff f873 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        _keepAlive = false;
        cleanupTCPRxResources();
        setState(WEB_CLIENT_ACCEPTED);
        // Info
        IPAddress ip    = _TCPClient.remoteIP();
        String    ipStr = ip;
 80a120a:	a803      	add	r0, sp, #12
 80a120c:	f000 fe14 	bl	80a1e38 <_ZN6StringD1Ev>
 80a1210:	e0f2      	b.n	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
      break;
    }
    case WEB_CLIENT_ACCEPTED:
    {
      // Check if client is still connected
      if (!_TCPClient.connected())
 80a1212:	f000 fd42 	bl	80a1c9a <_ZN9TCPClient9connectedEv>
 80a1216:	4606      	mov	r6, r0
 80a1218:	b960      	cbnz	r0, 80a1234 <_ZN11RdWebClient7serviceEP11RdWebServer+0xc4>
      {
        Log.trace("WebClient#%d disconnected", _clientIdx);
 80a121a:	497a      	ldr	r1, [pc, #488]	; (80a1404 <_ZN11RdWebClient7serviceEP11RdWebServer+0x294>)
 80a121c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a121e:	4878      	ldr	r0, [pc, #480]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a1220:	f7ff f866 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        _TCPClient.stop();
 80a1224:	4620      	mov	r0, r4
 80a1226:	f000 fc77 	bl	80a1b18 <_ZN9TCPClient4stopEv>
        cleanupTCPRxResources();
 80a122a:	4620      	mov	r0, r4
 80a122c:	f7ff fc0e 	bl	80a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>
        setState(WEB_CLIENT_NONE);
 80a1230:	4631      	mov	r1, r6
 80a1232:	e0de      	b.n	80a13f2 <_ZN11RdWebClient7serviceEP11RdWebServer+0x282>
        break;
      }
      // Check for having been in this state for too long
      if (_keepAlive)
 80a1234:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80a1238:	b1b3      	cbz	r3, 80a1268 <_ZN11RdWebClient7serviceEP11RdWebServer+0xf8>
 80a123a:	f000 f953 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
      {
        if (RdWebServerUtils::isTimeout(millis(), _webClientStateEntryMs, MAX_MS_TO_KEEP_ALIVE))
 80a123e:	6a23      	ldr	r3, [r4, #32]
class RdWebServerUtils
{
public:
    static bool isTimeout(unsigned long curTime, unsigned long lastTime, unsigned long maxDuration)
    {
        if (curTime >= lastTime)
 80a1240:	4283      	cmp	r3, r0
 80a1242:	d807      	bhi.n	80a1254 <_ZN11RdWebClient7serviceEP11RdWebServer+0xe4>
        {
            return (curTime > lastTime + maxDuration);
 80a1244:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80a1248:	3310      	adds	r3, #16
 80a124a:	4298      	cmp	r0, r3
 80a124c:	bf94      	ite	ls
 80a124e:	2300      	movls	r3, #0
 80a1250:	2301      	movhi	r3, #1
 80a1252:	e005      	b.n	80a1260 <_ZN11RdWebClient7serviceEP11RdWebServer+0xf0>
        }
        return (ULONG_MAX - (lastTime-curTime) > maxDuration);
 80a1254:	1a1b      	subs	r3, r3, r0
 80a1256:	486c      	ldr	r0, [pc, #432]	; (80a1408 <_ZN11RdWebClient7serviceEP11RdWebServer+0x298>)
 80a1258:	4283      	cmp	r3, r0
 80a125a:	bf8c      	ite	hi
 80a125c:	2300      	movhi	r3, #0
 80a125e:	2301      	movls	r3, #1
 80a1260:	b323      	cbz	r3, 80a12ac <_ZN11RdWebClient7serviceEP11RdWebServer+0x13c>
        {
          Log.trace("WebClient#%d keep-alive timeout", _clientIdx);
 80a1262:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a1264:	4969      	ldr	r1, [pc, #420]	; (80a140c <_ZN11RdWebClient7serviceEP11RdWebServer+0x29c>)
 80a1266:	e014      	b.n	80a1292 <_ZN11RdWebClient7serviceEP11RdWebServer+0x122>
 80a1268:	f000 f93c 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
          setState(WEB_CLIENT_NONE);
        }
      }
      else
      {
        if (RdWebServerUtils::isTimeout(millis(), _webClientStateEntryMs, MAX_MS_IN_CLIENT_STATE_WITHOUT_DATA))
 80a126c:	6a23      	ldr	r3, [r4, #32]
class RdWebServerUtils
{
public:
    static bool isTimeout(unsigned long curTime, unsigned long lastTime, unsigned long maxDuration)
    {
        if (curTime >= lastTime)
 80a126e:	4298      	cmp	r0, r3
 80a1270:	d306      	bcc.n	80a1280 <_ZN11RdWebClient7serviceEP11RdWebServer+0x110>
        {
            return (curTime > lastTime + maxDuration);
 80a1272:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80a1276:	4290      	cmp	r0, r2
 80a1278:	bf94      	ite	ls
 80a127a:	2300      	movls	r3, #0
 80a127c:	2301      	movhi	r3, #1
 80a127e:	e005      	b.n	80a128c <_ZN11RdWebClient7serviceEP11RdWebServer+0x11c>
        }
        return (ULONG_MAX - (lastTime-curTime) > maxDuration);
 80a1280:	1a1b      	subs	r3, r3, r0
 80a1282:	4863      	ldr	r0, [pc, #396]	; (80a1410 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2a0>)
 80a1284:	4283      	cmp	r3, r0
 80a1286:	bf8c      	ite	hi
 80a1288:	2300      	movhi	r3, #0
 80a128a:	2301      	movls	r3, #1
 80a128c:	b173      	cbz	r3, 80a12ac <_ZN11RdWebClient7serviceEP11RdWebServer+0x13c>
        {
          Log.trace("WebClient#%d no-data timeout", _clientIdx);
 80a128e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a1290:	4960      	ldr	r1, [pc, #384]	; (80a1414 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2a4>)
 80a1292:	485b      	ldr	r0, [pc, #364]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a1294:	f7ff f82c 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
          _TCPClient.stop();
 80a1298:	4620      	mov	r0, r4
 80a129a:	f000 fc3d 	bl	80a1b18 <_ZN9TCPClient4stopEv>
          cleanupTCPRxResources();
 80a129e:	4620      	mov	r0, r4
 80a12a0:	f7ff fbd4 	bl	80a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>
          setState(WEB_CLIENT_NONE);
 80a12a4:	2100      	movs	r1, #0
 80a12a6:	4620      	mov	r0, r4
 80a12a8:	f7ff fbb4 	bl	80a0a14 <_ZN11RdWebClient8setStateENS_14WebClientStateE>
        }
      }
      // Anything available?
      int numBytesAvailable = _TCPClient.available();
 80a12ac:	4620      	mov	r0, r4
 80a12ae:	f000 fbf7 	bl	80a1aa0 <_ZN9TCPClient9availableEv>
      int numToRead         = numBytesAvailable;
      if (numToRead > 0)
 80a12b2:	2800      	cmp	r0, #0
 80a12b4:	f340 80a0 	ble.w	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
 80a12b8:	4601      	mov	r1, r0
 80a12ba:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80a12be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a12c0:	bfa8      	it	ge
 80a12c2:	f44f 71fa 	movge.w	r1, #500	; 0x1f4
      {
        // Make sure we don't overflow buffers
        if (numToRead > MAX_CHS_IN_SERVICE_LOOP)
          numToRead = MAX_CHS_IN_SERVICE_LOOP;
        if (_httpReqStr.length() + numToRead > HTTPD_MAX_REQ_LENGTH)
 80a12c6:	18ca      	adds	r2, r1, r3
 80a12c8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80a12cc:	d904      	bls.n	80a12d8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x168>
          numToRead = HTTPD_MAX_REQ_LENGTH - _httpReqStr.length();
 80a12ce:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
      }

      // Check if we want to read
      if (numToRead <= 0)
 80a12d2:	2900      	cmp	r1, #0
 80a12d4:	f340 8090 	ble.w	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
        return;

      // Handle read from TCP client
      handleTCPReadData(numToRead);
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fc27 	bl	80a0b2c <_ZN11RdWebClient17handleTCPReadDataEi>

      // Check for completion
      if (_httpHeaderComplete && (_httpReqPayloadLen == _curHttpPayloadRxPos))
 80a12de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a12e2:	b343      	cbz	r3, 80a1336 <_ZN11RdWebClient7serviceEP11RdWebServer+0x1c6>
 80a12e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a12e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a12e8:	429a      	cmp	r2, r3
 80a12ea:	d124      	bne.n	80a1336 <_ZN11RdWebClient7serviceEP11RdWebServer+0x1c6>
      {
        Log.trace("WebClient#%d received %d", _clientIdx, _httpReqStr.length());
 80a12ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a12ee:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a12f0:	4949      	ldr	r1, [pc, #292]	; (80a1418 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2a8>)
 80a12f2:	4843      	ldr	r0, [pc, #268]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a12f4:	f7fe fffc 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        bool handledOk = false;
 80a12f8:	2600      	movs	r6, #0
 80a12fa:	a90e      	add	r1, sp, #56	; 0x38
 80a12fc:	f801 6d1c 	strb.w	r6, [r1, #-28]!
        _pResourceToSend = handleReceivedHttp(handledOk, pWebServer);
 80a1300:	462a      	mov	r2, r5
 80a1302:	4620      	mov	r0, r4
 80a1304:	f7ff fd26 	bl	80a0d54 <_ZN11RdWebClient18handleReceivedHttpERbP11RdWebServer>
 80a1308:	6560      	str	r0, [r4, #84]	; 0x54
        // clean the received resources
        cleanupTCPRxResources();
 80a130a:	4620      	mov	r0, r4
 80a130c:	f7ff fb9e 	bl	80a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>
        // Get ready to send the response (in sections as needed)
        _resourceSendIdx      = 0;
 80a1310:	65a6      	str	r6, [r4, #88]	; 0x58
        _resourceSendBlkCount = 0;
 80a1312:	65e6      	str	r6, [r4, #92]	; 0x5c
 80a1314:	f000 f8e6 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
        _resourceSendMillis   = millis();
        // Wait until response complete
        setState(WEB_CLIENT_SEND_RESOURCE_WAIT);
 80a1318:	2102      	movs	r1, #2
        // clean the received resources
        cleanupTCPRxResources();
        // Get ready to send the response (in sections as needed)
        _resourceSendIdx      = 0;
        _resourceSendBlkCount = 0;
        _resourceSendMillis   = millis();
 80a131a:	6620      	str	r0, [r4, #96]	; 0x60
        // Wait until response complete
        setState(WEB_CLIENT_SEND_RESOURCE_WAIT);
 80a131c:	4620      	mov	r0, r4
 80a131e:	f7ff fb79 	bl	80a0a14 <_ZN11RdWebClient8setStateENS_14WebClientStateE>
        if (!handledOk)
 80a1322:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1326:	2b00      	cmp	r3, #0
 80a1328:	d166      	bne.n	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
        {
          Log.trace("WebClient#%d couldn't handle request", _clientIdx);
 80a132a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a132c:	493b      	ldr	r1, [pc, #236]	; (80a141c <_ZN11RdWebClient7serviceEP11RdWebServer+0x2ac>)
 80a132e:	4834      	ldr	r0, [pc, #208]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a1330:	f7fe ffde 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
        }
 80a1334:	e060      	b.n	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
 80a1336:	f000 f8d5 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
      }
      else
      {
        // Restart state timer to ensure timeout only happens when there is no data
        _webClientStateEntryMs = millis();
 80a133a:	6220      	str	r0, [r4, #32]
 80a133c:	e05c      	b.n	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
 80a133e:	f000 f8d1 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
      {
        msToWait = MS_WAIT_BETWEEN_TCP_FRAMES;
      }

      // Check for timeout on resource send
      if (RdWebServerUtils::isTimeout(millis(), _resourceSendMillis, msToWait))
 80a1342:	6e23      	ldr	r3, [r4, #96]	; 0x60
class RdWebServerUtils
{
public:
    static bool isTimeout(unsigned long curTime, unsigned long lastTime, unsigned long maxDuration)
    {
        if (curTime >= lastTime)
 80a1344:	4298      	cmp	r0, r3
 80a1346:	d303      	bcc.n	80a1350 <_ZN11RdWebClient7serviceEP11RdWebServer+0x1e0>
        {
            return (curTime > lastTime + maxDuration);
 80a1348:	bf8c      	ite	hi
 80a134a:	2001      	movhi	r0, #1
 80a134c:	2000      	movls	r0, #0
 80a134e:	e003      	b.n	80a1358 <_ZN11RdWebClient7serviceEP11RdWebServer+0x1e8>
        }
        return (ULONG_MAX - (lastTime-curTime) > maxDuration);
 80a1350:	1a18      	subs	r0, r3, r0
 80a1352:	3001      	adds	r0, #1
 80a1354:	bf18      	it	ne
 80a1356:	2001      	movne	r0, #1
 80a1358:	2800      	cmp	r0, #0
 80a135a:	d04d      	beq.n	80a13f8 <_ZN11RdWebClient7serviceEP11RdWebServer+0x288>
      {
        setState(WEB_CLIENT_SEND_RESOURCE);
 80a135c:	2103      	movs	r1, #3
 80a135e:	e048      	b.n	80a13f2 <_ZN11RdWebClient7serviceEP11RdWebServer+0x282>

    case WEB_CLIENT_SEND_RESOURCE:
    {
      // Handle nothing to send situation
      bool responseComplete = false;
      if (!_pResourceToSend)
 80a1360:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80a1362:	b933      	cbnz	r3, 80a1372 <_ZN11RdWebClient7serviceEP11RdWebServer+0x202>
      {
        responseComplete = true;
        Log.trace("WebClient#%d resp complete", _clientIdx);
 80a1364:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80a1366:	492e      	ldr	r1, [pc, #184]	; (80a1420 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2b0>)
 80a1368:	4825      	ldr	r0, [pc, #148]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a136a:	f7fe ffc1 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
    {
      // Handle nothing to send situation
      bool responseComplete = false;
      if (!_pResourceToSend)
      {
        responseComplete = true;
 80a136e:	2001      	movs	r0, #1
 80a1370:	e000      	b.n	80a1374 <_ZN11RdWebClient7serviceEP11RdWebServer+0x204>
    }

    case WEB_CLIENT_SEND_RESOURCE:
    {
      // Handle nothing to send situation
      bool responseComplete = false;
 80a1372:	2000      	movs	r0, #0
        responseComplete = true;
        Log.trace("WebClient#%d resp complete", _clientIdx);
      }

      // Check if last part of resource has been sent
      if (_resourceSendIdx >= _pResourceToSend->_dataLen)
 80a1374:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a1376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80a1378:	690a      	ldr	r2, [r1, #16]
 80a137a:	4293      	cmp	r3, r2
 80a137c:	db09      	blt.n	80a1392 <_ZN11RdWebClient7serviceEP11RdWebServer+0x222>
      {
        responseComplete = true;
        Log.trace("WebClient#%d Sent %s, %d bytes total, %d blocks", _clientIdx,
                  _pResourceToSend->_pResId, _pResourceToSend->_dataLen, _resourceSendBlkCount);
 80a137e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80a1380:	481f      	ldr	r0, [pc, #124]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a1382:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a1386:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80a1388:	680b      	ldr	r3, [r1, #0]
 80a138a:	4926      	ldr	r1, [pc, #152]	; (80a1424 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2b4>)
 80a138c:	f7fe ffb0 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
 80a1390:	e000      	b.n	80a1394 <_ZN11RdWebClient7serviceEP11RdWebServer+0x224>
      }

      // Check if response is complete
      if (responseComplete)
 80a1392:	b1a8      	cbz	r0, 80a13c0 <_ZN11RdWebClient7serviceEP11RdWebServer+0x250>
      {
        // Handle Connection: keep-alive if requested
        if (_keepAlive)
 80a1394:	f894 5064 	ldrb.w	r5, [r4, #100]	; 0x64
        {
          Log.trace("WebClient#%d keep-alive requested", _clientIdx);
 80a1398:	6ea2      	ldr	r2, [r4, #104]	; 0x68

      // Check if response is complete
      if (responseComplete)
      {
        // Handle Connection: keep-alive if requested
        if (_keepAlive)
 80a139a:	b145      	cbz	r5, 80a13ae <_ZN11RdWebClient7serviceEP11RdWebServer+0x23e>
        {
          Log.trace("WebClient#%d keep-alive requested", _clientIdx);
 80a139c:	4922      	ldr	r1, [pc, #136]	; (80a1428 <_ZN11RdWebClient7serviceEP11RdWebServer+0x2b8>)
 80a139e:	4818      	ldr	r0, [pc, #96]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a13a0:	f7fe ffa6 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
          cleanupTCPRxResources();
 80a13a4:	4620      	mov	r0, r4
 80a13a6:	f7ff fb51 	bl	80a0a4c <_ZN11RdWebClient21cleanupTCPRxResourcesEv>
          setState(WEB_CLIENT_ACCEPTED);
 80a13aa:	2101      	movs	r1, #1
 80a13ac:	e021      	b.n	80a13f2 <_ZN11RdWebClient7serviceEP11RdWebServer+0x282>
        }
        else
        {
          // Close connection and finish
          Log.trace("WebClient#%d closing connection", _clientIdx);
 80a13ae:	491f      	ldr	r1, [pc, #124]	; (80a142c <_ZN11RdWebClient7serviceEP11RdWebServer+0x2bc>)
 80a13b0:	4813      	ldr	r0, [pc, #76]	; (80a1400 <_ZN11RdWebClient7serviceEP11RdWebServer+0x290>)
 80a13b2:	f7fe ff9d 	bl	80a02f0 <_ZNK5spark6Logger5traceEPKcz>
          _TCPClient.stop();
 80a13b6:	4620      	mov	r0, r4
 80a13b8:	f000 fbae 	bl	80a1b18 <_ZN9TCPClient4stopEv>
          setState(WEB_CLIENT_NONE);
 80a13bc:	4629      	mov	r1, r5
 80a13be:	e018      	b.n	80a13f2 <_ZN11RdWebClient7serviceEP11RdWebServer+0x282>
      }

      // Send data in chunks based on limited buffer sizes in TCP stack
      // Get point and length of next chunk
      const unsigned char *pMem       = _pResourceToSend->_pData + _resourceSendIdx;
      int                 toSendBytes = _pResourceToSend->_dataLen - _resourceSendIdx;
 80a13c0:	1ad5      	subs	r5, r2, r3
 80a13c2:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0

      // Send next chunk
//    Log.trace("WebClient#%d Writing %d bytes (%d) = %02x %02x %02x %02x ... %02x %02x %02x", _clientIdx, toSendBytes, _resourceSendIdx,
//             pMem[0], pMem[1], pMem[2], pMem[3], pMem[toSendBytes - 3], pMem[toSendBytes - 2], pMem[toSendBytes - 1]);

      _TCPClient.write(pMem, toSendBytes);
 80a13c6:	68c9      	ldr	r1, [r1, #12]
 80a13c8:	bfa8      	it	ge
 80a13ca:	f44f 657a 	movge.w	r5, #4000	; 0xfa0
 80a13ce:	4419      	add	r1, r3
 80a13d0:	462a      	mov	r2, r5
 80a13d2:	4620      	mov	r0, r4
 80a13d4:	f000 fac1 	bl	80a195a <_ZN9TCPClient5writeEPKhj>
      _TCPClient.flush();
 80a13d8:	4620      	mov	r0, r4
 80a13da:	f000 fad2 	bl	80a1982 <_ZN9TCPClient5flushEv>
      _resourceSendIdx += toSendBytes;
 80a13de:	6da2      	ldr	r2, [r4, #88]	; 0x58
      _resourceSendBlkCount++;
 80a13e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
//    Log.trace("WebClient#%d Writing %d bytes (%d) = %02x %02x %02x %02x ... %02x %02x %02x", _clientIdx, toSendBytes, _resourceSendIdx,
//             pMem[0], pMem[1], pMem[2], pMem[3], pMem[toSendBytes - 3], pMem[toSendBytes - 2], pMem[toSendBytes - 1]);

      _TCPClient.write(pMem, toSendBytes);
      _TCPClient.flush();
      _resourceSendIdx += toSendBytes;
 80a13e2:	4415      	add	r5, r2
      _resourceSendBlkCount++;
 80a13e4:	3301      	adds	r3, #1
//    Log.trace("WebClient#%d Writing %d bytes (%d) = %02x %02x %02x %02x ... %02x %02x %02x", _clientIdx, toSendBytes, _resourceSendIdx,
//             pMem[0], pMem[1], pMem[2], pMem[3], pMem[toSendBytes - 3], pMem[toSendBytes - 2], pMem[toSendBytes - 1]);

      _TCPClient.write(pMem, toSendBytes);
      _TCPClient.flush();
      _resourceSendIdx += toSendBytes;
 80a13e6:	65a5      	str	r5, [r4, #88]	; 0x58
      _resourceSendBlkCount++;
 80a13e8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80a13ea:	f000 f87b 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
      _resourceSendMillis = millis();
      setState(WEB_CLIENT_SEND_RESOURCE_WAIT);
 80a13ee:	2102      	movs	r1, #2

      _TCPClient.write(pMem, toSendBytes);
      _TCPClient.flush();
      _resourceSendIdx += toSendBytes;
      _resourceSendBlkCount++;
      _resourceSendMillis = millis();
 80a13f0:	6620      	str	r0, [r4, #96]	; 0x60
      setState(WEB_CLIENT_SEND_RESOURCE_WAIT);
 80a13f2:	4620      	mov	r0, r4
 80a13f4:	f7ff fb0e 	bl	80a0a14 <_ZN11RdWebClient8setStateENS_14WebClientStateE>
      break;
    }
  }
}
 80a13f8:	b00e      	add	sp, #56	; 0x38
 80a13fa:	bd70      	pop	{r4, r5, r6, pc}
 80a13fc:	080a3d28 	.word	0x080a3d28
 80a1400:	20000150 	.word	0x20000150
 80a1404:	080a3d3b 	.word	0x080a3d3b
 80a1408:	ffffd8ee 	.word	0xffffd8ee
 80a140c:	080a3d55 	.word	0x080a3d55
 80a1410:	fffff82e 	.word	0xfffff82e
 80a1414:	080a3d75 	.word	0x080a3d75
 80a1418:	080a3d92 	.word	0x080a3d92
 80a141c:	080a3dab 	.word	0x080a3dab
 80a1420:	080a3dd0 	.word	0x080a3dd0
 80a1424:	080a3deb 	.word	0x080a3deb
 80a1428:	080a3e1b 	.word	0x080a3e1b
 80a142c:	080a3e3d 	.word	0x080a3e3d

080a1430 <_ZN11RdWebServer7serviceEv>:


//////////////////////////////////////
// Handle the connection state machine
void RdWebServer::service()
{
 80a1430:	b570      	push	{r4, r5, r6, lr}
  // Handle different states
  switch (_webServerState)
 80a1432:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150


//////////////////////////////////////
// Handle the connection state machine
void RdWebServer::service()
{
 80a1436:	4604      	mov	r4, r0
  // Handle different states
  switch (_webServerState)
 80a1438:	2b01      	cmp	r3, #1
 80a143a:	d002      	beq.n	80a1442 <_ZN11RdWebServer7serviceEv+0x12>
 80a143c:	2b02      	cmp	r3, #2
 80a143e:	d01b      	beq.n	80a1478 <_ZN11RdWebServer7serviceEv+0x48>
 80a1440:	bd70      	pop	{r4, r5, r6, pc}
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1442:	4b16      	ldr	r3, [pc, #88]	; (80a149c <_ZN11RdWebServer7serviceEv+0x6c>)
 80a1444:	2200      	movs	r2, #0
 80a1446:	4611      	mov	r1, r2
 80a1448:	6858      	ldr	r0, [r3, #4]
 80a144a:	f000 f9af 	bl	80a17ac <network_ready>
      break;
    }

    case WEB_SERVER_WAIT_CONN:
    {
      if (WiFi.ready())
 80a144e:	b320      	cbz	r0, 80a149a <_ZN11RdWebServer7serviceEv+0x6a>
      {
        restart(_TCPPort);
 80a1450:	6861      	ldr	r1, [r4, #4]
 80a1452:	4620      	mov	r0, r4
 80a1454:	f7ff fe5c 	bl	80a1110 <_ZN11RdWebServer7restartEi>
        if (_pTCPServer)
 80a1458:	68a3      	ldr	r3, [r4, #8]
 80a145a:	b1f3      	cbz	r3, 80a149a <_ZN11RdWebServer7serviceEv+0x6a>
        {
          Log.info("WebServer TCPServer Begin");
 80a145c:	4910      	ldr	r1, [pc, #64]	; (80a14a0 <_ZN11RdWebServer7serviceEv+0x70>)
 80a145e:	4811      	ldr	r0, [pc, #68]	; (80a14a4 <_ZN11RdWebServer7serviceEv+0x74>)
 80a1460:	f7fe ff5d 	bl	80a031e <_ZNK5spark6Logger4infoEPKcz>
          _pTCPServer->begin();
 80a1464:	68a0      	ldr	r0, [r4, #8]
 80a1466:	6803      	ldr	r3, [r0, #0]
 80a1468:	691b      	ldr	r3, [r3, #16]
 80a146a:	4798      	blx	r3
          setState(WEB_SERVER_BEGUN);
 80a146c:	4620      	mov	r0, r4
          _webServerActiveLastUnixTime = Time.now();
      }
      break;
    }
  }
}
 80a146e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        restart(_TCPPort);
        if (_pTCPServer)
        {
          Log.info("WebServer TCPServer Begin");
          _pTCPServer->begin();
          setState(WEB_SERVER_BEGUN);
 80a1472:	2102      	movs	r1, #2
 80a1474:	f7ff be06 	b.w	80a1084 <_ZN11RdWebServer8setStateENS_14WebServerStateE>
 80a1478:	f100 050c 	add.w	r5, r0, #12
 80a147c:	f500 76a8 	add.w	r6, r0, #336	; 0x150
    case WEB_SERVER_BEGUN:
    {
      // Service the clients
      for (int clientIdx = 0; clientIdx < MAX_WEB_CLIENTS; clientIdx++)
      {
        _webClients[clientIdx].service(this);
 80a1480:	4621      	mov	r1, r4
 80a1482:	4628      	mov	r0, r5
 80a1484:	f7ff fe74 	bl	80a1170 <_ZN11RdWebClient7serviceEP11RdWebServer>
        if (_webClients[clientIdx].clientIsActive())
 80a1488:	7f2b      	ldrb	r3, [r5, #28]
 80a148a:	b11b      	cbz	r3, 80a1494 <_ZN11RdWebServer7serviceEv+0x64>
          _webServerActiveLastUnixTime = Time.now();
 80a148c:	f000 ff56 	bl	80a233c <_ZN9TimeClass3nowEv>
 80a1490:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 80a1494:	356c      	adds	r5, #108	; 0x6c
    }

    case WEB_SERVER_BEGUN:
    {
      // Service the clients
      for (int clientIdx = 0; clientIdx < MAX_WEB_CLIENTS; clientIdx++)
 80a1496:	42b5      	cmp	r5, r6
 80a1498:	d1f2      	bne.n	80a1480 <_ZN11RdWebServer7serviceEv+0x50>
 80a149a:	bd70      	pop	{r4, r5, r6, pc}
 80a149c:	200005d0 	.word	0x200005d0
 80a14a0:	080a3e5d 	.word	0x080a3e5d
 80a14a4:	20000150 	.word	0x20000150

080a14a8 <_ZN11RdWebServer19addRestAPIEndpointsEP16RestAPIEndpoints>:


// Add endpoints to the web server
void RdWebServer::addRestAPIEndpoints(RestAPIEndpoints *pRestAPIEndpoints)
{
  _pRestAPIEndpoints = pRestAPIEndpoints;
 80a14a8:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 80a14ac:	4770      	bx	lr

080a14ae <_GLOBAL__sub_I__ZN11RdWebClientC2Ev>:
 80a14ae:	f000 b801 	b.w	80a14b4 <HAL_Pin_Map>
	...

080a14b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <HAL_Pin_Map+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	681b      	ldr	r3, [r3, #0]
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601b0 	.word	0x080601b0

080a14c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	685b      	ldr	r3, [r3, #4]
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	0806019c 	.word	0x0806019c

080a14d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <HAL_Delay_Microseconds+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	68db      	ldr	r3, [r3, #12]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	0806019c 	.word	0x0806019c

080a14e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	695b      	ldr	r3, [r3, #20]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	0806019c 	.word	0x0806019c

080a14f4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <HAL_RTC_Get_UnixTime+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	69db      	ldr	r3, [r3, #28]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	0806019c 	.word	0x0806019c

080a1504 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	0806019c 	.word	0x0806019c

080a1514 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <os_thread_scheduling+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	69db      	ldr	r3, [r3, #28]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601d0 	.word	0x080601d0

080a1524 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <HAL_USART_Init+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	699b      	ldr	r3, [r3, #24]
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601c4 	.word	0x080601c4

080a1534 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <HAL_USART_Write_Data+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601c4 	.word	0x080601c4

080a1544 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <HAL_USART_Available_Data+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601c4 	.word	0x080601c4

080a1554 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <HAL_USART_Read_Data+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601c4 	.word	0x080601c4

080a1564 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <HAL_USART_Peek_Data+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601c4 	.word	0x080601c4

080a1574 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <HAL_USART_Flush_Data+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	080601c4 	.word	0x080601c4

080a1584 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601c4 	.word	0x080601c4

080a1594 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <socket_active_status+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	681b      	ldr	r3, [r3, #0]
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601bc 	.word	0x080601bc

080a15a4 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <socket_handle_valid+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	685b      	ldr	r3, [r3, #4]
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601bc 	.word	0x080601bc

080a15b4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b02      	ldr	r3, [pc, #8]	; (80a15c0 <socket_create+0xc>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	689b      	ldr	r3, [r3, #8]
 80a15bc:	9301      	str	r3, [sp, #4]
 80a15be:	bd08      	pop	{r3, pc}
 80a15c0:	080601bc 	.word	0x080601bc

080a15c4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a15c4:	b508      	push	{r3, lr}
 80a15c6:	4b02      	ldr	r3, [pc, #8]	; (80a15d0 <socket_connect+0xc>)
 80a15c8:	681b      	ldr	r3, [r3, #0]
 80a15ca:	68db      	ldr	r3, [r3, #12]
 80a15cc:	9301      	str	r3, [sp, #4]
 80a15ce:	bd08      	pop	{r3, pc}
 80a15d0:	080601bc 	.word	0x080601bc

080a15d4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a15d4:	b508      	push	{r3, lr}
 80a15d6:	4b02      	ldr	r3, [pc, #8]	; (80a15e0 <socket_receive+0xc>)
 80a15d8:	681b      	ldr	r3, [r3, #0]
 80a15da:	691b      	ldr	r3, [r3, #16]
 80a15dc:	9301      	str	r3, [sp, #4]
 80a15de:	bd08      	pop	{r3, pc}
 80a15e0:	080601bc 	.word	0x080601bc

080a15e4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a15e4:	b508      	push	{r3, lr}
 80a15e6:	4b02      	ldr	r3, [pc, #8]	; (80a15f0 <socket_close+0xc>)
 80a15e8:	681b      	ldr	r3, [r3, #0]
 80a15ea:	6a1b      	ldr	r3, [r3, #32]
 80a15ec:	9301      	str	r3, [sp, #4]
 80a15ee:	bd08      	pop	{r3, pc}
 80a15f0:	080601bc 	.word	0x080601bc

080a15f4 <socket_create_tcp_server>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
 80a15f4:	b508      	push	{r3, lr}
 80a15f6:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <socket_create_tcp_server+0xc>)
 80a15f8:	681b      	ldr	r3, [r3, #0]
 80a15fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a15fc:	9301      	str	r3, [sp, #4]
 80a15fe:	bd08      	pop	{r3, pc}
 80a1600:	080601bc 	.word	0x080601bc

080a1604 <socket_accept>:
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <socket_accept+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601bc 	.word	0x080601bc

080a1614 <socket_handle_invalid>:
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <socket_handle_invalid+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601bc 	.word	0x080601bc

080a1624 <socket_peer>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <socket_peer+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601bc 	.word	0x080601bc

080a1634 <socket_send_ex>:
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <socket_send_ex+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601bc 	.word	0x080601bc

080a1644 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_USB_USART_Init+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	681b      	ldr	r3, [r3, #0]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	080601d8 	.word	0x080601d8

080a1654 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_USB_USART_Available_Data+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	691b      	ldr	r3, [r3, #16]
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	080601d8 	.word	0x080601d8

080a1664 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	695b      	ldr	r3, [r3, #20]
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	080601d8 	.word	0x080601d8

080a1674 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <HAL_USB_USART_Receive_Data+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	699b      	ldr	r3, [r3, #24]
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080601d8 	.word	0x080601d8

080a1684 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_USB_USART_Send_Data+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	69db      	ldr	r3, [r3, #28]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601d8 	.word	0x080601d8

080a1694 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <HAL_USB_USART_Flush_Data+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	6a1b      	ldr	r3, [r3, #32]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	080601d8 	.word	0x080601d8

080a16a4 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <HAL_NET_SetNetWatchDog+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601c0 	.word	0x080601c0

080a16b4 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <inet_gethostbyname+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601c0 	.word	0x080601c0

080a16c4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <panic_+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080201a8 	.word	0x080201a8

080a16d4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <log_message+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080201a8 	.word	0x080201a8

080a16e4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <log_message_v+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080201a8 	.word	0x080201a8

080a16f4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <system_mode+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	681b      	ldr	r3, [r3, #0]
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601a4 	.word	0x080601a4

080a1704 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <set_system_mode+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	685b      	ldr	r3, [r3, #4]
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601a4 	.word	0x080601a4

080a1714 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <application_thread_current+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601a4 	.word	0x080601a4

080a1724 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <application_thread_invoke+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601a4 	.word	0x080601a4

080a1734 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <system_thread_get_state+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601a4 	.word	0x080601a4

080a1744 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b03      	ldr	r3, [pc, #12]	; (80a1754 <system_ctrl_set_app_request_handler+0x10>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a174e:	9301      	str	r3, [sp, #4]
 80a1750:	bd08      	pop	{r3, pc}
 80a1752:	0000      	.short	0x0000
 80a1754:	080601a4 	.word	0x080601a4

080a1758 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1758:	b508      	push	{r3, lr}
 80a175a:	4b03      	ldr	r3, [pc, #12]	; (80a1768 <system_ctrl_set_result+0x10>)
 80a175c:	681b      	ldr	r3, [r3, #0]
 80a175e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1762:	9301      	str	r3, [sp, #4]
 80a1764:	bd08      	pop	{r3, pc}
 80a1766:	0000      	.short	0x0000
 80a1768:	080601a4 	.word	0x080601a4

080a176c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <network_config+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	681b      	ldr	r3, [r3, #0]
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601c8 	.word	0x080601c8

080a177c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <network_connect+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	685b      	ldr	r3, [r3, #4]
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601c8 	.word	0x080601c8

080a178c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <network_connecting+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	689b      	ldr	r3, [r3, #8]
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601c8 	.word	0x080601c8

080a179c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <network_disconnect+0xc>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	68db      	ldr	r3, [r3, #12]
 80a17a4:	9301      	str	r3, [sp, #4]
 80a17a6:	bd08      	pop	{r3, pc}
 80a17a8:	080601c8 	.word	0x080601c8

080a17ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <network_ready+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	691b      	ldr	r3, [r3, #16]
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601c8 	.word	0x080601c8

080a17bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17bc:	b508      	push	{r3, lr}
 80a17be:	4b02      	ldr	r3, [pc, #8]	; (80a17c8 <network_on+0xc>)
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	695b      	ldr	r3, [r3, #20]
 80a17c4:	9301      	str	r3, [sp, #4]
 80a17c6:	bd08      	pop	{r3, pc}
 80a17c8:	080601c8 	.word	0x080601c8

080a17cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17cc:	b508      	push	{r3, lr}
 80a17ce:	4b02      	ldr	r3, [pc, #8]	; (80a17d8 <network_off+0xc>)
 80a17d0:	681b      	ldr	r3, [r3, #0]
 80a17d2:	699b      	ldr	r3, [r3, #24]
 80a17d4:	9301      	str	r3, [sp, #4]
 80a17d6:	bd08      	pop	{r3, pc}
 80a17d8:	080601c8 	.word	0x080601c8

080a17dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a17dc:	b508      	push	{r3, lr}
 80a17de:	4b02      	ldr	r3, [pc, #8]	; (80a17e8 <network_listen+0xc>)
 80a17e0:	681b      	ldr	r3, [r3, #0]
 80a17e2:	69db      	ldr	r3, [r3, #28]
 80a17e4:	9301      	str	r3, [sp, #4]
 80a17e6:	bd08      	pop	{r3, pc}
 80a17e8:	080601c8 	.word	0x080601c8

080a17ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a17ec:	b508      	push	{r3, lr}
 80a17ee:	4b02      	ldr	r3, [pc, #8]	; (80a17f8 <network_listening+0xc>)
 80a17f0:	681b      	ldr	r3, [r3, #0]
 80a17f2:	6a1b      	ldr	r3, [r3, #32]
 80a17f4:	9301      	str	r3, [sp, #4]
 80a17f6:	bd08      	pop	{r3, pc}
 80a17f8:	080601c8 	.word	0x080601c8

080a17fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a17fc:	b508      	push	{r3, lr}
 80a17fe:	4b02      	ldr	r3, [pc, #8]	; (80a1808 <network_set_listen_timeout+0xc>)
 80a1800:	681b      	ldr	r3, [r3, #0]
 80a1802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1804:	9301      	str	r3, [sp, #4]
 80a1806:	bd08      	pop	{r3, pc}
 80a1808:	080601c8 	.word	0x080601c8

080a180c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a180c:	b508      	push	{r3, lr}
 80a180e:	4b02      	ldr	r3, [pc, #8]	; (80a1818 <network_get_listen_timeout+0xc>)
 80a1810:	681b      	ldr	r3, [r3, #0]
 80a1812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1814:	9301      	str	r3, [sp, #4]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	080601c8 	.word	0x080601c8

080a181c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <spark_variable+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	681b      	ldr	r3, [r3, #0]
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	080601cc 	.word	0x080601cc

080a182c <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <spark_process+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	689b      	ldr	r3, [r3, #8]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	080601cc 	.word	0x080601cc

080a183c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <spark_cloud_flag_connected+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	695b      	ldr	r3, [r3, #20]
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	080601cc 	.word	0x080601cc

080a184c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <spark_send_event+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	6a1b      	ldr	r3, [r3, #32]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	080601cc 	.word	0x080601cc

080a185c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <spark_sync_time_pending+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	080601cc 	.word	0x080601cc

080a186c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601cc 	.word	0x080601cc

080a187c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <malloc+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	681b      	ldr	r3, [r3, #0]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601a0 	.word	0x080601a0

080a188c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <free+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	685b      	ldr	r3, [r3, #4]
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601a0 	.word	0x080601a0

080a189c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <realloc+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	689b      	ldr	r3, [r3, #8]
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601a0 	.word	0x080601a0

080a18ac <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <sprintf+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	68db      	ldr	r3, [r3, #12]
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601a0 	.word	0x080601a0

080a18bc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <vsnprintf+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601a0 	.word	0x080601a0

080a18cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <abort+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080601a0 	.word	0x080601a0

080a18dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <_malloc_r+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601a0 	.word	0x080601a0

080a18ec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a18ec:	b510      	push	{r4, lr}
 80a18ee:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a18f0:	6800      	ldr	r0, [r0, #0]
 80a18f2:	b118      	cbz	r0, 80a18fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a18f4:	f7ff ffca 	bl	80a188c <free>
            wakeupSource_ = nullptr;
 80a18f8:	2300      	movs	r3, #0
 80a18fa:	6023      	str	r3, [r4, #0]
 80a18fc:	bd10      	pop	{r4, pc}

080a18fe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a18fe:	b510      	push	{r4, lr}
 80a1900:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1902:	f7ff fff3 	bl	80a18ec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1906:	4620      	mov	r0, r4
 80a1908:	bd10      	pop	{r4, pc}
	...

080a190c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a190c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1910:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1912:	4c08      	ldr	r4, [pc, #32]	; (80a1934 <_GLOBAL__sub_I_System+0x28>)
 80a1914:	2000      	movs	r0, #0
 80a1916:	6020      	str	r0, [r4, #0]
 80a1918:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a191a:	71a0      	strb	r0, [r4, #6]
 80a191c:	8120      	strh	r0, [r4, #8]
 80a191e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1920:	f7ff fef0 	bl	80a1704 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1924:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a192a:	4a03      	ldr	r2, [pc, #12]	; (80a1938 <_GLOBAL__sub_I_System+0x2c>)
 80a192c:	4903      	ldr	r1, [pc, #12]	; (80a193c <_GLOBAL__sub_I_System+0x30>)
 80a192e:	f001 bcbb 	b.w	80a32a8 <__aeabi_atexit>
 80a1932:	bf00      	nop
 80a1934:	20000144 	.word	0x20000144
 80a1938:	2000006c 	.word	0x2000006c
 80a193c:	080a18ff 	.word	0x080a18ff

080a1940 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1942:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1944:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1946:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a194a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a194c:	2201      	movs	r2, #1
 80a194e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1952:	4621      	mov	r1, r4
 80a1954:	47a8      	blx	r5
}
 80a1956:	b003      	add	sp, #12
 80a1958:	bd30      	pop	{r4, r5, pc}

080a195a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a195a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a195c:	6803      	ldr	r3, [r0, #0]
 80a195e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1960:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1964:	46a4      	mov	ip, r4
}
 80a1966:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1968:	4760      	bx	ip

080a196a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a196a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a196c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a196e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1970:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1974:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1976:	4621      	mov	r1, r4
 80a1978:	4613      	mov	r3, r2
 80a197a:	2201      	movs	r2, #1
 80a197c:	47a8      	blx	r5
}
 80a197e:	b003      	add	sp, #12
 80a1980:	bd30      	pop	{r4, r5, pc}

080a1982 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1982:	4770      	bx	lr

080a1984 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1984:	4770      	bx	lr

080a1986 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1986:	2000      	movs	r0, #0
 80a1988:	4770      	bx	lr

080a198a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a198a:	b510      	push	{r4, lr}
 80a198c:	4604      	mov	r4, r0
 80a198e:	2114      	movs	r1, #20
 80a1990:	f001 fc8f 	bl	80a32b2 <_ZdlPvj>
 80a1994:	4620      	mov	r0, r4
 80a1996:	bd10      	pop	{r4, pc}

080a1998 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1998:	f7fe bb83 	b.w	80a00a2 <_ZdlPv>

080a199c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a199c:	b510      	push	{r4, lr}
 80a199e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a19a0:	6803      	ldr	r3, [r0, #0]
 80a19a2:	689b      	ldr	r3, [r3, #8]
 80a19a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a19a6:	68a3      	ldr	r3, [r4, #8]
 80a19a8:	3b01      	subs	r3, #1
 80a19aa:	60a3      	str	r3, [r4, #8]
 80a19ac:	b92b      	cbnz	r3, 80a19ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a19ae:	6823      	ldr	r3, [r4, #0]
 80a19b0:	4620      	mov	r0, r4
        }
    }
 80a19b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a19b6:	68db      	ldr	r3, [r3, #12]
 80a19b8:	4718      	bx	r3
 80a19ba:	bd10      	pop	{r4, pc}

080a19bc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a19bc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a19be:	4604      	mov	r4, r0
 80a19c0:	4606      	mov	r6, r0
 80a19c2:	694d      	ldr	r5, [r1, #20]
 80a19c4:	4b04      	ldr	r3, [pc, #16]	; (80a19d8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a19c6:	358c      	adds	r5, #140	; 0x8c
 80a19c8:	f844 3b04 	str.w	r3, [r4], #4
 80a19cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a19ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a19d0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a19d2:	4630      	mov	r0, r6
 80a19d4:	7023      	strb	r3, [r4, #0]
 80a19d6:	bd70      	pop	{r4, r5, r6, pc}
 80a19d8:	080a40e4 	.word	0x080a40e4

080a19dc <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	6943      	ldr	r3, [r0, #20]
 80a19e0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a19e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a19e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a19ea:	429a      	cmp	r2, r3
 80a19ec:	d005      	beq.n	80a19fa <_ZN9TCPClient4peekEv+0x1e>
 80a19ee:	6962      	ldr	r2, [r4, #20]
 80a19f0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a19f4:	4413      	add	r3, r2
 80a19f6:	7918      	ldrb	r0, [r3, #4]
 80a19f8:	bd10      	pop	{r4, pc}
 80a19fa:	6803      	ldr	r3, [r0, #0]
 80a19fc:	691b      	ldr	r3, [r3, #16]
 80a19fe:	4798      	blx	r3
 80a1a00:	2800      	cmp	r0, #0
 80a1a02:	d1f4      	bne.n	80a19ee <_ZN9TCPClient4peekEv+0x12>
 80a1a04:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1a08:	bd10      	pop	{r4, pc}

080a1a0a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1a0a:	b510      	push	{r4, lr}
 80a1a0c:	6943      	ldr	r3, [r0, #20]
 80a1a0e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1a10:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1a14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1a18:	429a      	cmp	r2, r3
 80a1a1a:	d008      	beq.n	80a1a2e <_ZN9TCPClient4readEv+0x24>
 80a1a1c:	6962      	ldr	r2, [r4, #20]
 80a1a1e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1a22:	1c59      	adds	r1, r3, #1
 80a1a24:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1a28:	4413      	add	r3, r2
 80a1a2a:	7918      	ldrb	r0, [r3, #4]
 80a1a2c:	bd10      	pop	{r4, pc}
 80a1a2e:	6803      	ldr	r3, [r0, #0]
 80a1a30:	691b      	ldr	r3, [r3, #16]
 80a1a32:	4798      	blx	r3
 80a1a34:	2800      	cmp	r0, #0
 80a1a36:	d1f1      	bne.n	80a1a1c <_ZN9TCPClient4readEv+0x12>
 80a1a38:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1a3c:	bd10      	pop	{r4, pc}

080a1a3e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a40:	6943      	ldr	r3, [r0, #20]
 80a1a42:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1a44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1a48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1a4c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1a4e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1a50:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1a52:	d106      	bne.n	80a1a62 <_ZN9TCPClient4readEPhj+0x24>
 80a1a54:	6803      	ldr	r3, [r0, #0]
 80a1a56:	691b      	ldr	r3, [r3, #16]
 80a1a58:	4798      	blx	r3
 80a1a5a:	b910      	cbnz	r0, 80a1a62 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1a5c:	f04f 34ff 	mov.w	r4, #4294967295
 80a1a60:	e014      	b.n	80a1a8c <_ZN9TCPClient4readEPhj+0x4e>
 80a1a62:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1a64:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1a66:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1a6a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1a6e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1a70:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1a72:	42bc      	cmp	r4, r7
 80a1a74:	bf28      	it	cs
 80a1a76:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1a78:	3104      	adds	r1, #4
 80a1a7a:	4622      	mov	r2, r4
 80a1a7c:	f001 fd78 	bl	80a3570 <memcpy>
 80a1a80:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1a82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1a86:	4423      	add	r3, r4
 80a1a88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a90 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1a90:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1a92:	2300      	movs	r3, #0
 80a1a94:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1a98:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1a9a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1a9e:	4770      	bx	lr

080a1aa0 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1aa0:	b538      	push	{r3, r4, r5, lr}
 80a1aa2:	6942      	ldr	r2, [r0, #20]
 80a1aa4:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1aa6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1aaa:	b11b      	cbz	r3, 80a1ab4 <_ZN9TCPClient9availableEv+0x14>
 80a1aac:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1ab0:	429a      	cmp	r2, r3
 80a1ab2:	d00c      	beq.n	80a1ace <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1ab4:	6920      	ldr	r0, [r4, #16]
 80a1ab6:	f001 fbc9 	bl	80a324c <_ZN5spark12NetworkClass4fromEm>
 80a1aba:	6803      	ldr	r3, [r0, #0]
 80a1abc:	68db      	ldr	r3, [r3, #12]
 80a1abe:	4798      	blx	r3
 80a1ac0:	b318      	cbz	r0, 80a1b0a <_ZN9TCPClient9availableEv+0x6a>
 80a1ac2:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1ac4:	6818      	ldr	r0, [r3, #0]
 80a1ac6:	f7ff fd6d 	bl	80a15a4 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1aca:	b918      	cbnz	r0, 80a1ad4 <_ZN9TCPClient9availableEv+0x34>
 80a1acc:	e01d      	b.n	80a1b0a <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1ace:	f7ff ffdf 	bl	80a1a90 <_ZN9TCPClient12flush_bufferEv>
 80a1ad2:	e7ef      	b.n	80a1ab4 <_ZN9TCPClient9availableEv+0x14>
 80a1ad4:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1ad6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1ada:	297f      	cmp	r1, #127	; 0x7f
 80a1adc:	d815      	bhi.n	80a1b0a <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1ade:	1d05      	adds	r5, r0, #4
 80a1ae0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1ae4:	2300      	movs	r3, #0
 80a1ae6:	4429      	add	r1, r5
 80a1ae8:	6800      	ldr	r0, [r0, #0]
 80a1aea:	f7ff fd73 	bl	80a15d4 <socket_receive>
            if (ret > 0)
 80a1aee:	2800      	cmp	r0, #0
 80a1af0:	dd0b      	ble.n	80a1b0a <_ZN9TCPClient9availableEv+0x6a>
 80a1af2:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1af4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1af8:	b90a      	cbnz	r2, 80a1afe <_ZN9TCPClient9availableEv+0x5e>
 80a1afa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1afe:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1b00:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1b04:	4418      	add	r0, r3
 80a1b06:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1b0a:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1b0c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1b10:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1b14:	1a18      	subs	r0, r3, r0
}
 80a1b16:	bd38      	pop	{r3, r4, r5, pc}

080a1b18 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1b18:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1b1a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1b1c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1b1e:	6818      	ldr	r0, [r3, #0]
 80a1b20:	f7ff fd40 	bl	80a15a4 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1b24:	b118      	cbz	r0, 80a1b2e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1b26:	6963      	ldr	r3, [r4, #20]
 80a1b28:	6818      	ldr	r0, [r3, #0]
 80a1b2a:	f7ff fd5b 	bl	80a15e4 <socket_close>
 80a1b2e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1b30:	f7ff fd70 	bl	80a1614 <socket_handle_invalid>
 80a1b34:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b36:	6960      	ldr	r0, [r4, #20]
 80a1b38:	2211      	movs	r2, #17
 80a1b3a:	2100      	movs	r1, #0
 80a1b3c:	308c      	adds	r0, #140	; 0x8c
 80a1b3e:	f001 fd3d 	bl	80a35bc <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1b42:	4620      	mov	r0, r4
}
 80a1b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1b48:	f7ff bfa2 	b.w	80a1a90 <_ZN9TCPClient12flush_bufferEv>

080a1b4c <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b50:	461f      	mov	r7, r3
    stop();
 80a1b52:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1b54:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1b58:	4606      	mov	r6, r0
 80a1b5a:	460c      	mov	r4, r1
 80a1b5c:	4615      	mov	r5, r2
    stop();
 80a1b5e:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1b60:	4638      	mov	r0, r7
 80a1b62:	f001 fb73 	bl	80a324c <_ZN5spark12NetworkClass4fromEm>
 80a1b66:	6803      	ldr	r3, [r0, #0]
 80a1b68:	68db      	ldr	r3, [r3, #12]
 80a1b6a:	4798      	blx	r3
 80a1b6c:	2800      	cmp	r0, #0
 80a1b6e:	d056      	beq.n	80a1c1e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1b70:	9700      	str	r7, [sp, #0]
 80a1b72:	462b      	mov	r3, r5
 80a1b74:	2206      	movs	r2, #6
 80a1b76:	2101      	movs	r1, #1
 80a1b78:	2002      	movs	r0, #2
 80a1b7a:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1b7e:	f7ff fd19 	bl	80a15b4 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1b82:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1b84:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1b88:	2700      	movs	r7, #0
 80a1b8a:	9302      	str	r3, [sp, #8]
 80a1b8c:	6973      	ldr	r3, [r6, #20]
 80a1b8e:	9703      	str	r7, [sp, #12]
 80a1b90:	681b      	ldr	r3, [r3, #0]
 80a1b92:	2001      	movs	r0, #1
 80a1b94:	9301      	str	r3, [sp, #4]
 80a1b96:	4b23      	ldr	r3, [pc, #140]	; (80a1c24 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1b98:	aa02      	add	r2, sp, #8
 80a1b9a:	9300      	str	r3, [sp, #0]
 80a1b9c:	4922      	ldr	r1, [pc, #136]	; (80a1c28 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1b9e:	463b      	mov	r3, r7
 80a1ba0:	f7ff fd98 	bl	80a16d4 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1ba4:	6973      	ldr	r3, [r6, #20]
 80a1ba6:	6818      	ldr	r0, [r3, #0]
 80a1ba8:	f7ff fcfc 	bl	80a15a4 <socket_handle_valid>
 80a1bac:	2800      	cmp	r0, #0
 80a1bae:	d036      	beq.n	80a1c1e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1bb0:	4630      	mov	r0, r6
 80a1bb2:	f7ff ff6d 	bl	80a1a90 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1bb6:	2302      	movs	r3, #2
 80a1bb8:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1bbc:	0a2b      	lsrs	r3, r5, #8
 80a1bbe:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1bc2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1bc4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1bc8:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1bcc:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1bce:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1bd2:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1bd6:	7963      	ldrb	r3, [r4, #5]
 80a1bd8:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1bdc:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1be0:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1be4:	f7ff fd5e 	bl	80a16a4 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1be8:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1bea:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1bec:	2210      	movs	r2, #16
 80a1bee:	a902      	add	r1, sp, #8
 80a1bf0:	6818      	ldr	r0, [r3, #0]
 80a1bf2:	f7ff fce7 	bl	80a15c4 <socket_connect>
 80a1bf6:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1bf8:	4628      	mov	r0, r5
 80a1bfa:	f7ff fd53 	bl	80a16a4 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1c00:	6975      	ldr	r5, [r6, #20]
 80a1c02:	358c      	adds	r5, #140	; 0x8c
 80a1c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1c06:	6823      	ldr	r3, [r4, #0]
 80a1c08:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1c0a:	f1b8 0f00 	cmp.w	r8, #0
 80a1c0e:	d005      	beq.n	80a1c1c <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1c10:	6833      	ldr	r3, [r6, #0]
 80a1c12:	4630      	mov	r0, r6
 80a1c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1c16:	4798      	blx	r3
 80a1c18:	4638      	mov	r0, r7
 80a1c1a:	e000      	b.n	80a1c1e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1c1c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1c1e:	b00a      	add	sp, #40	; 0x28
 80a1c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1c24:	080a3f77 	.word	0x080a3f77
 80a1c28:	080a3f70 	.word	0x080a3f70

080a1c2c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1c2c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1c2e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1c30:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1c32:	6818      	ldr	r0, [r3, #0]
 80a1c34:	f7ff fcb6 	bl	80a15a4 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1c38:	b908      	cbnz	r0, 80a1c3e <_ZN9TCPClient6statusEv+0x12>
 80a1c3a:	2000      	movs	r0, #0
 80a1c3c:	bd10      	pop	{r4, pc}
 80a1c3e:	6920      	ldr	r0, [r4, #16]
 80a1c40:	f001 fb04 	bl	80a324c <_ZN5spark12NetworkClass4fromEm>
 80a1c44:	6803      	ldr	r3, [r0, #0]
 80a1c46:	68db      	ldr	r3, [r3, #12]
 80a1c48:	4798      	blx	r3
 80a1c4a:	2800      	cmp	r0, #0
 80a1c4c:	d0f5      	beq.n	80a1c3a <_ZN9TCPClient6statusEv+0xe>
 80a1c4e:	6963      	ldr	r3, [r4, #20]
 80a1c50:	6818      	ldr	r0, [r3, #0]
 80a1c52:	f7ff fc9f 	bl	80a1594 <socket_active_status>
 80a1c56:	fab0 f080 	clz	r0, r0
 80a1c5a:	0940      	lsrs	r0, r0, #5
}
 80a1c5c:	bd10      	pop	{r4, pc}

080a1c5e <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1c5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1c62:	2500      	movs	r5, #0
 80a1c64:	6045      	str	r5, [r0, #4]
 80a1c66:	4604      	mov	r4, r0
 80a1c68:	460e      	mov	r6, r1
 80a1c6a:	4617      	mov	r7, r2
 80a1c6c:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1c6e:	f7ff ffdd 	bl	80a1c2c <_ZN9TCPClient6statusEv>
 80a1c72:	b160      	cbz	r0, 80a1c8e <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1c74:	6960      	ldr	r0, [r4, #20]
 80a1c76:	9501      	str	r5, [sp, #4]
 80a1c78:	f8cd 8000 	str.w	r8, [sp]
 80a1c7c:	462b      	mov	r3, r5
 80a1c7e:	463a      	mov	r2, r7
 80a1c80:	4631      	mov	r1, r6
 80a1c82:	6800      	ldr	r0, [r0, #0]
 80a1c84:	f7ff fcd6 	bl	80a1634 <socket_send_ex>
    if (ret < 0) {
 80a1c88:	2800      	cmp	r0, #0
 80a1c8a:	da03      	bge.n	80a1c94 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1c8c:	e001      	b.n	80a1c92 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1c8e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1c92:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1c94:	b002      	add	sp, #8
 80a1c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1c9a <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1c9a:	b538      	push	{r3, r4, r5, lr}
 80a1c9c:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1c9e:	f7ff ffc5 	bl	80a1c2c <_ZN9TCPClient6statusEv>
 80a1ca2:	bb00      	cbnz	r0, 80a1ce6 <_ZN9TCPClient9connectedEv+0x4c>
 80a1ca4:	6963      	ldr	r3, [r4, #20]
 80a1ca6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1caa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1cae:	4291      	cmp	r1, r2
 80a1cb0:	d119      	bne.n	80a1ce6 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1cb2:	6818      	ldr	r0, [r3, #0]
 80a1cb4:	f7ff fc76 	bl	80a15a4 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1cb8:	b128      	cbz	r0, 80a1cc6 <_ZN9TCPClient9connectedEv+0x2c>
 80a1cba:	6963      	ldr	r3, [r4, #20]
 80a1cbc:	6818      	ldr	r0, [r3, #0]
 80a1cbe:	f7ff fc69 	bl	80a1594 <socket_active_status>
 80a1cc2:	2801      	cmp	r0, #1
 80a1cc4:	d001      	beq.n	80a1cca <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1cc6:	2500      	movs	r5, #0
 80a1cc8:	e00e      	b.n	80a1ce8 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1cca:	6823      	ldr	r3, [r4, #0]
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	691b      	ldr	r3, [r3, #16]
 80a1cd0:	4798      	blx	r3
 80a1cd2:	2800      	cmp	r0, #0
 80a1cd4:	bf14      	ite	ne
 80a1cd6:	2501      	movne	r5, #1
 80a1cd8:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1cda:	d105      	bne.n	80a1ce8 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a1cdc:	6823      	ldr	r3, [r4, #0]
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ce2:	4798      	blx	r3
 80a1ce4:	e000      	b.n	80a1ce8 <_ZN9TCPClient9connectedEv+0x4e>
 80a1ce6:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1ce8:	4628      	mov	r0, r5
 80a1cea:	bd38      	pop	{r3, r4, r5, pc}

080a1cec <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1cec:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1cee:	f7ff ff9d 	bl	80a1c2c <_ZN9TCPClient6statusEv>
}
 80a1cf2:	3000      	adds	r0, #0
 80a1cf4:	bf18      	it	ne
 80a1cf6:	2001      	movne	r0, #1
 80a1cf8:	bd08      	pop	{r3, pc}

080a1cfa <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a1cfa:	b510      	push	{r4, lr}
 80a1cfc:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1cfe:	2300      	movs	r3, #0
 80a1d00:	6001      	str	r1, [r0, #0]
 80a1d02:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1d06:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a1d0a:	3088      	adds	r0, #136	; 0x88
 80a1d0c:	f000 fed8 	bl	80a2ac0 <_ZN9IPAddressC1Ev>
}
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	bd10      	pop	{r4, pc}

080a1d14 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1d18:	b570      	push	{r4, r5, r6, lr}
 80a1d1a:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1d1c:	4a14      	ldr	r2, [pc, #80]	; (80a1d70 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d1e:	2300      	movs	r3, #0
 80a1d20:	6043      	str	r3, [r0, #4]
 80a1d22:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1d24:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1d26:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1d28:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1d2a:	20a0      	movs	r0, #160	; 0xa0
 80a1d2c:	460e      	mov	r6, r1
 80a1d2e:	f7fe f9b4 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1d32:	4605      	mov	r5, r0
 80a1d34:	b110      	cbz	r0, 80a1d3c <_ZN9TCPClientC1Em+0x28>
 80a1d36:	4631      	mov	r1, r6
 80a1d38:	f7ff ffdf 	bl	80a1cfa <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1d3c:	2014      	movs	r0, #20
 80a1d3e:	f7fe f9ac 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1d42:	4603      	mov	r3, r0
 80a1d44:	b128      	cbz	r0, 80a1d52 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1d46:	2201      	movs	r2, #1
 80a1d48:	6042      	str	r2, [r0, #4]
 80a1d4a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1d4c:	4a09      	ldr	r2, [pc, #36]	; (80a1d74 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1d4e:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1d50:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1d52:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1d54:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1d56:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1d58:	b128      	cbz	r0, 80a1d66 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1d5a:	6843      	ldr	r3, [r0, #4]
 80a1d5c:	3b01      	subs	r3, #1
 80a1d5e:	6043      	str	r3, [r0, #4]
 80a1d60:	b90b      	cbnz	r3, 80a1d66 <_ZN9TCPClientC1Em+0x52>
 80a1d62:	f7ff fe1b 	bl	80a199c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	f7ff fe92 	bl	80a1a90 <_ZN9TCPClient12flush_bufferEv>
}
 80a1d6c:	4620      	mov	r0, r4
 80a1d6e:	bd70      	pop	{r4, r5, r6, pc}
 80a1d70:	080a3f2c 	.word	0x080a3f2c
 80a1d74:	080a3f10 	.word	0x080a3f10

080a1d78 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1d78:	b510      	push	{r4, lr}
 80a1d7a:	4604      	mov	r4, r0
 80a1d7c:	f7ff fc4a 	bl	80a1614 <socket_handle_invalid>
 80a1d80:	4601      	mov	r1, r0
 80a1d82:	4620      	mov	r0, r4
 80a1d84:	f7ff ffc6 	bl	80a1d14 <_ZN9TCPClientC1Em>
{
}
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	bd10      	pop	{r4, pc}

080a1d8c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1d8c:	b510      	push	{r4, lr}
 80a1d8e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1d90:	6800      	ldr	r0, [r0, #0]
 80a1d92:	f7ff fc07 	bl	80a15a4 <socket_handle_valid>
 80a1d96:	b110      	cbz	r0, 80a1d9e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1d98:	6820      	ldr	r0, [r4, #0]
 80a1d9a:	f7ff fc23 	bl	80a15e4 <socket_close>
    }
}
 80a1d9e:	4620      	mov	r0, r4
 80a1da0:	bd10      	pop	{r4, pc}

080a1da2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1da2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1da4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1da6:	4620      	mov	r0, r4
 80a1da8:	f7ff fff0 	bl	80a1d8c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1dac:	b124      	cbz	r4, 80a1db8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1dae:	4620      	mov	r0, r4
 80a1db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1db4:	f7fe b975 	b.w	80a00a2 <_ZdlPv>
 80a1db8:	bd10      	pop	{r4, pc}
	...

080a1dbc <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1dc0:	461f      	mov	r7, r3
    stop();
 80a1dc2:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1dc4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1dc8:	4606      	mov	r6, r0
 80a1dca:	460d      	mov	r5, r1
 80a1dcc:	4690      	mov	r8, r2
    stop();
 80a1dce:	4798      	blx	r3
    if (Network.ready())
 80a1dd0:	4813      	ldr	r0, [pc, #76]	; (80a1e20 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1dd2:	f001 f9ee 	bl	80a31b2 <_ZN5spark12NetworkClass5readyEv>
 80a1dd6:	b300      	cbz	r0, 80a1e1a <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a1dd8:	a802      	add	r0, sp, #8
 80a1dda:	f000 fe71 	bl	80a2ac0 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1dde:	4628      	mov	r0, r5
 80a1de0:	f001 fc9f 	bl	80a3722 <strlen>
 80a1de4:	2400      	movs	r4, #0
 80a1de6:	b281      	uxth	r1, r0
 80a1de8:	9400      	str	r4, [sp, #0]
 80a1dea:	463b      	mov	r3, r7
 80a1dec:	aa03      	add	r2, sp, #12
 80a1dee:	4628      	mov	r0, r5
 80a1df0:	f7ff fc60 	bl	80a16b4 <inet_gethostbyname>
 80a1df4:	b980      	cbnz	r0, 80a1e18 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a1df6:	6833      	ldr	r3, [r6, #0]
 80a1df8:	ad09      	add	r5, sp, #36	; 0x24
 80a1dfa:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1dfe:	4b09      	ldr	r3, [pc, #36]	; (80a1e24 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1e00:	ac03      	add	r4, sp, #12
 80a1e02:	9308      	str	r3, [sp, #32]
 80a1e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1e08:	6823      	ldr	r3, [r4, #0]
 80a1e0a:	4642      	mov	r2, r8
 80a1e0c:	702b      	strb	r3, [r5, #0]
 80a1e0e:	a908      	add	r1, sp, #32
 80a1e10:	463b      	mov	r3, r7
 80a1e12:	4630      	mov	r0, r6
 80a1e14:	47c8      	blx	r9
 80a1e16:	e000      	b.n	80a1e1a <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a1e18:	4620      	mov	r0, r4
}
 80a1e1a:	b00f      	add	sp, #60	; 0x3c
 80a1e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1e20:	200005d8 	.word	0x200005d8
 80a1e24:	080a40e4 	.word	0x080a40e4

080a1e28 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
 80a1e28:	4770      	bx	lr

080a1e2a <_ZN21StringPrintableHelperD0Ev>:
 80a1e2a:	b510      	push	{r4, lr}
 80a1e2c:	4604      	mov	r4, r0
 80a1e2e:	210c      	movs	r1, #12
 80a1e30:	f001 fa3f 	bl	80a32b2 <_ZdlPvj>
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	bd10      	pop	{r4, pc}

080a1e38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1e38:	b510      	push	{r4, lr}
 80a1e3a:	4604      	mov	r4, r0
{
	free(buffer);
 80a1e3c:	6800      	ldr	r0, [r0, #0]
 80a1e3e:	f7ff fd25 	bl	80a188c <free>
}
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	bd10      	pop	{r4, pc}

080a1e46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1e46:	b510      	push	{r4, lr}
 80a1e48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1e4a:	6800      	ldr	r0, [r0, #0]
 80a1e4c:	b108      	cbz	r0, 80a1e52 <_ZN6String10invalidateEv+0xc>
 80a1e4e:	f7ff fd1d 	bl	80a188c <free>
	buffer = NULL;
 80a1e52:	2300      	movs	r3, #0
 80a1e54:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1e56:	60a3      	str	r3, [r4, #8]
 80a1e58:	6063      	str	r3, [r4, #4]
 80a1e5a:	bd10      	pop	{r4, pc}

080a1e5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1e5c:	b538      	push	{r3, r4, r5, lr}
 80a1e5e:	4604      	mov	r4, r0
 80a1e60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1e62:	6800      	ldr	r0, [r0, #0]
 80a1e64:	3101      	adds	r1, #1
 80a1e66:	f7ff fd19 	bl	80a189c <realloc>
	if (newbuffer) {
 80a1e6a:	b110      	cbz	r0, 80a1e72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1e6c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1e70:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1e72:	bd38      	pop	{r3, r4, r5, pc}

080a1e74 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1e74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1e76:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1e78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1e7a:	b113      	cbz	r3, 80a1e82 <_ZN6String7reserveEj+0xe>
 80a1e7c:	6843      	ldr	r3, [r0, #4]
 80a1e7e:	428b      	cmp	r3, r1
 80a1e80:	d207      	bcs.n	80a1e92 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff ffea 	bl	80a1e5c <_ZN6String12changeBufferEj>
 80a1e88:	b120      	cbz	r0, 80a1e94 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1e8a:	68a3      	ldr	r3, [r4, #8]
 80a1e8c:	b90b      	cbnz	r3, 80a1e92 <_ZN6String7reserveEj+0x1e>
 80a1e8e:	6822      	ldr	r2, [r4, #0]
 80a1e90:	7013      	strb	r3, [r2, #0]
 80a1e92:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1e94:	bd10      	pop	{r4, pc}

080a1e96 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1e96:	b570      	push	{r4, r5, r6, lr}
 80a1e98:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1e9a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1e9c:	4604      	mov	r4, r0
 80a1e9e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1ea0:	f7ff ffe8 	bl	80a1e74 <_ZN6String7reserveEj>
 80a1ea4:	b918      	cbnz	r0, 80a1eae <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1ea6:	4620      	mov	r0, r4
 80a1ea8:	f7ff ffcd 	bl	80a1e46 <_ZN6String10invalidateEv>
		return *this;
 80a1eac:	e009      	b.n	80a1ec2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1eae:	462a      	mov	r2, r5
 80a1eb0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1eb2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1eb4:	6820      	ldr	r0, [r4, #0]
 80a1eb6:	f001 fb5b 	bl	80a3570 <memcpy>
	buffer[len] = 0;
 80a1eba:	6822      	ldr	r2, [r4, #0]
 80a1ebc:	68a3      	ldr	r3, [r4, #8]
 80a1ebe:	2100      	movs	r1, #0
 80a1ec0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1ec2:	4620      	mov	r0, r4
 80a1ec4:	bd70      	pop	{r4, r5, r6, pc}

080a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ec6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ec8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1eca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ecc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1ece:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1ed0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1ed2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1ed4:	460d      	mov	r5, r1
 80a1ed6:	b139      	cbz	r1, 80a1ee8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1ed8:	4608      	mov	r0, r1
 80a1eda:	f001 fc22 	bl	80a3722 <strlen>
 80a1ede:	4629      	mov	r1, r5
 80a1ee0:	4602      	mov	r2, r0
 80a1ee2:	4620      	mov	r0, r4
 80a1ee4:	f7ff ffd7 	bl	80a1e96 <_ZN6String4copyEPKcj>
}
 80a1ee8:	4620      	mov	r0, r4
 80a1eea:	bd38      	pop	{r3, r4, r5, pc}

080a1eec <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1eec:	b538      	push	{r3, r4, r5, lr}
 80a1eee:	4605      	mov	r5, r0
	if (buffer) {
 80a1ef0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1ef2:	460c      	mov	r4, r1
	if (buffer) {
 80a1ef4:	b160      	cbz	r0, 80a1f10 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1ef6:	686a      	ldr	r2, [r5, #4]
 80a1ef8:	688b      	ldr	r3, [r1, #8]
 80a1efa:	429a      	cmp	r2, r3
 80a1efc:	d306      	bcc.n	80a1f0c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1efe:	6809      	ldr	r1, [r1, #0]
 80a1f00:	f001 fbec 	bl	80a36dc <strcpy>
			len = rhs.len;
 80a1f04:	68a3      	ldr	r3, [r4, #8]
 80a1f06:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1f08:	2300      	movs	r3, #0
 80a1f0a:	e00a      	b.n	80a1f22 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a1f0c:	f7ff fcbe 	bl	80a188c <free>
		}
	}
	buffer = rhs.buffer;
 80a1f10:	6823      	ldr	r3, [r4, #0]
 80a1f12:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1f14:	6863      	ldr	r3, [r4, #4]
 80a1f16:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1f18:	68a3      	ldr	r3, [r4, #8]
 80a1f1a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1f1c:	2300      	movs	r3, #0
 80a1f1e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1f20:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1f22:	60a3      	str	r3, [r4, #8]
 80a1f24:	bd38      	pop	{r3, r4, r5, pc}

080a1f26 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1f26:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1f28:	b510      	push	{r4, lr}
 80a1f2a:	460b      	mov	r3, r1
 80a1f2c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1f2e:	d007      	beq.n	80a1f40 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1f30:	6809      	ldr	r1, [r1, #0]
 80a1f32:	b119      	cbz	r1, 80a1f3c <_ZN6StringaSERKS_+0x16>
 80a1f34:	689a      	ldr	r2, [r3, #8]
 80a1f36:	f7ff ffae 	bl	80a1e96 <_ZN6String4copyEPKcj>
 80a1f3a:	e001      	b.n	80a1f40 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1f3c:	f7ff ff83 	bl	80a1e46 <_ZN6String10invalidateEv>

	return *this;
}
 80a1f40:	4620      	mov	r0, r4
 80a1f42:	bd10      	pop	{r4, pc}

080a1f44 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f48:	2300      	movs	r3, #0
 80a1f4a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1f4c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1f4e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f50:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1f52:	f7ff ffe8 	bl	80a1f26 <_ZN6StringaSERKS_>
}
 80a1f56:	4620      	mov	r0, r4
 80a1f58:	bd10      	pop	{r4, pc}

080a1f5a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1f5a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a1f5c:	b510      	push	{r4, lr}
 80a1f5e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1f60:	d001      	beq.n	80a1f66 <_ZN6StringaSEOS_+0xc>
 80a1f62:	f7ff ffc3 	bl	80a1eec <_ZN6String4moveERS_>
	return *this;
}
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	bd10      	pop	{r4, pc}

080a1f6a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1f6a:	b538      	push	{r3, r4, r5, lr}
 80a1f6c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1f6e:	460c      	mov	r4, r1
 80a1f70:	b141      	cbz	r1, 80a1f84 <_ZN6StringaSEPKc+0x1a>
 80a1f72:	4608      	mov	r0, r1
 80a1f74:	f001 fbd5 	bl	80a3722 <strlen>
 80a1f78:	4621      	mov	r1, r4
 80a1f7a:	4602      	mov	r2, r0
 80a1f7c:	4628      	mov	r0, r5
 80a1f7e:	f7ff ff8a 	bl	80a1e96 <_ZN6String4copyEPKcj>
 80a1f82:	e001      	b.n	80a1f88 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1f84:	f7ff ff5f 	bl	80a1e46 <_ZN6String10invalidateEv>

	return *this;
}
 80a1f88:	4628      	mov	r0, r5
 80a1f8a:	bd38      	pop	{r3, r4, r5, pc}

080a1f8c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1f8c:	b570      	push	{r4, r5, r6, lr}
 80a1f8e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1f90:	460e      	mov	r6, r1
 80a1f92:	b909      	cbnz	r1, 80a1f98 <_ZN6String6concatEPKcj+0xc>
 80a1f94:	2000      	movs	r0, #0
 80a1f96:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1f98:	b16a      	cbz	r2, 80a1fb6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1f9a:	6883      	ldr	r3, [r0, #8]
 80a1f9c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a1f9e:	4629      	mov	r1, r5
 80a1fa0:	f7ff ff68 	bl	80a1e74 <_ZN6String7reserveEj>
 80a1fa4:	2800      	cmp	r0, #0
 80a1fa6:	d0f5      	beq.n	80a1f94 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1fa8:	6820      	ldr	r0, [r4, #0]
 80a1faa:	68a3      	ldr	r3, [r4, #8]
 80a1fac:	4631      	mov	r1, r6
 80a1fae:	4418      	add	r0, r3
 80a1fb0:	f001 fb94 	bl	80a36dc <strcpy>
	len = newlen;
 80a1fb4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1fb6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1fb8:	bd70      	pop	{r4, r5, r6, pc}

080a1fba <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a1fba:	688a      	ldr	r2, [r1, #8]
 80a1fbc:	6809      	ldr	r1, [r1, #0]
 80a1fbe:	f7ff bfe5 	b.w	80a1f8c <_ZN6String6concatEPKcj>

080a1fc2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
 80a1fc2:	b538      	push	{r3, r4, r5, lr}
 80a1fc4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
 80a1fc6:	6880      	ldr	r0, [r0, #8]
 80a1fc8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
 80a1fca:	f7ff ffdf 	bl	80a1f8c <_ZN6String6concatEPKcj>
 80a1fce:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
 80a1fd0:	6898      	ldr	r0, [r3, #8]
    }
 80a1fd2:	1b40      	subs	r0, r0, r5
 80a1fd4:	bd38      	pop	{r3, r4, r5, pc}

080a1fd6 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a1fd6:	b538      	push	{r3, r4, r5, lr}
 80a1fd8:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a1fda:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a1fdc:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a1fde:	b141      	cbz	r1, 80a1ff2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a1fe0:	f001 fb9f 	bl	80a3722 <strlen>
 80a1fe4:	4621      	mov	r1, r4
 80a1fe6:	4602      	mov	r2, r0
 80a1fe8:	4628      	mov	r0, r5
}
 80a1fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a1fee:	f7ff bfcd 	b.w	80a1f8c <_ZN6String6concatEPKcj>
}
 80a1ff2:	bd38      	pop	{r3, r4, r5, pc}

080a1ff4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a1ff4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1ff6:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a1ff8:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a1ffc:	2201      	movs	r2, #1
 80a1ffe:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a2000:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a2004:	f7ff ffc2 	bl	80a1f8c <_ZN6String6concatEPKcj>
}
 80a2008:	b003      	add	sp, #12
 80a200a:	f85d fb04 	ldr.w	pc, [sp], #4

080a200e <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
 80a200e:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
 80a2010:	6880      	ldr	r0, [r0, #8]
 80a2012:	f7ff ffef 	bl	80a1ff4 <_ZN6String6concatEc>
    }
 80a2016:	bd08      	pop	{r3, pc}

080a2018 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 80a2018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a201c:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a201e:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 80a2020:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a2022:	b1ca      	cbz	r2, 80a2058 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a2024:	6883      	ldr	r3, [r0, #8]
 80a2026:	b1bb      	cbz	r3, 80a2058 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a2028:	429a      	cmp	r2, r3
 80a202a:	d815      	bhi.n	80a2058 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a202c:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 80a202e:	42ab      	cmp	r3, r5
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a2030:	4630      	mov	r0, r6
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 80a2032:	bf98      	it	ls
 80a2034:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
 80a2038:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a203c:	eb06 0805 	add.w	r8, r6, r5
 80a2040:	4540      	cmp	r0, r8
 80a2042:	d80d      	bhi.n	80a2060 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
 80a2044:	6839      	ldr	r1, [r7, #0]
 80a2046:	f001 fbac 	bl	80a37a2 <strstr>
		if (!p) break;
 80a204a:	b148      	cbz	r0, 80a2060 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 80a204c:	1b83      	subs	r3, r0, r6
 80a204e:	429d      	cmp	r5, r3
 80a2050:	bf28      	it	cs
 80a2052:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a2054:	3001      	adds	r0, #1
 80a2056:	e7f3      	b.n	80a2040 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a2058:	f04f 30ff 	mov.w	r0, #4294967295
 80a205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2060:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
 80a2062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2066 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80a2066:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 80a206a:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80a206e:	4605      	mov	r5, r0
 80a2070:	4688      	mov	r8, r1
 80a2072:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 80a2074:	f1ba 0f00 	cmp.w	sl, #0
 80a2078:	d078      	beq.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
 80a207a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80a207e:	f1bb 0f00 	cmp.w	fp, #0
 80a2082:	d073      	beq.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
 80a2084:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
 80a2086:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
 80a2088:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
 80a208c:	2f00      	cmp	r7, #0
 80a208e:	d10e      	bne.n	80a20ae <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a2090:	4620      	mov	r0, r4
 80a2092:	f8d8 1000 	ldr.w	r1, [r8]
 80a2096:	f001 fb84 	bl	80a37a2 <strstr>
 80a209a:	4604      	mov	r4, r0
 80a209c:	2800      	cmp	r0, #0
 80a209e:	d065      	beq.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
 80a20a0:	68b2      	ldr	r2, [r6, #8]
 80a20a2:	6831      	ldr	r1, [r6, #0]
 80a20a4:	f001 fa64 	bl	80a3570 <memcpy>
			readFrom = foundAt + replace.len;
 80a20a8:	68b0      	ldr	r0, [r6, #8]
 80a20aa:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a20ac:	e7f0      	b.n	80a2090 <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
 80a20ae:	da22      	bge.n	80a20f6 <_ZN6String7replaceERKS_S1_+0x90>
 80a20b0:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a20b2:	f8d8 1000 	ldr.w	r1, [r8]
 80a20b6:	4620      	mov	r0, r4
 80a20b8:	f001 fb73 	bl	80a37a2 <strstr>
 80a20bc:	4683      	mov	fp, r0
 80a20be:	b1a8      	cbz	r0, 80a20ec <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
 80a20c0:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
 80a20c4:	4621      	mov	r1, r4
 80a20c6:	4652      	mov	r2, sl
 80a20c8:	4648      	mov	r0, r9
			writeTo += n;
 80a20ca:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
 80a20cc:	f001 fa50 	bl	80a3570 <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
 80a20d0:	4648      	mov	r0, r9
 80a20d2:	68b2      	ldr	r2, [r6, #8]
 80a20d4:	6831      	ldr	r1, [r6, #0]
 80a20d6:	f001 fa4b 	bl	80a3570 <memcpy>
			writeTo += replace.len;
 80a20da:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
 80a20dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
 80a20e0:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
 80a20e2:	68ab      	ldr	r3, [r5, #8]
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
 80a20e4:	445c      	add	r4, fp
			len += diff;
 80a20e6:	443b      	add	r3, r7
 80a20e8:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a20ea:	e7e2      	b.n	80a20b2 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 80a20ec:	4621      	mov	r1, r4
 80a20ee:	4648      	mov	r0, r9
 80a20f0:	f001 faf4 	bl	80a36dc <strcpy>
 80a20f4:	e03a      	b.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a20f6:	46d1      	mov	r9, sl
 80a20f8:	680b      	ldr	r3, [r1, #0]
 80a20fa:	4619      	mov	r1, r3
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	9301      	str	r3, [sp, #4]
 80a2100:	f001 fb4f 	bl	80a37a2 <strstr>
 80a2104:	b120      	cbz	r0, 80a2110 <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
 80a2106:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 80a210a:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a210c:	9b01      	ldr	r3, [sp, #4]
 80a210e:	e7f4      	b.n	80a20fa <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
 80a2110:	45d1      	cmp	r9, sl
 80a2112:	d02b      	beq.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80a2114:	686b      	ldr	r3, [r5, #4]
 80a2116:	4599      	cmp	r9, r3
 80a2118:	d904      	bls.n	80a2124 <_ZN6String7replaceERKS_S1_+0xbe>
 80a211a:	4649      	mov	r1, r9
 80a211c:	4628      	mov	r0, r5
 80a211e:	f7ff fe9d 	bl	80a1e5c <_ZN6String12changeBufferEj>
 80a2122:	b318      	cbz	r0, 80a216c <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
 80a2124:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
 80a2126:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
 80a212a:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a212c:	2a00      	cmp	r2, #0
 80a212e:	db1d      	blt.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
 80a2130:	4641      	mov	r1, r8
 80a2132:	4628      	mov	r0, r5
 80a2134:	f7ff ff70 	bl	80a2018 <_ZNK6String11lastIndexOfERKS_j>
 80a2138:	1e04      	subs	r4, r0, #0
 80a213a:	db17      	blt.n	80a216c <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
 80a213c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a2140:	6829      	ldr	r1, [r5, #0]
 80a2142:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a2144:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
 80a2146:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a2148:	1ad2      	subs	r2, r2, r3
 80a214a:	19c8      	adds	r0, r1, r7
 80a214c:	f001 fa1b 	bl	80a3586 <memmove>
			len += diff;
 80a2150:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 80a2152:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
 80a2154:	443b      	add	r3, r7
 80a2156:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 80a2158:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 80a215c:	6828      	ldr	r0, [r5, #0]
 80a215e:	68b2      	ldr	r2, [r6, #8]
 80a2160:	6831      	ldr	r1, [r6, #0]
 80a2162:	4420      	add	r0, r4
 80a2164:	f001 fa04 	bl	80a3570 <memcpy>
			index--;
 80a2168:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a216a:	e7df      	b.n	80a212c <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 80a216c:	4628      	mov	r0, r5
 80a216e:	b003      	add	sp, #12
 80a2170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2174 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
 80a2174:	b530      	push	{r4, r5, lr}
 80a2176:	460d      	mov	r5, r1
 80a2178:	4604      	mov	r4, r0
 80a217a:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a217c:	2300      	movs	r3, #0
 80a217e:	9302      	str	r3, [sp, #8]
 80a2180:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2182:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2184:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2186:	7303      	strb	r3, [r0, #12]
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
 80a2188:	4b06      	ldr	r3, [pc, #24]	; (80a21a4 <_ZN6StringC1ERK9Printable+0x30>)
        s.reserve(20);
 80a218a:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
 80a2190:	f7ff fe70 	bl	80a1e74 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
 80a2194:	682b      	ldr	r3, [r5, #0]
 80a2196:	a901      	add	r1, sp, #4
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	4628      	mov	r0, r5
 80a219c:	4798      	blx	r3
}
 80a219e:	4620      	mov	r0, r4
 80a21a0:	b005      	add	sp, #20
 80a21a2:	bd30      	pop	{r4, r5, pc}
 80a21a4:	080a3f94 	.word	0x080a3f94

080a21a8 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
 80a21a8:	b40e      	push	{r1, r2, r3}
 80a21aa:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a21ac:	ac09      	add	r4, sp, #36	; 0x24
 80a21ae:	f854 7b04 	ldr.w	r7, [r4], #4
 80a21b2:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a21b4:	4623      	mov	r3, r4
 80a21b6:	463a      	mov	r2, r7
 80a21b8:	2105      	movs	r1, #5
 80a21ba:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a21bc:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a21be:	f7ff fb7d 	bl	80a18bc <vsnprintf>
 80a21c2:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a21c4:	490b      	ldr	r1, [pc, #44]	; (80a21f4 <_ZN6String6formatEPKcz+0x4c>)
 80a21c6:	4628      	mov	r0, r5
 80a21c8:	f7ff fe7d 	bl	80a1ec6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a21cc:	4631      	mov	r1, r6
 80a21ce:	4628      	mov	r0, r5
 80a21d0:	f7ff fe50 	bl	80a1e74 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a21d4:	6828      	ldr	r0, [r5, #0]
 80a21d6:	b130      	cbz	r0, 80a21e6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a21d8:	4623      	mov	r3, r4
 80a21da:	463a      	mov	r2, r7
 80a21dc:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a21de:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a21e0:	f7ff fb6c 	bl	80a18bc <vsnprintf>
        va_end(marker);
        result.len = n;
 80a21e4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a21e6:	4628      	mov	r0, r5
 80a21e8:	b004      	add	sp, #16
 80a21ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a21ee:	b003      	add	sp, #12
 80a21f0:	4770      	bx	lr
 80a21f2:	bf00      	nop
 80a21f4:	080a3a44 	.word	0x080a3a44

080a21f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21fa:	4606      	mov	r6, r0
 80a21fc:	460d      	mov	r5, r1
 80a21fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2200:	2400      	movs	r4, #0
  while (size--) {
 80a2202:	42bd      	cmp	r5, r7
 80a2204:	d00c      	beq.n	80a2220 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2206:	6833      	ldr	r3, [r6, #0]
 80a2208:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a220c:	689b      	ldr	r3, [r3, #8]
 80a220e:	4630      	mov	r0, r6
 80a2210:	4798      	blx	r3
     if (chunk>=0)
 80a2212:	2800      	cmp	r0, #0
 80a2214:	db01      	blt.n	80a221a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2216:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2218:	e7f3      	b.n	80a2202 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a221a:	2c00      	cmp	r4, #0
 80a221c:	bf08      	it	eq
 80a221e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2220:	4620      	mov	r0, r4
 80a2222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2224 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2224:	b570      	push	{r4, r5, r6, lr}
 80a2226:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2228:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a222a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a222c:	b149      	cbz	r1, 80a2242 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a222e:	f001 fa78 	bl	80a3722 <strlen>
 80a2232:	682b      	ldr	r3, [r5, #0]
 80a2234:	4602      	mov	r2, r0
 80a2236:	4621      	mov	r1, r4
 80a2238:	4628      	mov	r0, r5
    }
 80a223a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a223e:	68db      	ldr	r3, [r3, #12]
 80a2240:	4718      	bx	r3
    }
 80a2242:	bd70      	pop	{r4, r5, r6, pc}

080a2244 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2244:	6803      	ldr	r3, [r0, #0]
 80a2246:	689b      	ldr	r3, [r3, #8]
 80a2248:	4718      	bx	r3

080a224a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a224a:	2a01      	cmp	r2, #1
 80a224c:	bf98      	it	ls
 80a224e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2250:	b530      	push	{r4, r5, lr}
 80a2252:	460b      	mov	r3, r1
 80a2254:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2256:	2100      	movs	r1, #0
 80a2258:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a225c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2260:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2264:	fb05 3312 	mls	r3, r5, r2, r3
 80a2268:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a226a:	2b09      	cmp	r3, #9
 80a226c:	bf94      	ite	ls
 80a226e:	3330      	addls	r3, #48	; 0x30
 80a2270:	3337      	addhi	r3, #55	; 0x37
 80a2272:	b2db      	uxtb	r3, r3
 80a2274:	4621      	mov	r1, r4
 80a2276:	f804 3901 	strb.w	r3, [r4], #-1
 80a227a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a227c:	2d00      	cmp	r5, #0
 80a227e:	d1ef      	bne.n	80a2260 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2280:	f7ff ffd0 	bl	80a2224 <_ZN5Print5writeEPKc>
}
 80a2284:	b00b      	add	sp, #44	; 0x2c
 80a2286:	bd30      	pop	{r4, r5, pc}

080a2288 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2288:	2300      	movs	r3, #0
 80a228a:	461a      	mov	r2, r3
 80a228c:	4619      	mov	r1, r3
 80a228e:	6840      	ldr	r0, [r0, #4]
 80a2290:	f7ff ba94 	b.w	80a17bc <network_on>

080a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2294:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a2296:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2298:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a229a:	b17c      	cbz	r4, 80a22bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a229c:	6863      	ldr	r3, [r4, #4]
 80a229e:	3b01      	subs	r3, #1
 80a22a0:	6063      	str	r3, [r4, #4]
 80a22a2:	b95b      	cbnz	r3, 80a22bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a22a4:	6823      	ldr	r3, [r4, #0]
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	689b      	ldr	r3, [r3, #8]
 80a22aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a22ac:	68a3      	ldr	r3, [r4, #8]
 80a22ae:	3b01      	subs	r3, #1
 80a22b0:	60a3      	str	r3, [r4, #8]
 80a22b2:	b91b      	cbnz	r3, 80a22bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a22b4:	6823      	ldr	r3, [r4, #0]
 80a22b6:	4620      	mov	r0, r4
 80a22b8:	68db      	ldr	r3, [r3, #12]
 80a22ba:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a22bc:	4628      	mov	r0, r5
 80a22be:	bd38      	pop	{r3, r4, r5, pc}

080a22c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a22c0:	680b      	ldr	r3, [r1, #0]
 80a22c2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a22c4:	b113      	cbz	r3, 80a22cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a22c6:	685a      	ldr	r2, [r3, #4]
 80a22c8:	3201      	adds	r2, #1
 80a22ca:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a22cc:	4770      	bx	lr
	...

080a22d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a22d0:	4a01      	ldr	r2, [pc, #4]	; (80a22d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a22d2:	4b02      	ldr	r3, [pc, #8]	; (80a22dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a22d4:	601a      	str	r2, [r3, #0]
 80a22d6:	4770      	bx	lr
 80a22d8:	080a402f 	.word	0x080a402f
 80a22dc:	20000150 	.word	0x20000150

080a22e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a22e0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a22e2:	2000      	movs	r0, #0
 80a22e4:	f7ff faba 	bl	80a185c <spark_sync_time_pending>
 80a22e8:	b128      	cbz	r0, 80a22f6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a22ea:	f7ff faa7 	bl	80a183c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a22ee:	f080 0001 	eor.w	r0, r0, #1
 80a22f2:	b2c0      	uxtb	r0, r0
 80a22f4:	bd08      	pop	{r3, pc}
 80a22f6:	2001      	movs	r0, #1
    }
 80a22f8:	bd08      	pop	{r3, pc}

080a22fa <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a22fa:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a22fc:	2000      	movs	r0, #0
 80a22fe:	f7ff f901 	bl	80a1504 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2302:	4604      	mov	r4, r0
 80a2304:	b968      	cbnz	r0, 80a2322 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2306:	f7ff f9f5 	bl	80a16f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a230a:	2801      	cmp	r0, #1
 80a230c:	d10b      	bne.n	80a2326 <_ZN9TimeClass7isValidEv+0x2c>
 80a230e:	4620      	mov	r0, r4
 80a2310:	f7ff fa10 	bl	80a1734 <system_thread_get_state>
 80a2314:	b938      	cbnz	r0, 80a2326 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2316:	f7ff ffe3 	bl	80a22e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a231a:	b930      	cbnz	r0, 80a232a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a231c:	f7ff fa86 	bl	80a182c <spark_process>
 80a2320:	e7f9      	b.n	80a2316 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2322:	2001      	movs	r0, #1
 80a2324:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2326:	2000      	movs	r0, #0
 80a2328:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a232a:	f7ff ffd9 	bl	80a22e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a232e:	2000      	movs	r0, #0
 80a2330:	f7ff f8e8 	bl	80a1504 <HAL_RTC_Time_Is_Valid>
 80a2334:	3000      	adds	r0, #0
 80a2336:	bf18      	it	ne
 80a2338:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a233a:	bd10      	pop	{r4, pc}

080a233c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a233c:	b508      	push	{r3, lr}
    (void)isValid();
 80a233e:	f7ff ffdc 	bl	80a22fa <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2346:	f7ff b8d5 	b.w	80a14f4 <HAL_RTC_Get_UnixTime>
	...

080a234c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a234c:	4b02      	ldr	r3, [pc, #8]	; (80a2358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a234e:	681a      	ldr	r2, [r3, #0]
 80a2350:	4b02      	ldr	r3, [pc, #8]	; (80a235c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2352:	601a      	str	r2, [r3, #0]
 80a2354:	4770      	bx	lr
 80a2356:	bf00      	nop
 80a2358:	20000000 	.word	0x20000000
 80a235c:	20000154 	.word	0x20000154

080a2360 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2360:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2362:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2364:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2366:	b113      	cbz	r3, 80a236e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2368:	2203      	movs	r2, #3
 80a236a:	4601      	mov	r1, r0
 80a236c:	4798      	blx	r3
    }
 80a236e:	4620      	mov	r0, r4
 80a2370:	bd10      	pop	{r4, pc}

080a2372 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2372:	b510      	push	{r4, lr}
 80a2374:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2376:	f7ff fff3 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
 80a237a:	4620      	mov	r0, r4
 80a237c:	bd10      	pop	{r4, pc}

080a237e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a237e:	b513      	push	{r0, r1, r4, lr}
 80a2380:	460b      	mov	r3, r1
 80a2382:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2384:	c803      	ldmia	r0, {r0, r1}
 80a2386:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a238a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a238e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2392:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a2396:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a239a:	b002      	add	sp, #8
 80a239c:	bd10      	pop	{r4, pc}
	...

080a23a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a23a0:	4803      	ldr	r0, [pc, #12]	; (80a23b0 <_GLOBAL__sub_I_RGB+0x10>)
 80a23a2:	2300      	movs	r3, #0
 80a23a4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a23a6:	4a03      	ldr	r2, [pc, #12]	; (80a23b4 <_GLOBAL__sub_I_RGB+0x14>)
 80a23a8:	4903      	ldr	r1, [pc, #12]	; (80a23b8 <_GLOBAL__sub_I_RGB+0x18>)
 80a23aa:	f000 bf7d 	b.w	80a32a8 <__aeabi_atexit>
 80a23ae:	bf00      	nop
 80a23b0:	20000158 	.word	0x20000158
 80a23b4:	2000006c 	.word	0x2000006c
 80a23b8:	080a2373 	.word	0x080a2373

080a23bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a23bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a23be:	4b14      	ldr	r3, [pc, #80]	; (80a2410 <serialEventRun+0x54>)
 80a23c0:	b133      	cbz	r3, 80a23d0 <serialEventRun+0x14>
 80a23c2:	f000 fc2b 	bl	80a2c1c <_Z16_fetch_usbserialv>
 80a23c6:	6803      	ldr	r3, [r0, #0]
 80a23c8:	691b      	ldr	r3, [r3, #16]
 80a23ca:	4798      	blx	r3
 80a23cc:	2800      	cmp	r0, #0
 80a23ce:	dc16      	bgt.n	80a23fe <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a23d0:	4b10      	ldr	r3, [pc, #64]	; (80a2414 <serialEventRun+0x58>)
 80a23d2:	b133      	cbz	r3, 80a23e2 <serialEventRun+0x26>
 80a23d4:	f000 fcdc 	bl	80a2d90 <_Z22__fetch_global_Serial1v>
 80a23d8:	6803      	ldr	r3, [r0, #0]
 80a23da:	691b      	ldr	r3, [r3, #16]
 80a23dc:	4798      	blx	r3
 80a23de:	2800      	cmp	r0, #0
 80a23e0:	dc10      	bgt.n	80a2404 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a23e2:	4b0d      	ldr	r3, [pc, #52]	; (80a2418 <serialEventRun+0x5c>)
 80a23e4:	b10b      	cbz	r3, 80a23ea <serialEventRun+0x2e>
 80a23e6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a23ea:	4b0c      	ldr	r3, [pc, #48]	; (80a241c <serialEventRun+0x60>)
 80a23ec:	b17b      	cbz	r3, 80a240e <serialEventRun+0x52>
 80a23ee:	f000 fc51 	bl	80a2c94 <_Z17_fetch_usbserial1v>
 80a23f2:	6803      	ldr	r3, [r0, #0]
 80a23f4:	691b      	ldr	r3, [r3, #16]
 80a23f6:	4798      	blx	r3
 80a23f8:	2800      	cmp	r0, #0
 80a23fa:	dc06      	bgt.n	80a240a <serialEventRun+0x4e>
 80a23fc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a23fe:	f3af 8000 	nop.w
 80a2402:	e7e5      	b.n	80a23d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2404:	f3af 8000 	nop.w
 80a2408:	e7eb      	b.n	80a23e2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a240a:	f3af 8000 	nop.w
 80a240e:	bd08      	pop	{r3, pc}
	...

080a2420 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2420:	b508      	push	{r3, lr}
	serialEventRun();
 80a2422:	f7ff ffcb 	bl	80a23bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2426:	f7ff f85d 	bl	80a14e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a242a:	4b01      	ldr	r3, [pc, #4]	; (80a2430 <_post_loop+0x10>)
 80a242c:	6018      	str	r0, [r3, #0]
 80a242e:	bd08      	pop	{r3, pc}
 80a2430:	200005e0 	.word	0x200005e0

080a2434 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2434:	4802      	ldr	r0, [pc, #8]	; (80a2440 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2436:	4a03      	ldr	r2, [pc, #12]	; (80a2444 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2438:	4903      	ldr	r1, [pc, #12]	; (80a2448 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a243a:	1a12      	subs	r2, r2, r0
 80a243c:	f001 b898 	b.w	80a3570 <memcpy>
 80a2440:	40024000 	.word	0x40024000
 80a2444:	40024004 	.word	0x40024004
 80a2448:	080a4430 	.word	0x080a4430

080a244c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a244c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a244e:	2300      	movs	r3, #0
 80a2450:	9300      	str	r3, [sp, #0]
 80a2452:	461a      	mov	r2, r3
 80a2454:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2458:	f7ff f97e 	bl	80a1758 <system_ctrl_set_result>
}
 80a245c:	b003      	add	sp, #12
 80a245e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2464 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2464:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2466:	8843      	ldrh	r3, [r0, #2]
 80a2468:	2b0a      	cmp	r3, #10
 80a246a:	d008      	beq.n	80a247e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a246c:	2b50      	cmp	r3, #80	; 0x50
 80a246e:	d109      	bne.n	80a2484 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2470:	4b09      	ldr	r3, [pc, #36]	; (80a2498 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2472:	681b      	ldr	r3, [r3, #0]
 80a2474:	b13b      	cbz	r3, 80a2486 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2476:	b003      	add	sp, #12
 80a2478:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a247c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a247e:	f7ff ffe5 	bl	80a244c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2482:	e006      	b.n	80a2492 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2484:	2300      	movs	r3, #0
 80a2486:	9300      	str	r3, [sp, #0]
 80a2488:	461a      	mov	r2, r3
 80a248a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a248e:	f7ff f963 	bl	80a1758 <system_ctrl_set_result>
        break;
    }
}
 80a2492:	b003      	add	sp, #12
 80a2494:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2498:	20000168 	.word	0x20000168

080a249c <module_user_init_hook>:

void module_user_init_hook()
{
 80a249c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a249e:	4c10      	ldr	r4, [pc, #64]	; (80a24e0 <module_user_init_hook+0x44>)
 80a24a0:	4d10      	ldr	r5, [pc, #64]	; (80a24e4 <module_user_init_hook+0x48>)
 80a24a2:	6823      	ldr	r3, [r4, #0]
 80a24a4:	42ab      	cmp	r3, r5
 80a24a6:	4b10      	ldr	r3, [pc, #64]	; (80a24e8 <module_user_init_hook+0x4c>)
 80a24a8:	bf0c      	ite	eq
 80a24aa:	2201      	moveq	r2, #1
 80a24ac:	2200      	movne	r2, #0
 80a24ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a24b0:	d002      	beq.n	80a24b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a24b2:	f7ff ffbf 	bl	80a2434 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a24b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a24b8:	f7ff f804 	bl	80a14c4 <HAL_RNG_GetRandomNumber>
 80a24bc:	4604      	mov	r4, r0
    srand(seed);
 80a24be:	f001 f885 	bl	80a35cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a24c2:	4b0a      	ldr	r3, [pc, #40]	; (80a24ec <module_user_init_hook+0x50>)
 80a24c4:	b113      	cbz	r3, 80a24cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a24c6:	4620      	mov	r0, r4
 80a24c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a24cc:	2100      	movs	r1, #0
 80a24ce:	4807      	ldr	r0, [pc, #28]	; (80a24ec <module_user_init_hook+0x50>)
 80a24d0:	f7ff f9cc 	bl	80a186c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a24d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a24d8:	2100      	movs	r1, #0
 80a24da:	4805      	ldr	r0, [pc, #20]	; (80a24f0 <module_user_init_hook+0x54>)
 80a24dc:	f7ff b932 	b.w	80a1744 <system_ctrl_set_app_request_handler>
 80a24e0:	40024000 	.word	0x40024000
 80a24e4:	9a271c1e 	.word	0x9a271c1e
 80a24e8:	2000016c 	.word	0x2000016c
 80a24ec:	00000000 	.word	0x00000000
 80a24f0:	080a2465 	.word	0x080a2465

080a24f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a24f4:	4770      	bx	lr

080a24f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a24f6:	2000      	movs	r0, #0
 80a24f8:	4770      	bx	lr

080a24fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a24fa:	b510      	push	{r4, lr}
 80a24fc:	4604      	mov	r4, r0
 80a24fe:	2110      	movs	r1, #16
 80a2500:	f000 fed7 	bl	80a32b2 <_ZdlPvj>
 80a2504:	4620      	mov	r0, r4
 80a2506:	bd10      	pop	{r4, pc}

080a2508 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2508:	b508      	push	{r3, lr}
      { delete this; }
 80a250a:	b108      	cbz	r0, 80a2510 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a250c:	f7ff fff5 	bl	80a24fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2510:	bd08      	pop	{r3, pc}

080a2512 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2512:	2200      	movs	r2, #0
 80a2514:	6002      	str	r2, [r0, #0]
 80a2516:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a251a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a251c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a251e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a2522:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2524:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2526:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2528:	680c      	ldr	r4, [r1, #0]
 80a252a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a252c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a252e:	bd10      	pop	{r4, pc}

080a2530 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2530:	b510      	push	{r4, lr}
 80a2532:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2534:	6800      	ldr	r0, [r0, #0]
 80a2536:	f7ff f9a9 	bl	80a188c <free>
}
 80a253a:	4620      	mov	r0, r4
 80a253c:	bd10      	pop	{r4, pc}

080a253e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a253e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2540:	68c4      	ldr	r4, [r0, #12]
 80a2542:	b1f4      	cbz	r4, 80a2582 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2544:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2546:	2b02      	cmp	r3, #2
 80a2548:	d103      	bne.n	80a2552 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a254a:	f104 000c 	add.w	r0, r4, #12
 80a254e:	f7ff ffef 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2552:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2554:	b135      	cbz	r5, 80a2564 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2556:	4628      	mov	r0, r5
 80a2558:	f7ff ff02 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
 80a255c:	2110      	movs	r1, #16
 80a255e:	4628      	mov	r0, r5
 80a2560:	f000 fea7 	bl	80a32b2 <_ZdlPvj>
 80a2564:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2566:	b135      	cbz	r5, 80a2576 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2568:	4628      	mov	r0, r5
 80a256a:	f7ff fef9 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
 80a256e:	2110      	movs	r1, #16
 80a2570:	4628      	mov	r0, r5
 80a2572:	f000 fe9e 	bl	80a32b2 <_ZdlPvj>
 80a2576:	4620      	mov	r0, r4
 80a2578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a257c:	2114      	movs	r1, #20
 80a257e:	f000 be98 	b.w	80a32b2 <_ZdlPvj>
 80a2582:	bd38      	pop	{r3, r4, r5, pc}

080a2584 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2584:	b513      	push	{r0, r1, r4, lr}
 80a2586:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2588:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a258c:	2300      	movs	r3, #0
 80a258e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2590:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2592:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2594:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2596:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2598:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a259a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a259c:	f7ff fe7a 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a25a0:	4620      	mov	r0, r4
 80a25a2:	b002      	add	sp, #8
 80a25a4:	bd10      	pop	{r4, pc}

080a25a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a25a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a25a8:	460c      	mov	r4, r1
 80a25aa:	4606      	mov	r6, r0
 80a25ac:	460f      	mov	r7, r1
 80a25ae:	f854 3b04 	ldr.w	r3, [r4], #4
 80a25b2:	ad02      	add	r5, sp, #8
 80a25b4:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a25b8:	4621      	mov	r1, r4
 80a25ba:	a801      	add	r0, sp, #4
 80a25bc:	f7ff fe80 	bl	80a22c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a25c0:	4629      	mov	r1, r5
 80a25c2:	4630      	mov	r0, r6
 80a25c4:	f7ff ffde 	bl	80a2584 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a25c8:	a801      	add	r0, sp, #4
 80a25ca:	f7ff fe63 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a25ce:	4620      	mov	r0, r4
 80a25d0:	f7ff fe60 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a25d4:	4638      	mov	r0, r7
 80a25d6:	2108      	movs	r1, #8
 80a25d8:	f000 fe6b 	bl	80a32b2 <_ZdlPvj>
        return p;
    }
 80a25dc:	4630      	mov	r0, r6
 80a25de:	b003      	add	sp, #12
 80a25e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a25e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a25e4:	b538      	push	{r3, r4, r5, lr}
 80a25e6:	2300      	movs	r3, #0
 80a25e8:	4604      	mov	r4, r0
 80a25ea:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a25ec:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a25ee:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a25f0:	f7fd fd53 	bl	80a009a <_Znwj>
 80a25f4:	b128      	cbz	r0, 80a2602 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a25f6:	2301      	movs	r3, #1
 80a25f8:	6043      	str	r3, [r0, #4]
 80a25fa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a25fc:	4b02      	ldr	r3, [pc, #8]	; (80a2608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a25fe:	60c5      	str	r5, [r0, #12]
 80a2600:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2602:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2604:	4620      	mov	r0, r4
 80a2606:	bd38      	pop	{r3, r4, r5, pc}
 80a2608:	080a40c8 	.word	0x080a40c8

080a260c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a260c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a260e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2610:	b90a      	cbnz	r2, 80a2616 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2612:	f000 fe50 	bl	80a32b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2616:	68c3      	ldr	r3, [r0, #12]
    }
 80a2618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a261c:	4718      	bx	r3

080a261e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a261e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2620:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2622:	f100 0110 	add.w	r1, r0, #16
 80a2626:	f7ff fff1 	bl	80a260c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a262a:	bd08      	pop	{r3, pc}

080a262c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a262c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a262e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2630:	b90a      	cbnz	r2, 80a2636 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2632:	f000 fe40 	bl	80a32b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2636:	68c3      	ldr	r3, [r0, #12]
    }
 80a2638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a263c:	4718      	bx	r3

080a263e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a263e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2640:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2642:	f100 0110 	add.w	r1, r0, #16
 80a2646:	f7ff fff1 	bl	80a262c <_ZNKSt8functionIFvRKbEEclES1_>
 80a264a:	bd08      	pop	{r3, pc}

080a264c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a264c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a264e:	2300      	movs	r3, #0
 80a2650:	6083      	str	r3, [r0, #8]
 80a2652:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2654:	4604      	mov	r4, r0
 80a2656:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2658:	b12b      	cbz	r3, 80a2666 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a265a:	2202      	movs	r2, #2
 80a265c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a265e:	68eb      	ldr	r3, [r5, #12]
 80a2660:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2662:	68ab      	ldr	r3, [r5, #8]
 80a2664:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2666:	4620      	mov	r0, r4
 80a2668:	bd38      	pop	{r3, r4, r5, pc}
	...

080a266c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a266e:	b089      	sub	sp, #36	; 0x24
 80a2670:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2672:	4668      	mov	r0, sp
 80a2674:	f7ff ff4d 	bl	80a2512 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2678:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a267c:	2300      	movs	r3, #0
 80a267e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2682:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2686:	2b00      	cmp	r3, #0
 80a2688:	d103      	bne.n	80a2692 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a268a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a268e:	2900      	cmp	r1, #0
 80a2690:	d1f7      	bne.n	80a2682 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2692:	d002      	beq.n	80a269a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2694:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2698:	e063      	b.n	80a2762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a269a:	f114 050c 	adds.w	r5, r4, #12
 80a269e:	d003      	beq.n	80a26a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a26a0:	4669      	mov	r1, sp
 80a26a2:	4628      	mov	r0, r5
 80a26a4:	f7ff ff35 	bl	80a2512 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a26a8:	f3bf 8f5f 	dmb	sy
 80a26ac:	2301      	movs	r3, #1
 80a26ae:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a26b0:	f3bf 8f5f 	dmb	sy
 80a26b4:	f104 0308 	add.w	r3, r4, #8
 80a26b8:	2000      	movs	r0, #0
 80a26ba:	e853 6f00 	ldrex	r6, [r3]
 80a26be:	e843 0200 	strex	r2, r0, [r3]
 80a26c2:	2a00      	cmp	r2, #0
 80a26c4:	d1f9      	bne.n	80a26ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a26c6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a26ca:	2e00      	cmp	r6, #0
 80a26cc:	d049      	beq.n	80a2762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a26ce:	f7ff f821 	bl	80a1714 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a26d2:	b120      	cbz	r0, 80a26de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a26d4:	4629      	mov	r1, r5
 80a26d6:	4630      	mov	r0, r6
 80a26d8:	f7ff ff98 	bl	80a260c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a26dc:	e03a      	b.n	80a2754 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a26de:	4631      	mov	r1, r6
 80a26e0:	a802      	add	r0, sp, #8
 80a26e2:	f7ff ffb3 	bl	80a264c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a26e6:	68e0      	ldr	r0, [r4, #12]
 80a26e8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a26ec:	b108      	cbz	r0, 80a26f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a26ee:	f000 fffd 	bl	80a36ec <strdup>
 80a26f2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a26f4:	2010      	movs	r0, #16
 80a26f6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a26fa:	f7fd fcce 	bl	80a009a <_Znwj>
 80a26fe:	4605      	mov	r5, r0
 80a2700:	b1e8      	cbz	r0, 80a273e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2702:	2700      	movs	r7, #0
 80a2704:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2706:	2018      	movs	r0, #24
 80a2708:	f7fd fcc7 	bl	80a009a <_Znwj>
 80a270c:	4604      	mov	r4, r0
 80a270e:	b188      	cbz	r0, 80a2734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2710:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2712:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2714:	a802      	add	r0, sp, #8
 80a2716:	f7ff fe32 	bl	80a237e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a271a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a271c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a271e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2720:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2722:	9204      	str	r2, [sp, #16]
 80a2724:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2726:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2728:	60e3      	str	r3, [r4, #12]
 80a272a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a272e:	9205      	str	r2, [sp, #20]
 80a2730:	f7ff feef 	bl	80a2512 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2734:	4b0d      	ldr	r3, [pc, #52]	; (80a276c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2736:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2738:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a273a:	4b0d      	ldr	r3, [pc, #52]	; (80a2770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a273c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a273e:	a806      	add	r0, sp, #24
 80a2740:	f7ff fef6 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2744:	a802      	add	r0, sp, #8
 80a2746:	f7ff fe0b 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a274a:	2200      	movs	r2, #0
 80a274c:	4629      	mov	r1, r5
 80a274e:	4809      	ldr	r0, [pc, #36]	; (80a2774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2750:	f7fe ffe8 	bl	80a1724 <application_thread_invoke>
 80a2754:	4630      	mov	r0, r6
 80a2756:	f7ff fe03 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a275a:	2110      	movs	r1, #16
 80a275c:	4630      	mov	r0, r6
 80a275e:	f000 fda8 	bl	80a32b2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2762:	4668      	mov	r0, sp
 80a2764:	f7ff fee4 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
    }
 80a2768:	b009      	add	sp, #36	; 0x24
 80a276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a276c:	080a261f 	.word	0x080a261f
 80a2770:	080a2895 	.word	0x080a2895
 80a2774:	080a2ddd 	.word	0x080a2ddd

080a2778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a277c:	b08b      	sub	sp, #44	; 0x2c
 80a277e:	4606      	mov	r6, r0
 80a2780:	460f      	mov	r7, r1
 80a2782:	4690      	mov	r8, r2
 80a2784:	4699      	mov	r9, r3
 80a2786:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a278a:	f7ff f857 	bl	80a183c <spark_cloud_flag_connected>
 80a278e:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a2790:	4683      	mov	fp, r0
 80a2792:	bb30      	cbnz	r0, 80a27e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2794:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2798:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a279a:	a905      	add	r1, sp, #20
 80a279c:	4628      	mov	r0, r5
 80a279e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a27a2:	f7ff feb6 	bl	80a2512 <_ZN8particle5ErrorC1EOS0_>
 80a27a6:	2014      	movs	r0, #20
 80a27a8:	f7fd fc77 	bl	80a009a <_Znwj>
 80a27ac:	4604      	mov	r4, r0
 80a27ae:	b158      	cbz	r0, 80a27c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a27b0:	2302      	movs	r3, #2
 80a27b2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a27b4:	2301      	movs	r3, #1
 80a27b6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a27b8:	f8c0 b004 	str.w	fp, [r0, #4]
 80a27bc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a27c0:	4629      	mov	r1, r5
 80a27c2:	300c      	adds	r0, #12
 80a27c4:	f7ff fea5 	bl	80a2512 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a27c8:	4630      	mov	r0, r6
 80a27ca:	4621      	mov	r1, r4
 80a27cc:	f840 4b04 	str.w	r4, [r0], #4
 80a27d0:	f7ff ff08 	bl	80a25e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a27d4:	4628      	mov	r0, r5
 80a27d6:	f7ff feab 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a27da:	a805      	add	r0, sp, #20
 80a27dc:	f7ff fea8 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
 80a27e0:	e052      	b.n	80a2888 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a27e2:	2400      	movs	r4, #0
 80a27e4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a27e6:	2014      	movs	r0, #20
 80a27e8:	606c      	str	r4, [r5, #4]
 80a27ea:	60ac      	str	r4, [r5, #8]
 80a27ec:	9307      	str	r3, [sp, #28]
 80a27ee:	f7fd fc54 	bl	80a009a <_Znwj>
 80a27f2:	4601      	mov	r1, r0
 80a27f4:	b118      	cbz	r0, 80a27fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a27f6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a27f8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a27fa:	6044      	str	r4, [r0, #4]
 80a27fc:	6084      	str	r4, [r0, #8]
 80a27fe:	a804      	add	r0, sp, #16
 80a2800:	9103      	str	r1, [sp, #12]
 80a2802:	f7ff feef 	bl	80a25e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2806:	4b22      	ldr	r3, [pc, #136]	; (80a2890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2808:	2008      	movs	r0, #8
 80a280a:	9308      	str	r3, [sp, #32]
 80a280c:	f7fd fc45 	bl	80a009a <_Znwj>
 80a2810:	4604      	mov	r4, r0
 80a2812:	b128      	cbz	r0, 80a2820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2814:	9b03      	ldr	r3, [sp, #12]
 80a2816:	a904      	add	r1, sp, #16
 80a2818:	f840 3b04 	str.w	r3, [r0], #4
 80a281c:	f7ff fd50 	bl	80a22c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2820:	9500      	str	r5, [sp, #0]
 80a2822:	fa5f f38a 	uxtb.w	r3, sl
 80a2826:	464a      	mov	r2, r9
 80a2828:	4641      	mov	r1, r8
 80a282a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a282c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a282e:	f7ff f80d 	bl	80a184c <spark_send_event>
 80a2832:	b920      	cbnz	r0, 80a283e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2834:	9b03      	ldr	r3, [sp, #12]
 80a2836:	785b      	ldrb	r3, [r3, #1]
 80a2838:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a283c:	b183      	cbz	r3, 80a2860 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a283e:	9b03      	ldr	r3, [sp, #12]
 80a2840:	a904      	add	r1, sp, #16
 80a2842:	a806      	add	r0, sp, #24
 80a2844:	9305      	str	r3, [sp, #20]
 80a2846:	f7ff fd3b 	bl	80a22c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a284a:	a905      	add	r1, sp, #20
 80a284c:	4630      	mov	r0, r6
 80a284e:	f7ff fe99 	bl	80a2584 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2852:	a806      	add	r0, sp, #24
 80a2854:	f7ff fd1e 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2858:	a804      	add	r0, sp, #16
 80a285a:	f7ff fd1b 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a285e:	e013      	b.n	80a2888 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2860:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2864:	a905      	add	r1, sp, #20
 80a2866:	a803      	add	r0, sp, #12
 80a2868:	9205      	str	r2, [sp, #20]
 80a286a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a286e:	f7ff fefd 	bl	80a266c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2872:	a805      	add	r0, sp, #20
 80a2874:	f7ff fe5c 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2878:	a805      	add	r0, sp, #20
 80a287a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a287c:	f7ff fe93 	bl	80a25a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2880:	a806      	add	r0, sp, #24
 80a2882:	f7ff fd07 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2886:	e7da      	b.n	80a283e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a2888:	4630      	mov	r0, r6
 80a288a:	b00b      	add	sp, #44	; 0x2c
 80a288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2890:	080a2a05 	.word	0x080a2a05

080a2894 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2894:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2898:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a289a:	d006      	beq.n	80a28aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a289c:	2a03      	cmp	r2, #3
 80a289e:	d017      	beq.n	80a28d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a28a0:	2a01      	cmp	r2, #1
 80a28a2:	d122      	bne.n	80a28ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a28a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a28a6:	6003      	str	r3, [r0, #0]
	      break;
 80a28a8:	e01f      	b.n	80a28ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a28aa:	2018      	movs	r0, #24
 80a28ac:	680e      	ldr	r6, [r1, #0]
 80a28ae:	f7fd fbf4 	bl	80a009a <_Znwj>
 80a28b2:	4605      	mov	r5, r0
 80a28b4:	b150      	cbz	r0, 80a28cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a28b6:	4631      	mov	r1, r6
 80a28b8:	f7ff fec8 	bl	80a264c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a28bc:	6930      	ldr	r0, [r6, #16]
 80a28be:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a28c2:	b108      	cbz	r0, 80a28c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a28c4:	f000 ff12 	bl	80a36ec <strdup>
 80a28c8:	6128      	str	r0, [r5, #16]
 80a28ca:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a28cc:	6025      	str	r5, [r4, #0]
 80a28ce:	e00c      	b.n	80a28ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a28d0:	6804      	ldr	r4, [r0, #0]
 80a28d2:	b154      	cbz	r4, 80a28ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a28d4:	f104 0010 	add.w	r0, r4, #16
 80a28d8:	f7ff fe2a 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a28dc:	4620      	mov	r0, r4
 80a28de:	f7ff fd3f 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a28e2:	2118      	movs	r1, #24
 80a28e4:	4620      	mov	r0, r4
 80a28e6:	f000 fce4 	bl	80a32b2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a28ea:	2000      	movs	r0, #0
 80a28ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28ee <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a28ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a28f0:	2300      	movs	r3, #0
 80a28f2:	6083      	str	r3, [r0, #8]
 80a28f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a28f6:	4604      	mov	r4, r0
 80a28f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a28fa:	b12b      	cbz	r3, 80a2908 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a28fc:	2202      	movs	r2, #2
 80a28fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2900:	68eb      	ldr	r3, [r5, #12]
 80a2902:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2904:	68ab      	ldr	r3, [r5, #8]
 80a2906:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2908:	4620      	mov	r0, r4
 80a290a:	bd38      	pop	{r3, r4, r5, pc}

080a290c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a290c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a290e:	b570      	push	{r4, r5, r6, lr}
 80a2910:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2912:	d006      	beq.n	80a2922 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2914:	2a03      	cmp	r2, #3
 80a2916:	d011      	beq.n	80a293c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2918:	2a01      	cmp	r2, #1
 80a291a:	d118      	bne.n	80a294e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a291c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a291e:	6003      	str	r3, [r0, #0]
	      break;
 80a2920:	e015      	b.n	80a294e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2922:	2014      	movs	r0, #20
 80a2924:	680e      	ldr	r6, [r1, #0]
 80a2926:	f7fd fbb8 	bl	80a009a <_Znwj>
 80a292a:	4605      	mov	r5, r0
 80a292c:	b120      	cbz	r0, 80a2938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a292e:	4631      	mov	r1, r6
 80a2930:	f7ff ffdd 	bl	80a28ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2934:	7c33      	ldrb	r3, [r6, #16]
 80a2936:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2938:	6025      	str	r5, [r4, #0]
 80a293a:	e008      	b.n	80a294e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a293c:	6804      	ldr	r4, [r0, #0]
 80a293e:	b134      	cbz	r4, 80a294e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2940:	4620      	mov	r0, r4
 80a2942:	f7ff fd0d 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2946:	2114      	movs	r1, #20
 80a2948:	4620      	mov	r0, r4
 80a294a:	f000 fcb2 	bl	80a32b2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a294e:	2000      	movs	r0, #0
 80a2950:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2954 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2954:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2956:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2958:	f3bf 8f5f 	dmb	sy
 80a295c:	b087      	sub	sp, #28
 80a295e:	2300      	movs	r3, #0
 80a2960:	e850 6f00 	ldrex	r6, [r0]
 80a2964:	e840 3200 	strex	r2, r3, [r0]
 80a2968:	2a00      	cmp	r2, #0
 80a296a:	d1f9      	bne.n	80a2960 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a296c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2970:	2e00      	cmp	r6, #0
 80a2972:	d03f      	beq.n	80a29f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2974:	4618      	mov	r0, r3
 80a2976:	f7fe fecd 	bl	80a1714 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a297a:	4607      	mov	r7, r0
 80a297c:	b120      	cbz	r0, 80a2988 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a297e:	4621      	mov	r1, r4
 80a2980:	4630      	mov	r0, r6
 80a2982:	f7ff fe53 	bl	80a262c <_ZNKSt8functionIFvRKbEEclES1_>
 80a2986:	e02e      	b.n	80a29e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2988:	4631      	mov	r1, r6
 80a298a:	a801      	add	r0, sp, #4
 80a298c:	f7ff ffaf 	bl	80a28ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2990:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2992:	2010      	movs	r0, #16
 80a2994:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2998:	f7fd fb7f 	bl	80a009a <_Znwj>
 80a299c:	4605      	mov	r5, r0
 80a299e:	b1d0      	cbz	r0, 80a29d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a29a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a29a2:	2014      	movs	r0, #20
 80a29a4:	f7fd fb79 	bl	80a009a <_Znwj>
 80a29a8:	4604      	mov	r4, r0
 80a29aa:	b178      	cbz	r0, 80a29cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a29ac:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a29ae:	4601      	mov	r1, r0
 80a29b0:	a801      	add	r0, sp, #4
 80a29b2:	f7ff fce4 	bl	80a237e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a29b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a29b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a29ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a29bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a29be:	9203      	str	r2, [sp, #12]
 80a29c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a29c2:	60e3      	str	r3, [r4, #12]
 80a29c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a29c8:	9204      	str	r2, [sp, #16]
 80a29ca:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a29cc:	4b0a      	ldr	r3, [pc, #40]	; (80a29f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a29ce:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a29d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a29d2:	4b0a      	ldr	r3, [pc, #40]	; (80a29fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a29d4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a29d6:	a801      	add	r0, sp, #4
 80a29d8:	f7ff fcc2 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a29dc:	2200      	movs	r2, #0
 80a29de:	4629      	mov	r1, r5
 80a29e0:	4807      	ldr	r0, [pc, #28]	; (80a2a00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a29e2:	f7fe fe9f 	bl	80a1724 <application_thread_invoke>
 80a29e6:	4630      	mov	r0, r6
 80a29e8:	f7ff fcba 	bl	80a2360 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a29ec:	2110      	movs	r1, #16
 80a29ee:	4630      	mov	r0, r6
 80a29f0:	f000 fc5f 	bl	80a32b2 <_ZdlPvj>
        }
    }
 80a29f4:	b007      	add	sp, #28
 80a29f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a29f8:	080a263f 	.word	0x080a263f
 80a29fc:	080a290d 	.word	0x080a290d
 80a2a00:	080a2ddd 	.word	0x080a2ddd

080a2a04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2a04:	b530      	push	{r4, r5, lr}
 80a2a06:	4604      	mov	r4, r0
 80a2a08:	b085      	sub	sp, #20
 80a2a0a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2a0c:	4668      	mov	r0, sp
 80a2a0e:	4611      	mov	r1, r2
 80a2a10:	f7ff fdc9 	bl	80a25a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2a14:	b17c      	cbz	r4, 80a2a36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2a16:	b224      	sxth	r4, r4
 80a2a18:	4628      	mov	r0, r5
 80a2a1a:	b10d      	cbz	r5, 80a2a20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2a1c:	f000 fe66 	bl	80a36ec <strdup>
 80a2a20:	9002      	str	r0, [sp, #8]
 80a2a22:	a902      	add	r1, sp, #8
 80a2a24:	4668      	mov	r0, sp
 80a2a26:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2a2a:	f7ff fe1f 	bl	80a266c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2a2e:	a802      	add	r0, sp, #8
 80a2a30:	f7ff fd7e 	bl	80a2530 <_ZN8particle5ErrorD1Ev>
 80a2a34:	e01d      	b.n	80a2a72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2a36:	f04f 0201 	mov.w	r2, #1
 80a2a3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2a3c:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2a40:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2a44:	42a3      	cmp	r3, r4
 80a2a46:	d103      	bne.n	80a2a50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2a48:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2a4c:	2900      	cmp	r1, #0
 80a2a4e:	d1f7      	bne.n	80a2a40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2a50:	d002      	beq.n	80a2a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2a52:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2a56:	e00c      	b.n	80a2a72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2a58:	f110 010c 	adds.w	r1, r0, #12
 80a2a5c:	f04f 0301 	mov.w	r3, #1
 80a2a60:	bf18      	it	ne
 80a2a62:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2a64:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2a68:	3004      	adds	r0, #4
 80a2a6a:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2a6e:	f7ff ff71 	bl	80a2954 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2a72:	a801      	add	r0, sp, #4
 80a2a74:	f7ff fc0e 	bl	80a2294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2a78:	b005      	add	sp, #20
 80a2a7a:	bd30      	pop	{r4, r5, pc}

080a2a7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2a7c:	4770      	bx	lr

080a2a7e <_ZN9IPAddressD0Ev>:
 80a2a7e:	b510      	push	{r4, lr}
 80a2a80:	4604      	mov	r4, r0
 80a2a82:	2118      	movs	r1, #24
 80a2a84:	f000 fc15 	bl	80a32b2 <_ZdlPvj>
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	bd10      	pop	{r4, pc}

080a2a8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a8e:	460f      	mov	r7, r1
 80a2a90:	f100 0608 	add.w	r6, r0, #8
 80a2a94:	1d05      	adds	r5, r0, #4
 80a2a96:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2a98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2a9c:	220a      	movs	r2, #10
 80a2a9e:	4638      	mov	r0, r7
 80a2aa0:	f7ff fbd3 	bl	80a224a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2aa4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2aa6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2aa8:	d007      	beq.n	80a2aba <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2aaa:	2c00      	cmp	r4, #0
 80a2aac:	d0f4      	beq.n	80a2a98 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2aae:	212e      	movs	r1, #46	; 0x2e
 80a2ab0:	4638      	mov	r0, r7
 80a2ab2:	f7ff fbc7 	bl	80a2244 <_ZN5Print5printEc>
 80a2ab6:	4404      	add	r4, r0
 80a2ab8:	e7ee      	b.n	80a2a98 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2aba:	4620      	mov	r0, r4
 80a2abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2ac0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2ac0:	b510      	push	{r4, lr}
 80a2ac2:	4604      	mov	r4, r0
 80a2ac4:	4b04      	ldr	r3, [pc, #16]	; (80a2ad8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2ac6:	2211      	movs	r2, #17
 80a2ac8:	f840 3b04 	str.w	r3, [r0], #4
 80a2acc:	2100      	movs	r1, #0
 80a2ace:	f000 fd75 	bl	80a35bc <memset>
{
    clear();
}
 80a2ad2:	4620      	mov	r0, r4
 80a2ad4:	bd10      	pop	{r4, pc}
 80a2ad6:	bf00      	nop
 80a2ad8:	080a40e4 	.word	0x080a40e4

080a2adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2adc:	4603      	mov	r3, r0
 80a2ade:	4a07      	ldr	r2, [pc, #28]	; (80a2afc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2ae0:	b510      	push	{r4, lr}
 80a2ae2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2ae6:	f101 0210 	add.w	r2, r1, #16
 80a2aea:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2aee:	4291      	cmp	r1, r2
 80a2af0:	f843 4b04 	str.w	r4, [r3], #4
 80a2af4:	d1f9      	bne.n	80a2aea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2af6:	780a      	ldrb	r2, [r1, #0]
 80a2af8:	701a      	strb	r2, [r3, #0]
}
 80a2afa:	bd10      	pop	{r4, pc}
 80a2afc:	080a40e4 	.word	0x080a40e4

080a2b00 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2b00:	4a02      	ldr	r2, [pc, #8]	; (80a2b0c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2b02:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2b04:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2b06:	2204      	movs	r2, #4
 80a2b08:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2b0a:	4770      	bx	lr
 80a2b0c:	080a40e4 	.word	0x080a40e4

080a2b10 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2b10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2b12:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2b16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2b1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2b1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2b22:	2304      	movs	r3, #4
 80a2b24:	6041      	str	r1, [r0, #4]
 80a2b26:	7503      	strb	r3, [r0, #20]
 80a2b28:	bd10      	pop	{r4, pc}
	...

080a2b2c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2b2e:	4d04      	ldr	r5, [pc, #16]	; (80a2b40 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2b30:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2b32:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2b36:	9500      	str	r5, [sp, #0]
 80a2b38:	f7ff ffea 	bl	80a2b10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2b3c:	b003      	add	sp, #12
 80a2b3e:	bd30      	pop	{r4, r5, pc}
 80a2b40:	080a40e4 	.word	0x080a40e4

080a2b44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2b44:	7441      	strb	r1, [r0, #17]
 80a2b46:	4770      	bx	lr

080a2b48 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2b48:	4770      	bx	lr

080a2b4a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2b4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2b4c:	2100      	movs	r1, #0
 80a2b4e:	7c00      	ldrb	r0, [r0, #16]
 80a2b50:	f7fe fd90 	bl	80a1674 <HAL_USB_USART_Receive_Data>
}
 80a2b54:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b58:	bf28      	it	cs
 80a2b5a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2b5e:	bd08      	pop	{r3, pc}

080a2b60 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2b60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2b62:	2101      	movs	r1, #1
 80a2b64:	7c00      	ldrb	r0, [r0, #16]
 80a2b66:	f7fe fd85 	bl	80a1674 <HAL_USB_USART_Receive_Data>
}
 80a2b6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b6e:	bf28      	it	cs
 80a2b70:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2b74:	bd08      	pop	{r3, pc}

080a2b76 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2b76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2b78:	7c00      	ldrb	r0, [r0, #16]
 80a2b7a:	f7fe fd73 	bl	80a1664 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2b7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b82:	bd08      	pop	{r3, pc}

080a2b84 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2b84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2b86:	7c00      	ldrb	r0, [r0, #16]
 80a2b88:	f7fe fd64 	bl	80a1654 <HAL_USB_USART_Available_Data>
}
 80a2b8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b90:	bd08      	pop	{r3, pc}

080a2b92 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2b92:	7c00      	ldrb	r0, [r0, #16]
 80a2b94:	f7fe bd7e 	b.w	80a1694 <HAL_USB_USART_Flush_Data>

080a2b98 <_ZN9USBSerialD0Ev>:
 80a2b98:	b510      	push	{r4, lr}
 80a2b9a:	4604      	mov	r4, r0
 80a2b9c:	2114      	movs	r1, #20
 80a2b9e:	f000 fb88 	bl	80a32b2 <_ZdlPvj>
 80a2ba2:	4620      	mov	r0, r4
 80a2ba4:	bd10      	pop	{r4, pc}

080a2ba6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2ba6:	b538      	push	{r3, r4, r5, lr}
 80a2ba8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2baa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2bac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2bae:	f7fe fd59 	bl	80a1664 <HAL_USB_USART_Available_Data_For_Write>
 80a2bb2:	2800      	cmp	r0, #0
 80a2bb4:	dc01      	bgt.n	80a2bba <_ZN9USBSerial5writeEh+0x14>
 80a2bb6:	7c60      	ldrb	r0, [r4, #17]
 80a2bb8:	b128      	cbz	r0, 80a2bc6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2bba:	4629      	mov	r1, r5
 80a2bbc:	7c20      	ldrb	r0, [r4, #16]
 80a2bbe:	f7fe fd61 	bl	80a1684 <HAL_USB_USART_Send_Data>
 80a2bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2bc6:	bd38      	pop	{r3, r4, r5, pc}

080a2bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2bc8:	b510      	push	{r4, lr}
 80a2bca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2bcc:	2300      	movs	r3, #0
 80a2bce:	6063      	str	r3, [r4, #4]
 80a2bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2bd4:	60a3      	str	r3, [r4, #8]
 80a2bd6:	4b05      	ldr	r3, [pc, #20]	; (80a2bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2bd8:	4608      	mov	r0, r1
 80a2bda:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2bdc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2bde:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2be0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2be2:	4611      	mov	r1, r2
 80a2be4:	f7fe fd2e 	bl	80a1644 <HAL_USB_USART_Init>
}
 80a2be8:	4620      	mov	r0, r4
 80a2bea:	bd10      	pop	{r4, pc}
 80a2bec:	080a40f8 	.word	0x080a40f8

080a2bf0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2bf0:	b510      	push	{r4, lr}
 80a2bf2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2bf4:	2214      	movs	r2, #20
 80a2bf6:	2100      	movs	r1, #0
 80a2bf8:	f000 fce0 	bl	80a35bc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2bfc:	4b05      	ldr	r3, [pc, #20]	; (80a2c14 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2bfe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2c00:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2c02:	4b05      	ldr	r3, [pc, #20]	; (80a2c18 <_Z19acquireSerialBufferv+0x28>)
 80a2c04:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2c06:	f240 1301 	movw	r3, #257	; 0x101
 80a2c0a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2c0c:	2381      	movs	r3, #129	; 0x81
 80a2c0e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2c10:	bd10      	pop	{r4, pc}
 80a2c12:	bf00      	nop
 80a2c14:	200001f5 	.word	0x200001f5
 80a2c18:	20000174 	.word	0x20000174

080a2c1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2c1c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2c1e:	4d0e      	ldr	r5, [pc, #56]	; (80a2c58 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2c20:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2c22:	a801      	add	r0, sp, #4
 80a2c24:	f7ff ffe4 	bl	80a2bf0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2c28:	6829      	ldr	r1, [r5, #0]
 80a2c2a:	f011 0401 	ands.w	r4, r1, #1
 80a2c2e:	d110      	bne.n	80a2c52 <_Z16_fetch_usbserialv+0x36>
 80a2c30:	4628      	mov	r0, r5
 80a2c32:	f7fd fa45 	bl	80a00c0 <__cxa_guard_acquire>
 80a2c36:	b160      	cbz	r0, 80a2c52 <_Z16_fetch_usbserialv+0x36>
 80a2c38:	aa01      	add	r2, sp, #4
 80a2c3a:	4621      	mov	r1, r4
 80a2c3c:	4807      	ldr	r0, [pc, #28]	; (80a2c5c <_Z16_fetch_usbserialv+0x40>)
 80a2c3e:	f7ff ffc3 	bl	80a2bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2c42:	4628      	mov	r0, r5
 80a2c44:	f7fd fa41 	bl	80a00ca <__cxa_guard_release>
 80a2c48:	4a05      	ldr	r2, [pc, #20]	; (80a2c60 <_Z16_fetch_usbserialv+0x44>)
 80a2c4a:	4906      	ldr	r1, [pc, #24]	; (80a2c64 <_Z16_fetch_usbserialv+0x48>)
 80a2c4c:	4803      	ldr	r0, [pc, #12]	; (80a2c5c <_Z16_fetch_usbserialv+0x40>)
 80a2c4e:	f000 fb2b 	bl	80a32a8 <__aeabi_atexit>
	return _usbserial;
}
 80a2c52:	4802      	ldr	r0, [pc, #8]	; (80a2c5c <_Z16_fetch_usbserialv+0x40>)
 80a2c54:	b007      	add	sp, #28
 80a2c56:	bd30      	pop	{r4, r5, pc}
 80a2c58:	20000170 	.word	0x20000170
 80a2c5c:	200002f8 	.word	0x200002f8
 80a2c60:	2000006c 	.word	0x2000006c
 80a2c64:	080a2b49 	.word	0x080a2b49

080a2c68 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2c68:	b510      	push	{r4, lr}
 80a2c6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2c6c:	2214      	movs	r2, #20
 80a2c6e:	2100      	movs	r1, #0
 80a2c70:	f000 fca4 	bl	80a35bc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2c74:	4b05      	ldr	r3, [pc, #20]	; (80a2c8c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2c76:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2c78:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2c7a:	4b05      	ldr	r3, [pc, #20]	; (80a2c90 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2c7c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2c7e:	f240 1301 	movw	r3, #257	; 0x101
 80a2c82:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2c84:	2381      	movs	r3, #129	; 0x81
 80a2c86:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2c88:	bd10      	pop	{r4, pc}
 80a2c8a:	bf00      	nop
 80a2c8c:	200003a8 	.word	0x200003a8
 80a2c90:	20000310 	.word	0x20000310

080a2c94 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2c94:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2c96:	4c0e      	ldr	r4, [pc, #56]	; (80a2cd0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2c98:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2c9a:	a801      	add	r0, sp, #4
 80a2c9c:	f7ff ffe4 	bl	80a2c68 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2ca0:	6823      	ldr	r3, [r4, #0]
 80a2ca2:	07db      	lsls	r3, r3, #31
 80a2ca4:	d410      	bmi.n	80a2cc8 <_Z17_fetch_usbserial1v+0x34>
 80a2ca6:	4620      	mov	r0, r4
 80a2ca8:	f7fd fa0a 	bl	80a00c0 <__cxa_guard_acquire>
 80a2cac:	b160      	cbz	r0, 80a2cc8 <_Z17_fetch_usbserial1v+0x34>
 80a2cae:	aa01      	add	r2, sp, #4
 80a2cb0:	2101      	movs	r1, #1
 80a2cb2:	4808      	ldr	r0, [pc, #32]	; (80a2cd4 <_Z17_fetch_usbserial1v+0x40>)
 80a2cb4:	f7ff ff88 	bl	80a2bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2cb8:	4620      	mov	r0, r4
 80a2cba:	f7fd fa06 	bl	80a00ca <__cxa_guard_release>
 80a2cbe:	4a06      	ldr	r2, [pc, #24]	; (80a2cd8 <_Z17_fetch_usbserial1v+0x44>)
 80a2cc0:	4906      	ldr	r1, [pc, #24]	; (80a2cdc <_Z17_fetch_usbserial1v+0x48>)
 80a2cc2:	4804      	ldr	r0, [pc, #16]	; (80a2cd4 <_Z17_fetch_usbserial1v+0x40>)
 80a2cc4:	f000 faf0 	bl	80a32a8 <__aeabi_atexit>
  return _usbserial1;
}
 80a2cc8:	4802      	ldr	r0, [pc, #8]	; (80a2cd4 <_Z17_fetch_usbserial1v+0x40>)
 80a2cca:	b006      	add	sp, #24
 80a2ccc:	bd10      	pop	{r4, pc}
 80a2cce:	bf00      	nop
 80a2cd0:	2000030c 	.word	0x2000030c
 80a2cd4:	20000394 	.word	0x20000394
 80a2cd8:	2000006c 	.word	0x2000006c
 80a2cdc:	080a2b49 	.word	0x080a2b49

080a2ce0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2ce0:	4770      	bx	lr

080a2ce2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2ce2:	7441      	strb	r1, [r0, #17]
 80a2ce4:	4770      	bx	lr

080a2ce6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2ce6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2ce8:	7c00      	ldrb	r0, [r0, #16]
 80a2cea:	f7fe fc4b 	bl	80a1584 <HAL_USART_Available_Data_For_Write>
}
 80a2cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2cf2:	bd08      	pop	{r3, pc}

080a2cf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2cf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2cf6:	7c00      	ldrb	r0, [r0, #16]
 80a2cf8:	f7fe fc24 	bl	80a1544 <HAL_USART_Available_Data>
}
 80a2cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d00:	bd08      	pop	{r3, pc}

080a2d02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2d02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2d04:	7c00      	ldrb	r0, [r0, #16]
 80a2d06:	f7fe fc2d 	bl	80a1564 <HAL_USART_Peek_Data>
}
 80a2d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d0e:	bf28      	it	cs
 80a2d10:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d14:	bd08      	pop	{r3, pc}

080a2d16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2d18:	7c00      	ldrb	r0, [r0, #16]
 80a2d1a:	f7fe fc1b 	bl	80a1554 <HAL_USART_Read_Data>
}
 80a2d1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d22:	bf28      	it	cs
 80a2d24:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d28:	bd08      	pop	{r3, pc}

080a2d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2d2a:	7c00      	ldrb	r0, [r0, #16]
 80a2d2c:	f7fe bc22 	b.w	80a1574 <HAL_USART_Flush_Data>

080a2d30 <_ZN11USARTSerialD0Ev>:
 80a2d30:	b510      	push	{r4, lr}
 80a2d32:	4604      	mov	r4, r0
 80a2d34:	2114      	movs	r1, #20
 80a2d36:	f000 fabc 	bl	80a32b2 <_ZdlPvj>
 80a2d3a:	4620      	mov	r0, r4
 80a2d3c:	bd10      	pop	{r4, pc}

080a2d3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2d42:	4604      	mov	r4, r0
 80a2d44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2d46:	b925      	cbnz	r5, 80a2d52 <_ZN11USARTSerial5writeEh+0x14>
 80a2d48:	7c00      	ldrb	r0, [r0, #16]
 80a2d4a:	f7fe fc1b 	bl	80a1584 <HAL_USART_Available_Data_For_Write>
 80a2d4e:	2800      	cmp	r0, #0
 80a2d50:	dd05      	ble.n	80a2d5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d52:	4631      	mov	r1, r6
 80a2d54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2d5a:	f7fe bbeb 	b.w	80a1534 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2d5e:	4628      	mov	r0, r5
 80a2d60:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d64:	b510      	push	{r4, lr}
 80a2d66:	4604      	mov	r4, r0
 80a2d68:	4608      	mov	r0, r1
 80a2d6a:	4611      	mov	r1, r2
 80a2d6c:	2200      	movs	r2, #0
 80a2d6e:	6062      	str	r2, [r4, #4]
 80a2d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2d74:	60a2      	str	r2, [r4, #8]
 80a2d76:	4a05      	ldr	r2, [pc, #20]	; (80a2d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2d78:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2d7a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2d7c:	2201      	movs	r2, #1
 80a2d7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2d80:	461a      	mov	r2, r3
 80a2d82:	f7fe fbcf 	bl	80a1524 <HAL_USART_Init>
}
 80a2d86:	4620      	mov	r0, r4
 80a2d88:	bd10      	pop	{r4, pc}
 80a2d8a:	bf00      	nop
 80a2d8c:	080a4128 	.word	0x080a4128

080a2d90 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2d90:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2d92:	4d0c      	ldr	r5, [pc, #48]	; (80a2dc4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2d94:	6829      	ldr	r1, [r5, #0]
 80a2d96:	f011 0401 	ands.w	r4, r1, #1
 80a2d9a:	d111      	bne.n	80a2dc0 <_Z22__fetch_global_Serial1v+0x30>
 80a2d9c:	4628      	mov	r0, r5
 80a2d9e:	f7fd f98f 	bl	80a00c0 <__cxa_guard_acquire>
 80a2da2:	b168      	cbz	r0, 80a2dc0 <_Z22__fetch_global_Serial1v+0x30>
 80a2da4:	4a08      	ldr	r2, [pc, #32]	; (80a2dc8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2da6:	4621      	mov	r1, r4
 80a2da8:	4b08      	ldr	r3, [pc, #32]	; (80a2dcc <_Z22__fetch_global_Serial1v+0x3c>)
 80a2daa:	4809      	ldr	r0, [pc, #36]	; (80a2dd0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2dac:	f7ff ffda 	bl	80a2d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2db0:	4628      	mov	r0, r5
 80a2db2:	f7fd f98a 	bl	80a00ca <__cxa_guard_release>
 80a2db6:	4a07      	ldr	r2, [pc, #28]	; (80a2dd4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2db8:	4907      	ldr	r1, [pc, #28]	; (80a2dd8 <_Z22__fetch_global_Serial1v+0x48>)
 80a2dba:	4805      	ldr	r0, [pc, #20]	; (80a2dd0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2dbc:	f000 fa74 	bl	80a32a8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2dc0:	4803      	ldr	r0, [pc, #12]	; (80a2dd0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2dc2:	bd38      	pop	{r3, r4, r5, pc}
 80a2dc4:	20000544 	.word	0x20000544
 80a2dc8:	20000548 	.word	0x20000548
 80a2dcc:	200004c0 	.word	0x200004c0
 80a2dd0:	200004ac 	.word	0x200004ac
 80a2dd4:	2000006c 	.word	0x2000006c
 80a2dd8:	080a2ce1 	.word	0x080a2ce1

080a2ddc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2ddc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2dde:	6883      	ldr	r3, [r0, #8]
 80a2de0:	4604      	mov	r4, r0
 80a2de2:	b90b      	cbnz	r3, 80a2de8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2de4:	f000 fa67 	bl	80a32b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2de8:	68c3      	ldr	r3, [r0, #12]
 80a2dea:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2dec:	68a3      	ldr	r3, [r4, #8]
 80a2dee:	b11b      	cbz	r3, 80a2df8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2df0:	2203      	movs	r2, #3
 80a2df2:	4621      	mov	r1, r4
 80a2df4:	4620      	mov	r0, r4
 80a2df6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2df8:	4620      	mov	r0, r4
}
 80a2dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2dfe:	2110      	movs	r1, #16
 80a2e00:	f000 ba57 	b.w	80a32b2 <_ZdlPvj>

080a2e04 <_ZN9TCPServer5writeEhm>:

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a2e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2e06:	ac02      	add	r4, sp, #8
    return write(&b, sizeof(b), timeout);
 80a2e08:	6803      	ldr	r3, [r0, #0]

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a2e0a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, sizeof(b), timeout);
 80a2e0e:	699d      	ldr	r5, [r3, #24]
 80a2e10:	4621      	mov	r1, r4
 80a2e12:	4613      	mov	r3, r2
 80a2e14:	2201      	movs	r2, #1
 80a2e16:	47a8      	blx	r5
}
 80a2e18:	b003      	add	sp, #12
 80a2e1a:	bd30      	pop	{r4, r5, pc}

080a2e1c <_ZN9TCPServer5writeEh>:
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a2e1c:	b513      	push	{r0, r1, r4, lr}
 80a2e1e:	ab02      	add	r3, sp, #8
    return write(&b, 1);
 80a2e20:	6802      	ldr	r2, [r0, #0]
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a2e22:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&b, 1);
 80a2e26:	68d4      	ldr	r4, [r2, #12]
 80a2e28:	4619      	mov	r1, r3
 80a2e2a:	2201      	movs	r2, #1
 80a2e2c:	47a0      	blx	r4
}
 80a2e2e:	b002      	add	sp, #8
 80a2e30:	bd10      	pop	{r4, pc}

080a2e32 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
 80a2e32:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2e34:	6803      	ldr	r3, [r0, #0]
 80a2e36:	699c      	ldr	r4, [r3, #24]
 80a2e38:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2e3c:	46a4      	mov	ip, r4
}
 80a2e3e:	bc10      	pop	{r4}
    return write(&b, 1);
}

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2e40:	4760      	bx	ip

080a2e42 <_ZN9TCPServer5writeEPKhjm>:
{
    return write(&b, sizeof(b), timeout);
}

size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout)
{
 80a2e42:	b510      	push	{r4, lr}
 80a2e44:	4604      	mov	r4, r0

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a2e46:	2000      	movs	r0, #0
 80a2e48:	61a0      	str	r0, [r4, #24]
    _client.clearWriteError();
    size_t ret = _client.write(buf, size, timeout);
 80a2e4a:	f104 0014 	add.w	r0, r4, #20
 80a2e4e:	f7fe ff06 	bl	80a1c5e <_ZN9TCPClient5writeEPKhjm>
 80a2e52:	69a3      	ldr	r3, [r4, #24]
 80a2e54:	6063      	str	r3, [r4, #4]
    setWriteError(_client.getWriteError());
    return ret;
}
 80a2e56:	bd10      	pop	{r4, pc}

080a2e58 <_ZN15TCPServerClient8remoteIPEv>:

public:

    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}

    virtual IPAddress remoteIP() override
 80a2e58:	b570      	push	{r4, r5, r6, lr}
 80a2e5a:	460e      	mov	r6, r1
 80a2e5c:	4604      	mov	r4, r0
 80a2e5e:	b086      	sub	sp, #24
    {
        sock_peer_t peer;
        memset(&peer, 0, sizeof(peer));
 80a2e60:	2516      	movs	r5, #22
 80a2e62:	462a      	mov	r2, r5
 80a2e64:	2100      	movs	r1, #0
 80a2e66:	4668      	mov	r0, sp
 80a2e68:	f000 fba8 	bl	80a35bc <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
 80a2e6c:	6973      	ldr	r3, [r6, #20]
        peer.size = sizeof(peer);
 80a2e6e:	f8ad 5000 	strh.w	r5, [sp]
        socket_peer(sock_handle(), &peer, NULL);
 80a2e72:	2200      	movs	r2, #0
 80a2e74:	4669      	mov	r1, sp
 80a2e76:	6818      	ldr	r0, [r3, #0]
 80a2e78:	f7fe fbd4 	bl	80a1624 <socket_peer>
        return peer.address;
 80a2e7c:	f10d 0102 	add.w	r1, sp, #2
 80a2e80:	4620      	mov	r0, r4
 80a2e82:	f7ff fe2b 	bl	80a2adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2e86:	4620      	mov	r0, r4
 80a2e88:	b006      	add	sp, #24
 80a2e8a:	bd70      	pop	{r4, r5, r6, pc}

080a2e8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.11>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2e8c:	b510      	push	{r4, lr}
 80a2e8e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a2e90:	6803      	ldr	r3, [r0, #0]
 80a2e92:	689b      	ldr	r3, [r3, #8]
 80a2e94:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2e96:	68a3      	ldr	r3, [r4, #8]
 80a2e98:	3b01      	subs	r3, #1
 80a2e9a:	60a3      	str	r3, [r4, #8]
 80a2e9c:	b92b      	cbnz	r3, 80a2eaa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.11+0x1e>
            _M_destroy();
 80a2e9e:	6823      	ldr	r3, [r4, #0]
 80a2ea0:	4620      	mov	r0, r4
        }
    }
 80a2ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a2ea6:	68db      	ldr	r3, [r3, #12]
 80a2ea8:	4718      	bx	r3
 80a2eaa:	bd10      	pop	{r4, pc}

080a2eac <_ZN15TCPServerClientD1Ev>:

using namespace spark;

static TCPClient* s_invalid_client = NULL;

class TCPServerClient : public TCPClient
 80a2eac:	b510      	push	{r4, lr}
 80a2eae:	4604      	mov	r4, r0
 80a2eb0:	4b02      	ldr	r3, [pc, #8]	; (80a2ebc <_ZN15TCPServerClientD1Ev+0x10>)
 80a2eb2:	6003      	str	r3, [r0, #0]
 80a2eb4:	f7fd fa02 	bl	80a02bc <_ZN9TCPClientD1Ev>
 80a2eb8:	4620      	mov	r0, r4
 80a2eba:	bd10      	pop	{r4, pc}
 80a2ebc:	080a41c0 	.word	0x080a41c0

080a2ec0 <_ZN15TCPServerClientD0Ev>:
 80a2ec0:	b510      	push	{r4, lr}
 80a2ec2:	4604      	mov	r4, r0
 80a2ec4:	f7ff fff2 	bl	80a2eac <_ZN15TCPServerClientD1Ev>
 80a2ec8:	4620      	mov	r0, r4
 80a2eca:	211c      	movs	r1, #28
 80a2ecc:	f000 f9f1 	bl	80a32b2 <_ZdlPvj>
 80a2ed0:	4620      	mov	r0, r4
 80a2ed2:	bd10      	pop	{r4, pc}

080a2ed4 <_ZN9TCPServerC1Etm>:
        socket_peer(sock_handle(), &peer, NULL);
        return peer.address;
    }
};

TCPServer::TCPServer(uint16_t port, network_interface_t nif) : _port(port), _nif(nif), _sock(socket_handle_invalid()), _client(socket_handle_invalid())
 80a2ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ed6:	4b15      	ldr	r3, [pc, #84]	; (80a2f2c <_ZN9TCPServerC1Etm+0x58>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2ed8:	2500      	movs	r5, #0
 80a2eda:	6003      	str	r3, [r0, #0]
 80a2edc:	60c2      	str	r2, [r0, #12]
 80a2ede:	8101      	strh	r1, [r0, #8]
 80a2ee0:	6045      	str	r5, [r0, #4]
 80a2ee2:	4604      	mov	r4, r0
 80a2ee4:	f7fe fb96 	bl	80a1614 <socket_handle_invalid>
 80a2ee8:	6120      	str	r0, [r4, #16]
 80a2eea:	f7fe fb93 	bl	80a1614 <socket_handle_invalid>
 80a2eee:	4601      	mov	r1, r0
 80a2ef0:	f104 0014 	add.w	r0, r4, #20
 80a2ef4:	f7fe ff0e 	bl	80a1d14 <_ZN9TCPClientC1Em>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a2ef8:	4629      	mov	r1, r5
 80a2efa:	4628      	mov	r0, r5
 80a2efc:	f7fe fb0a 	bl	80a1514 <os_thread_scheduling>
{
    SINGLE_THREADED_BLOCK() {
        if (!s_invalid_client) {
 80a2f00:	4b0b      	ldr	r3, [pc, #44]	; (80a2f30 <_ZN9TCPServerC1Etm+0x5c>)
 80a2f02:	681a      	ldr	r2, [r3, #0]
 80a2f04:	461d      	mov	r5, r3
 80a2f06:	b95a      	cbnz	r2, 80a2f20 <_ZN9TCPServerC1Etm+0x4c>
            s_invalid_client = new TCPClient(socket_handle_invalid());
 80a2f08:	f7fe fb84 	bl	80a1614 <socket_handle_invalid>
 80a2f0c:	4607      	mov	r7, r0
 80a2f0e:	201c      	movs	r0, #28
 80a2f10:	f7fd f8c3 	bl	80a009a <_Znwj>
 80a2f14:	4606      	mov	r6, r0
 80a2f16:	b110      	cbz	r0, 80a2f1e <_ZN9TCPServerC1Etm+0x4a>
 80a2f18:	4639      	mov	r1, r7
 80a2f1a:	f7fe fefb 	bl	80a1d14 <_ZN9TCPClientC1Em>
 80a2f1e:	602e      	str	r6, [r5, #0]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a2f20:	2100      	movs	r1, #0
 80a2f22:	2001      	movs	r0, #1
 80a2f24:	f7fe faf6 	bl	80a1514 <os_thread_scheduling>
        }
    }
}
 80a2f28:	4620      	mov	r0, r4
 80a2f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2f2c:	080a420c 	.word	0x080a420c
 80a2f30:	200005cc 	.word	0x200005cc

080a2f34 <_ZN9TCPServer4stopEv>:
    stop();
    return false;
}

void TCPServer::stop()
{
 80a2f34:	b510      	push	{r4, lr}
 80a2f36:	4604      	mov	r4, r0
    _client.stop();
 80a2f38:	3014      	adds	r0, #20
 80a2f3a:	f7fe fded 	bl	80a1b18 <_ZN9TCPClient4stopEv>
    socket_close(_sock);
 80a2f3e:	6920      	ldr	r0, [r4, #16]
 80a2f40:	f7fe fb50 	bl	80a15e4 <socket_close>
    _sock = socket_handle_invalid();
 80a2f44:	f7fe fb66 	bl	80a1614 <socket_handle_invalid>
 80a2f48:	6120      	str	r0, [r4, #16]
 80a2f4a:	bd10      	pop	{r4, pc}

080a2f4c <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a2f4c:	b538      	push	{r3, r4, r5, lr}
 80a2f4e:	4604      	mov	r4, r0
 80a2f50:	4605      	mov	r5, r0
 80a2f52:	4b05      	ldr	r3, [pc, #20]	; (80a2f68 <_ZN9TCPServerD1Ev+0x1c>)
 80a2f54:	f844 3b14 	str.w	r3, [r4], #20
 80a2f58:	f7ff ffec 	bl	80a2f34 <_ZN9TCPServer4stopEv>
 80a2f5c:	4620      	mov	r0, r4
 80a2f5e:	f7fd f9ad 	bl	80a02bc <_ZN9TCPClientD1Ev>
 80a2f62:	4628      	mov	r0, r5
 80a2f64:	bd38      	pop	{r3, r4, r5, pc}
 80a2f66:	bf00      	nop
 80a2f68:	080a420c 	.word	0x080a420c

080a2f6c <_ZN9TCPServerD0Ev>:
 80a2f6c:	b510      	push	{r4, lr}
 80a2f6e:	4604      	mov	r4, r0
 80a2f70:	f7ff ffec 	bl	80a2f4c <_ZN9TCPServerD1Ev>
 80a2f74:	4620      	mov	r0, r4
 80a2f76:	2130      	movs	r1, #48	; 0x30
 80a2f78:	f000 f99b 	bl	80a32b2 <_ZdlPvj>
 80a2f7c:	4620      	mov	r0, r4
 80a2f7e:	bd10      	pop	{r4, pc}

080a2f80 <_ZN9TCPServer5beginEv>:
        }
    }
}

bool TCPServer::begin()
{
 80a2f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f82:	4604      	mov	r4, r0
    stop();
 80a2f84:	f7ff ffd6 	bl	80a2f34 <_ZN9TCPServer4stopEv>
    if(!Network.from(_nif).ready())
 80a2f88:	68e0      	ldr	r0, [r4, #12]
 80a2f8a:	f000 f95f 	bl	80a324c <_ZN5spark12NetworkClass4fromEm>
 80a2f8e:	6803      	ldr	r3, [r0, #0]
 80a2f90:	68db      	ldr	r3, [r3, #12]
 80a2f92:	4798      	blx	r3
 80a2f94:	4605      	mov	r5, r0
 80a2f96:	b190      	cbz	r0, 80a2fbe <_ZN9TCPServer5beginEv+0x3e>
    {
        return false;
    }

    if (socket_handle_valid(_sock)) {
 80a2f98:	6920      	ldr	r0, [r4, #16]
 80a2f9a:	f7fe fb03 	bl	80a15a4 <socket_handle_valid>
 80a2f9e:	b970      	cbnz	r0, 80a2fbe <_ZN9TCPServer5beginEv+0x3e>
        return true;
    }
    sock_result_t result = socket_create_tcp_server(_port, _nif);
 80a2fa0:	68e1      	ldr	r1, [r4, #12]
 80a2fa2:	8920      	ldrh	r0, [r4, #8]
 80a2fa4:	f7fe fb26 	bl	80a15f4 <socket_create_tcp_server>
 80a2fa8:	4607      	mov	r7, r0
    if (socket_handle_valid(result)) {
 80a2faa:	f7fe fafb 	bl	80a15a4 <socket_handle_valid>
 80a2fae:	4606      	mov	r6, r0
 80a2fb0:	b108      	cbz	r0, 80a2fb6 <_ZN9TCPServer5beginEv+0x36>
        _sock = result;
 80a2fb2:	6127      	str	r7, [r4, #16]
 80a2fb4:	e003      	b.n	80a2fbe <_ZN9TCPServer5beginEv+0x3e>
        return true;
    }
    stop();
 80a2fb6:	4620      	mov	r0, r4
 80a2fb8:	f7ff ffbc 	bl	80a2f34 <_ZN9TCPServer4stopEv>
    return false;
 80a2fbc:	4635      	mov	r5, r6
}
 80a2fbe:	4628      	mov	r0, r5
 80a2fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2fc2 <_ZN9TCPClientaSERKS_>:

#define TCPCLIENT_BUF_MAX_SIZE  128
/* 30 seconds */
#define SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT (30000)

class TCPClient : public Client {
 80a2fc2:	b538      	push	{r3, r4, r5, lr}
 80a2fc4:	684b      	ldr	r3, [r1, #4]
 80a2fc6:	4604      	mov	r4, r0
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80a2fc8:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a2fca:	688b      	ldr	r3, [r1, #8]
 80a2fcc:	6083      	str	r3, [r0, #8]
 80a2fce:	68cb      	ldr	r3, [r1, #12]
 80a2fd0:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a2fd2:	690b      	ldr	r3, [r1, #16]
 80a2fd4:	6103      	str	r3, [r0, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a2fd6:	694b      	ldr	r3, [r1, #20]
 80a2fd8:	6143      	str	r3, [r0, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2fda:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
 80a2fdc:	6983      	ldr	r3, [r0, #24]
 80a2fde:	429d      	cmp	r5, r3
 80a2fe0:	d00c      	beq.n	80a2ffc <_ZN9TCPClientaSERKS_+0x3a>
	  {
	    if (__tmp != 0)
 80a2fe2:	b115      	cbz	r5, 80a2fea <_ZN9TCPClientaSERKS_+0x28>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2fe4:	686b      	ldr	r3, [r5, #4]
 80a2fe6:	3301      	adds	r3, #1
 80a2fe8:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a2fea:	69a0      	ldr	r0, [r4, #24]
 80a2fec:	b128      	cbz	r0, 80a2ffa <_ZN9TCPClientaSERKS_+0x38>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2fee:	6843      	ldr	r3, [r0, #4]
 80a2ff0:	3b01      	subs	r3, #1
 80a2ff2:	6043      	str	r3, [r0, #4]
 80a2ff4:	b90b      	cbnz	r3, 80a2ffa <_ZN9TCPClientaSERKS_+0x38>
 80a2ff6:	f7ff ff49 	bl	80a2e8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.11>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a2ffa:	61a5      	str	r5, [r4, #24]
 80a2ffc:	4620      	mov	r0, r4
 80a2ffe:	bd38      	pop	{r3, r4, r5, pc}

080a3000 <_ZN9TCPClientC1ERKS_>:
 80a3000:	4b0c      	ldr	r3, [pc, #48]	; (80a3034 <_ZN9TCPClientC1ERKS_+0x34>)
 80a3002:	6003      	str	r3, [r0, #0]
 80a3004:	684b      	ldr	r3, [r1, #4]
 80a3006:	6043      	str	r3, [r0, #4]
 80a3008:	4b0b      	ldr	r3, [pc, #44]	; (80a3038 <_ZN9TCPClientC1ERKS_+0x38>)
 80a300a:	6003      	str	r3, [r0, #0]
 80a300c:	688b      	ldr	r3, [r1, #8]
 80a300e:	6083      	str	r3, [r0, #8]
 80a3010:	68cb      	ldr	r3, [r1, #12]
 80a3012:	60c3      	str	r3, [r0, #12]
 80a3014:	4b09      	ldr	r3, [pc, #36]	; (80a303c <_ZN9TCPClientC1ERKS_+0x3c>)
 80a3016:	6003      	str	r3, [r0, #0]
 80a3018:	690b      	ldr	r3, [r1, #16]
 80a301a:	6103      	str	r3, [r0, #16]
 80a301c:	4b08      	ldr	r3, [pc, #32]	; (80a3040 <_ZN9TCPClientC1ERKS_+0x40>)
 80a301e:	6003      	str	r3, [r0, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3020:	694b      	ldr	r3, [r1, #20]
 80a3022:	6143      	str	r3, [r0, #20]
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3024:	698b      	ldr	r3, [r1, #24]
 80a3026:	6183      	str	r3, [r0, #24]
      {
	if (_M_pi != 0)
 80a3028:	b113      	cbz	r3, 80a3030 <_ZN9TCPClientC1ERKS_+0x30>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a302a:	685a      	ldr	r2, [r3, #4]
 80a302c:	3201      	adds	r2, #1
 80a302e:	605a      	str	r2, [r3, #4]
 80a3030:	4770      	bx	lr
 80a3032:	bf00      	nop
 80a3034:	080a3fac 	.word	0x080a3fac
 80a3038:	080a4158 	.word	0x080a4158
 80a303c:	080a4180 	.word	0x080a4180
 80a3040:	080a3f2c 	.word	0x080a3f2c

080a3044 <_ZN9TCPServer9availableEv>:
    socket_close(_sock);
    _sock = socket_handle_invalid();
}

TCPClient TCPServer::available()
{
 80a3044:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3046:	460c      	mov	r4, r1
 80a3048:	b08f      	sub	sp, #60	; 0x3c
 80a304a:	4607      	mov	r7, r0
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a304c:	f7fe fae2 	bl	80a1614 <socket_handle_invalid>

    if(_sock == SOCKET_INVALID)
 80a3050:	6923      	ldr	r3, [r4, #16]
    _sock = socket_handle_invalid();
}

TCPClient TCPServer::available()
{
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a3052:	4605      	mov	r5, r0

    if(_sock == SOCKET_INVALID)
 80a3054:	4298      	cmp	r0, r3
 80a3056:	d103      	bne.n	80a3060 <_ZN9TCPServer9availableEv+0x1c>
    {
        begin();
 80a3058:	6823      	ldr	r3, [r4, #0]
 80a305a:	4620      	mov	r0, r4
 80a305c:	691b      	ldr	r3, [r3, #16]
 80a305e:	4798      	blx	r3
    }

    if((!Network.from(_nif).ready()) || (_sock == SOCKET_INVALID))
 80a3060:	68e0      	ldr	r0, [r4, #12]
 80a3062:	f000 f8f3 	bl	80a324c <_ZN5spark12NetworkClass4fromEm>
 80a3066:	6803      	ldr	r3, [r0, #0]
 80a3068:	f104 0614 	add.w	r6, r4, #20
 80a306c:	68db      	ldr	r3, [r3, #12]
 80a306e:	4798      	blx	r3
 80a3070:	b110      	cbz	r0, 80a3078 <_ZN9TCPServer9availableEv+0x34>
 80a3072:	6920      	ldr	r0, [r4, #16]
 80a3074:	4285      	cmp	r5, r0
 80a3076:	d10e      	bne.n	80a3096 <_ZN9TCPServer9availableEv+0x52>
    {
        stop();
 80a3078:	4620      	mov	r0, r4
 80a307a:	f7ff ff5b 	bl	80a2f34 <_ZN9TCPServer4stopEv>
        _client = *s_invalid_client;
 80a307e:	4b16      	ldr	r3, [pc, #88]	; (80a30d8 <_ZN9TCPServer9availableEv+0x94>)
 80a3080:	4630      	mov	r0, r6
 80a3082:	6819      	ldr	r1, [r3, #0]
 80a3084:	f7ff ff9d 	bl	80a2fc2 <_ZN9TCPClientaSERKS_>
        return _client;
 80a3088:	4631      	mov	r1, r6
 80a308a:	4638      	mov	r0, r7
 80a308c:	f7ff ffb8 	bl	80a3000 <_ZN9TCPClientC1ERKS_>
        _client = client;

    }

    return _client;
}
 80a3090:	4638      	mov	r0, r7
 80a3092:	b00f      	add	sp, #60	; 0x3c
 80a3094:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stop();
        _client = *s_invalid_client;
        return _client;
    }

    int sock = socket_accept(_sock);
 80a3096:	f7fe fab5 	bl	80a1604 <socket_accept>
 80a309a:	4604      	mov	r4, r0

    if (!socket_handle_valid(sock))
 80a309c:	f7fe fa82 	bl	80a15a4 <socket_handle_valid>
 80a30a0:	2800      	cmp	r0, #0
 80a30a2:	d0ec      	beq.n	80a307e <_ZN9TCPServer9availableEv+0x3a>
class TCPServerClient : public TCPClient
{

public:

    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a30a4:	4621      	mov	r1, r4
 80a30a6:	a807      	add	r0, sp, #28
 80a30a8:	f7fe fe34 	bl	80a1d14 <_ZN9TCPClientC1Em>
 80a30ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a30ae:	4b0b      	ldr	r3, [pc, #44]	; (80a30dc <_ZN9TCPServer9availableEv+0x98>)
        _client = *s_invalid_client;
    }
    else
    {
        TCPServerClient client = TCPServerClient(sock);
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a30b0:	a907      	add	r1, sp, #28
 80a30b2:	a801      	add	r0, sp, #4

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a30b4:	ad02      	add	r5, sp, #8
 80a30b6:	348c      	adds	r4, #140	; 0x8c
class TCPServerClient : public TCPClient
{

public:

    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a30b8:	9307      	str	r3, [sp, #28]
        _client = *s_invalid_client;
    }
    else
    {
        TCPServerClient client = TCPServerClient(sock);
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a30ba:	f7ff fecd 	bl	80a2e58 <_ZN15TCPServerClient8remoteIPEv>
 80a30be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a30c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a30c2:	682b      	ldr	r3, [r5, #0]
        _client = client;
 80a30c4:	a907      	add	r1, sp, #28
 80a30c6:	7023      	strb	r3, [r4, #0]
 80a30c8:	4630      	mov	r0, r6
 80a30ca:	f7ff ff7a 	bl	80a2fc2 <_ZN9TCPClientaSERKS_>
    {
        _client = *s_invalid_client;
    }
    else
    {
        TCPServerClient client = TCPServerClient(sock);
 80a30ce:	a807      	add	r0, sp, #28
 80a30d0:	f7ff feec 	bl	80a2eac <_ZN15TCPServerClientD1Ev>
 80a30d4:	e7d8      	b.n	80a3088 <_ZN9TCPServer9availableEv+0x44>
 80a30d6:	bf00      	nop
 80a30d8:	200005cc 	.word	0x200005cc
 80a30dc:	080a41c0 	.word	0x080a41c0

080a30e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a30e0:	2200      	movs	r2, #0
 80a30e2:	4611      	mov	r1, r2
 80a30e4:	6840      	ldr	r0, [r0, #4]
 80a30e6:	f7fe bb61 	b.w	80a17ac <network_ready>

080a30ea <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a30ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a30ec:	4616      	mov	r6, r2
 80a30ee:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a30f0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a30f2:	460f      	mov	r7, r1
 80a30f4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a30f6:	2100      	movs	r1, #0
 80a30f8:	a803      	add	r0, sp, #12
 80a30fa:	f000 fa5f 	bl	80a35bc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a30fe:	4630      	mov	r0, r6
 80a3100:	f000 fb0f 	bl	80a3722 <strlen>
 80a3104:	2500      	movs	r5, #0
 80a3106:	9500      	str	r5, [sp, #0]
 80a3108:	b281      	uxth	r1, r0
 80a310a:	687b      	ldr	r3, [r7, #4]
 80a310c:	aa03      	add	r2, sp, #12
 80a310e:	4630      	mov	r0, r6
 80a3110:	f7fe fad0 	bl	80a16b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3114:	b120      	cbz	r0, 80a3120 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3116:	4629      	mov	r1, r5
 80a3118:	4620      	mov	r0, r4
 80a311a:	f7ff fcf1 	bl	80a2b00 <_ZN9IPAddressC1Em>
 80a311e:	e003      	b.n	80a3128 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3120:	a903      	add	r1, sp, #12
 80a3122:	4620      	mov	r0, r4
 80a3124:	f7ff fcda 	bl	80a2adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3128:	4620      	mov	r0, r4
 80a312a:	b009      	add	sp, #36	; 0x24
 80a312c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a312e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a312e:	2200      	movs	r2, #0
 80a3130:	4611      	mov	r1, r2
 80a3132:	6840      	ldr	r0, [r0, #4]
 80a3134:	f7fe bb5a 	b.w	80a17ec <network_listening>

080a3138 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3138:	2200      	movs	r2, #0
 80a313a:	4611      	mov	r1, r2
 80a313c:	6840      	ldr	r0, [r0, #4]
 80a313e:	f7fe bb65 	b.w	80a180c <network_get_listen_timeout>

080a3142 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3142:	2200      	movs	r2, #0
 80a3144:	6840      	ldr	r0, [r0, #4]
 80a3146:	f7fe bb59 	b.w	80a17fc <network_set_listen_timeout>

080a314a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a314a:	2200      	movs	r2, #0
 80a314c:	f081 0101 	eor.w	r1, r1, #1
 80a3150:	6840      	ldr	r0, [r0, #4]
 80a3152:	f7fe bb43 	b.w	80a17dc <network_listen>

080a3156 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3156:	2300      	movs	r3, #0
 80a3158:	461a      	mov	r2, r3
 80a315a:	4619      	mov	r1, r3
 80a315c:	6840      	ldr	r0, [r0, #4]
 80a315e:	f7fe bb35 	b.w	80a17cc <network_off>

080a3162 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3162:	2200      	movs	r2, #0
 80a3164:	4611      	mov	r1, r2
 80a3166:	6840      	ldr	r0, [r0, #4]
 80a3168:	f7fe bb10 	b.w	80a178c <network_connecting>

080a316c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a316c:	2200      	movs	r2, #0
 80a316e:	2102      	movs	r1, #2
 80a3170:	6840      	ldr	r0, [r0, #4]
 80a3172:	f7fe bb13 	b.w	80a179c <network_disconnect>

080a3176 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3176:	2300      	movs	r3, #0
 80a3178:	461a      	mov	r2, r3
 80a317a:	6840      	ldr	r0, [r0, #4]
 80a317c:	f7fe bafe 	b.w	80a177c <network_connect>

080a3180 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3180:	4b02      	ldr	r3, [pc, #8]	; (80a318c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3182:	2204      	movs	r2, #4
 80a3184:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3186:	4a02      	ldr	r2, [pc, #8]	; (80a3190 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3188:	601a      	str	r2, [r3, #0]
 80a318a:	4770      	bx	lr
 80a318c:	200005d0 	.word	0x200005d0
 80a3190:	080a4230 	.word	0x080a4230

080a3194 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3194:	2300      	movs	r3, #0
 80a3196:	461a      	mov	r2, r3
 80a3198:	6840      	ldr	r0, [r0, #4]
 80a319a:	f7fe baef 	b.w	80a177c <network_connect>

080a319e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a319e:	2200      	movs	r2, #0
 80a31a0:	2102      	movs	r1, #2
 80a31a2:	6840      	ldr	r0, [r0, #4]
 80a31a4:	f7fe bafa 	b.w	80a179c <network_disconnect>

080a31a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a31a8:	2200      	movs	r2, #0
 80a31aa:	4611      	mov	r1, r2
 80a31ac:	6840      	ldr	r0, [r0, #4]
 80a31ae:	f7fe baed 	b.w	80a178c <network_connecting>

080a31b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a31b2:	2200      	movs	r2, #0
 80a31b4:	4611      	mov	r1, r2
 80a31b6:	6840      	ldr	r0, [r0, #4]
 80a31b8:	f7fe baf8 	b.w	80a17ac <network_ready>

080a31bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a31bc:	2300      	movs	r3, #0
 80a31be:	461a      	mov	r2, r3
 80a31c0:	4619      	mov	r1, r3
 80a31c2:	6840      	ldr	r0, [r0, #4]
 80a31c4:	f7fe bafa 	b.w	80a17bc <network_on>

080a31c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a31c8:	2300      	movs	r3, #0
 80a31ca:	461a      	mov	r2, r3
 80a31cc:	4619      	mov	r1, r3
 80a31ce:	6840      	ldr	r0, [r0, #4]
 80a31d0:	f7fe bafc 	b.w	80a17cc <network_off>

080a31d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a31d4:	2200      	movs	r2, #0
 80a31d6:	f081 0101 	eor.w	r1, r1, #1
 80a31da:	6840      	ldr	r0, [r0, #4]
 80a31dc:	f7fe bafe 	b.w	80a17dc <network_listen>

080a31e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a31e0:	2200      	movs	r2, #0
 80a31e2:	6840      	ldr	r0, [r0, #4]
 80a31e4:	f7fe bb0a 	b.w	80a17fc <network_set_listen_timeout>

080a31e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a31e8:	2200      	movs	r2, #0
 80a31ea:	4611      	mov	r1, r2
 80a31ec:	6840      	ldr	r0, [r0, #4]
 80a31ee:	f7fe bb0d 	b.w	80a180c <network_get_listen_timeout>

080a31f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a31f2:	2200      	movs	r2, #0
 80a31f4:	4611      	mov	r1, r2
 80a31f6:	6840      	ldr	r0, [r0, #4]
 80a31f8:	f7fe baf8 	b.w	80a17ec <network_listening>

080a31fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a31fc:	b570      	push	{r4, r5, r6, lr}
 80a31fe:	4616      	mov	r6, r2
 80a3200:	b08e      	sub	sp, #56	; 0x38
 80a3202:	4604      	mov	r4, r0
    IPAddress addr;
 80a3204:	a808      	add	r0, sp, #32
 80a3206:	f7ff fc5b 	bl	80a2ac0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a320a:	2211      	movs	r2, #17
 80a320c:	2100      	movs	r1, #0
 80a320e:	a803      	add	r0, sp, #12
 80a3210:	f000 f9d4 	bl	80a35bc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3214:	4630      	mov	r0, r6
 80a3216:	f000 fa84 	bl	80a3722 <strlen>
 80a321a:	2500      	movs	r5, #0
 80a321c:	4b0a      	ldr	r3, [pc, #40]	; (80a3248 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a321e:	9500      	str	r5, [sp, #0]
 80a3220:	b281      	uxth	r1, r0
 80a3222:	685b      	ldr	r3, [r3, #4]
 80a3224:	aa03      	add	r2, sp, #12
 80a3226:	4630      	mov	r0, r6
 80a3228:	f7fe fa44 	bl	80a16b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a322c:	b120      	cbz	r0, 80a3238 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a322e:	4629      	mov	r1, r5
 80a3230:	4620      	mov	r0, r4
 80a3232:	f7ff fc65 	bl	80a2b00 <_ZN9IPAddressC1Em>
 80a3236:	e003      	b.n	80a3240 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3238:	a903      	add	r1, sp, #12
 80a323a:	4620      	mov	r0, r4
 80a323c:	f7ff fc4e 	bl	80a2adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3240:	4620      	mov	r0, r4
 80a3242:	b00e      	add	sp, #56	; 0x38
 80a3244:	bd70      	pop	{r4, r5, r6, pc}
 80a3246:	bf00      	nop
 80a3248:	200005d0 	.word	0x200005d0

080a324c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a324c:	4b03      	ldr	r3, [pc, #12]	; (80a325c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a324e:	4a04      	ldr	r2, [pc, #16]	; (80a3260 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a3250:	2804      	cmp	r0, #4
 80a3252:	bf0c      	ite	eq
 80a3254:	4610      	moveq	r0, r2
 80a3256:	4618      	movne	r0, r3
 80a3258:	4770      	bx	lr
 80a325a:	bf00      	nop
 80a325c:	200005d8 	.word	0x200005d8
 80a3260:	200005d0 	.word	0x200005d0

080a3264 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3264:	4b02      	ldr	r3, [pc, #8]	; (80a3270 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3266:	4a03      	ldr	r2, [pc, #12]	; (80a3274 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3268:	601a      	str	r2, [r3, #0]
 80a326a:	2200      	movs	r2, #0
 80a326c:	605a      	str	r2, [r3, #4]
 80a326e:	4770      	bx	lr
 80a3270:	200005d8 	.word	0x200005d8
 80a3274:	080a4264 	.word	0x080a4264

080a3278 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3278:	b513      	push	{r0, r1, r4, lr}
 80a327a:	4c08      	ldr	r4, [pc, #32]	; (80a329c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a327c:	2300      	movs	r3, #0
 80a327e:	461a      	mov	r2, r3
 80a3280:	4619      	mov	r1, r3
 80a3282:	9300      	str	r3, [sp, #0]
 80a3284:	4620      	mov	r0, r4
 80a3286:	f7ff fc51 	bl	80a2b2c <_ZN9IPAddressC1Ehhhh>
 80a328a:	4620      	mov	r0, r4
 80a328c:	4a04      	ldr	r2, [pc, #16]	; (80a32a0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a328e:	4905      	ldr	r1, [pc, #20]	; (80a32a4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3290:	b002      	add	sp, #8
 80a3292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3296:	f000 b807 	b.w	80a32a8 <__aeabi_atexit>
 80a329a:	bf00      	nop
 80a329c:	200005e4 	.word	0x200005e4
 80a32a0:	2000006c 	.word	0x2000006c
 80a32a4:	080a2a7d 	.word	0x080a2a7d

080a32a8 <__aeabi_atexit>:
 80a32a8:	460b      	mov	r3, r1
 80a32aa:	4601      	mov	r1, r0
 80a32ac:	4618      	mov	r0, r3
 80a32ae:	f000 b951 	b.w	80a3554 <__cxa_atexit>

080a32b2 <_ZdlPvj>:
 80a32b2:	f7fc bef6 	b.w	80a00a2 <_ZdlPv>

080a32b6 <_ZSt25__throw_bad_function_callv>:
 80a32b6:	b508      	push	{r3, lr}
 80a32b8:	f7fe fb08 	bl	80a18cc <abort>

080a32bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a32bc:	4b18      	ldr	r3, [pc, #96]	; (80a3320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a32be:	681a      	ldr	r2, [r3, #0]
 80a32c0:	07d1      	lsls	r1, r2, #31
 80a32c2:	bf5c      	itt	pl
 80a32c4:	2201      	movpl	r2, #1
 80a32c6:	601a      	strpl	r2, [r3, #0]
 80a32c8:	4b16      	ldr	r3, [pc, #88]	; (80a3324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a32ca:	681a      	ldr	r2, [r3, #0]
 80a32cc:	07d2      	lsls	r2, r2, #31
 80a32ce:	bf5c      	itt	pl
 80a32d0:	2201      	movpl	r2, #1
 80a32d2:	601a      	strpl	r2, [r3, #0]
 80a32d4:	4b14      	ldr	r3, [pc, #80]	; (80a3328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a32d6:	681a      	ldr	r2, [r3, #0]
 80a32d8:	07d0      	lsls	r0, r2, #31
 80a32da:	bf5c      	itt	pl
 80a32dc:	2201      	movpl	r2, #1
 80a32de:	601a      	strpl	r2, [r3, #0]
 80a32e0:	4b12      	ldr	r3, [pc, #72]	; (80a332c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a32e2:	681a      	ldr	r2, [r3, #0]
 80a32e4:	07d1      	lsls	r1, r2, #31
 80a32e6:	bf5c      	itt	pl
 80a32e8:	2201      	movpl	r2, #1
 80a32ea:	601a      	strpl	r2, [r3, #0]
 80a32ec:	4b10      	ldr	r3, [pc, #64]	; (80a3330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a32ee:	681a      	ldr	r2, [r3, #0]
 80a32f0:	07d2      	lsls	r2, r2, #31
 80a32f2:	bf5c      	itt	pl
 80a32f4:	2201      	movpl	r2, #1
 80a32f6:	601a      	strpl	r2, [r3, #0]
 80a32f8:	4b0e      	ldr	r3, [pc, #56]	; (80a3334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a32fa:	681a      	ldr	r2, [r3, #0]
 80a32fc:	07d0      	lsls	r0, r2, #31
 80a32fe:	bf5c      	itt	pl
 80a3300:	2201      	movpl	r2, #1
 80a3302:	601a      	strpl	r2, [r3, #0]
 80a3304:	4b0c      	ldr	r3, [pc, #48]	; (80a3338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3306:	681a      	ldr	r2, [r3, #0]
 80a3308:	07d1      	lsls	r1, r2, #31
 80a330a:	bf5c      	itt	pl
 80a330c:	2201      	movpl	r2, #1
 80a330e:	601a      	strpl	r2, [r3, #0]
 80a3310:	4b0a      	ldr	r3, [pc, #40]	; (80a333c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3312:	681a      	ldr	r2, [r3, #0]
 80a3314:	07d2      	lsls	r2, r2, #31
 80a3316:	bf5c      	itt	pl
 80a3318:	2201      	movpl	r2, #1
 80a331a:	601a      	strpl	r2, [r3, #0]
 80a331c:	4770      	bx	lr
 80a331e:	bf00      	nop
 80a3320:	20000618 	.word	0x20000618
 80a3324:	20000614 	.word	0x20000614
 80a3328:	20000610 	.word	0x20000610
 80a332c:	2000060c 	.word	0x2000060c
 80a3330:	20000608 	.word	0x20000608
 80a3334:	20000604 	.word	0x20000604
 80a3338:	20000600 	.word	0x20000600
 80a333c:	200005fc 	.word	0x200005fc

080a3340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3340:	4b24      	ldr	r3, [pc, #144]	; (80a33d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3342:	681a      	ldr	r2, [r3, #0]
 80a3344:	07d0      	lsls	r0, r2, #31
 80a3346:	bf5c      	itt	pl
 80a3348:	2201      	movpl	r2, #1
 80a334a:	601a      	strpl	r2, [r3, #0]
 80a334c:	4b22      	ldr	r3, [pc, #136]	; (80a33d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a334e:	681a      	ldr	r2, [r3, #0]
 80a3350:	07d1      	lsls	r1, r2, #31
 80a3352:	bf5c      	itt	pl
 80a3354:	2201      	movpl	r2, #1
 80a3356:	601a      	strpl	r2, [r3, #0]
 80a3358:	4b20      	ldr	r3, [pc, #128]	; (80a33dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a335a:	681a      	ldr	r2, [r3, #0]
 80a335c:	07d2      	lsls	r2, r2, #31
 80a335e:	bf5c      	itt	pl
 80a3360:	2201      	movpl	r2, #1
 80a3362:	601a      	strpl	r2, [r3, #0]
 80a3364:	4b1e      	ldr	r3, [pc, #120]	; (80a33e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3366:	681a      	ldr	r2, [r3, #0]
 80a3368:	07d0      	lsls	r0, r2, #31
 80a336a:	bf5c      	itt	pl
 80a336c:	2201      	movpl	r2, #1
 80a336e:	601a      	strpl	r2, [r3, #0]
 80a3370:	4b1c      	ldr	r3, [pc, #112]	; (80a33e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3372:	681a      	ldr	r2, [r3, #0]
 80a3374:	07d1      	lsls	r1, r2, #31
 80a3376:	bf5c      	itt	pl
 80a3378:	2201      	movpl	r2, #1
 80a337a:	601a      	strpl	r2, [r3, #0]
 80a337c:	4b1a      	ldr	r3, [pc, #104]	; (80a33e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a337e:	681a      	ldr	r2, [r3, #0]
 80a3380:	07d2      	lsls	r2, r2, #31
 80a3382:	bf5c      	itt	pl
 80a3384:	2201      	movpl	r2, #1
 80a3386:	601a      	strpl	r2, [r3, #0]
 80a3388:	4b18      	ldr	r3, [pc, #96]	; (80a33ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a338a:	681a      	ldr	r2, [r3, #0]
 80a338c:	07d0      	lsls	r0, r2, #31
 80a338e:	bf5c      	itt	pl
 80a3390:	2201      	movpl	r2, #1
 80a3392:	601a      	strpl	r2, [r3, #0]
 80a3394:	4b16      	ldr	r3, [pc, #88]	; (80a33f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3396:	681a      	ldr	r2, [r3, #0]
 80a3398:	07d1      	lsls	r1, r2, #31
 80a339a:	bf5c      	itt	pl
 80a339c:	2201      	movpl	r2, #1
 80a339e:	601a      	strpl	r2, [r3, #0]
 80a33a0:	4b14      	ldr	r3, [pc, #80]	; (80a33f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a33a2:	681a      	ldr	r2, [r3, #0]
 80a33a4:	07d2      	lsls	r2, r2, #31
 80a33a6:	bf5c      	itt	pl
 80a33a8:	2201      	movpl	r2, #1
 80a33aa:	601a      	strpl	r2, [r3, #0]
 80a33ac:	4b12      	ldr	r3, [pc, #72]	; (80a33f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a33ae:	681a      	ldr	r2, [r3, #0]
 80a33b0:	07d0      	lsls	r0, r2, #31
 80a33b2:	bf5c      	itt	pl
 80a33b4:	2201      	movpl	r2, #1
 80a33b6:	601a      	strpl	r2, [r3, #0]
 80a33b8:	4b10      	ldr	r3, [pc, #64]	; (80a33fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a33ba:	681a      	ldr	r2, [r3, #0]
 80a33bc:	07d1      	lsls	r1, r2, #31
 80a33be:	bf5c      	itt	pl
 80a33c0:	2201      	movpl	r2, #1
 80a33c2:	601a      	strpl	r2, [r3, #0]
 80a33c4:	4b0e      	ldr	r3, [pc, #56]	; (80a3400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a33c6:	681a      	ldr	r2, [r3, #0]
 80a33c8:	07d2      	lsls	r2, r2, #31
 80a33ca:	bf5c      	itt	pl
 80a33cc:	2201      	movpl	r2, #1
 80a33ce:	601a      	strpl	r2, [r3, #0]
 80a33d0:	4770      	bx	lr
 80a33d2:	bf00      	nop
 80a33d4:	20000648 	.word	0x20000648
 80a33d8:	20000644 	.word	0x20000644
 80a33dc:	20000640 	.word	0x20000640
 80a33e0:	2000063c 	.word	0x2000063c
 80a33e4:	20000638 	.word	0x20000638
 80a33e8:	20000634 	.word	0x20000634
 80a33ec:	20000630 	.word	0x20000630
 80a33f0:	2000062c 	.word	0x2000062c
 80a33f4:	20000628 	.word	0x20000628
 80a33f8:	20000624 	.word	0x20000624
 80a33fc:	20000620 	.word	0x20000620
 80a3400:	2000061c 	.word	0x2000061c

080a3404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3404:	4b24      	ldr	r3, [pc, #144]	; (80a3498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3406:	681a      	ldr	r2, [r3, #0]
 80a3408:	07d0      	lsls	r0, r2, #31
 80a340a:	bf5c      	itt	pl
 80a340c:	2201      	movpl	r2, #1
 80a340e:	601a      	strpl	r2, [r3, #0]
 80a3410:	4b22      	ldr	r3, [pc, #136]	; (80a349c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3412:	681a      	ldr	r2, [r3, #0]
 80a3414:	07d1      	lsls	r1, r2, #31
 80a3416:	bf5c      	itt	pl
 80a3418:	2201      	movpl	r2, #1
 80a341a:	601a      	strpl	r2, [r3, #0]
 80a341c:	4b20      	ldr	r3, [pc, #128]	; (80a34a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a341e:	681a      	ldr	r2, [r3, #0]
 80a3420:	07d2      	lsls	r2, r2, #31
 80a3422:	bf5c      	itt	pl
 80a3424:	2201      	movpl	r2, #1
 80a3426:	601a      	strpl	r2, [r3, #0]
 80a3428:	4b1e      	ldr	r3, [pc, #120]	; (80a34a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a342a:	681a      	ldr	r2, [r3, #0]
 80a342c:	07d0      	lsls	r0, r2, #31
 80a342e:	bf5c      	itt	pl
 80a3430:	2201      	movpl	r2, #1
 80a3432:	601a      	strpl	r2, [r3, #0]
 80a3434:	4b1c      	ldr	r3, [pc, #112]	; (80a34a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3436:	681a      	ldr	r2, [r3, #0]
 80a3438:	07d1      	lsls	r1, r2, #31
 80a343a:	bf5c      	itt	pl
 80a343c:	2201      	movpl	r2, #1
 80a343e:	601a      	strpl	r2, [r3, #0]
 80a3440:	4b1a      	ldr	r3, [pc, #104]	; (80a34ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3442:	681a      	ldr	r2, [r3, #0]
 80a3444:	07d2      	lsls	r2, r2, #31
 80a3446:	bf5c      	itt	pl
 80a3448:	2201      	movpl	r2, #1
 80a344a:	601a      	strpl	r2, [r3, #0]
 80a344c:	4b18      	ldr	r3, [pc, #96]	; (80a34b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a344e:	681a      	ldr	r2, [r3, #0]
 80a3450:	07d0      	lsls	r0, r2, #31
 80a3452:	bf5c      	itt	pl
 80a3454:	2201      	movpl	r2, #1
 80a3456:	601a      	strpl	r2, [r3, #0]
 80a3458:	4b16      	ldr	r3, [pc, #88]	; (80a34b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a345a:	681a      	ldr	r2, [r3, #0]
 80a345c:	07d1      	lsls	r1, r2, #31
 80a345e:	bf5c      	itt	pl
 80a3460:	2201      	movpl	r2, #1
 80a3462:	601a      	strpl	r2, [r3, #0]
 80a3464:	4b14      	ldr	r3, [pc, #80]	; (80a34b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3466:	681a      	ldr	r2, [r3, #0]
 80a3468:	07d2      	lsls	r2, r2, #31
 80a346a:	bf5c      	itt	pl
 80a346c:	2201      	movpl	r2, #1
 80a346e:	601a      	strpl	r2, [r3, #0]
 80a3470:	4b12      	ldr	r3, [pc, #72]	; (80a34bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3472:	681a      	ldr	r2, [r3, #0]
 80a3474:	07d0      	lsls	r0, r2, #31
 80a3476:	bf5c      	itt	pl
 80a3478:	2201      	movpl	r2, #1
 80a347a:	601a      	strpl	r2, [r3, #0]
 80a347c:	4b10      	ldr	r3, [pc, #64]	; (80a34c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a347e:	681a      	ldr	r2, [r3, #0]
 80a3480:	07d1      	lsls	r1, r2, #31
 80a3482:	bf5c      	itt	pl
 80a3484:	2201      	movpl	r2, #1
 80a3486:	601a      	strpl	r2, [r3, #0]
 80a3488:	4b0e      	ldr	r3, [pc, #56]	; (80a34c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a348a:	681a      	ldr	r2, [r3, #0]
 80a348c:	07d2      	lsls	r2, r2, #31
 80a348e:	bf5c      	itt	pl
 80a3490:	2201      	movpl	r2, #1
 80a3492:	601a      	strpl	r2, [r3, #0]
 80a3494:	4770      	bx	lr
 80a3496:	bf00      	nop
 80a3498:	20000678 	.word	0x20000678
 80a349c:	20000674 	.word	0x20000674
 80a34a0:	20000670 	.word	0x20000670
 80a34a4:	2000066c 	.word	0x2000066c
 80a34a8:	20000668 	.word	0x20000668
 80a34ac:	20000664 	.word	0x20000664
 80a34b0:	20000660 	.word	0x20000660
 80a34b4:	2000065c 	.word	0x2000065c
 80a34b8:	20000658 	.word	0x20000658
 80a34bc:	20000654 	.word	0x20000654
 80a34c0:	20000650 	.word	0x20000650
 80a34c4:	2000064c 	.word	0x2000064c

080a34c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a34c8:	4b18      	ldr	r3, [pc, #96]	; (80a352c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a34ca:	681a      	ldr	r2, [r3, #0]
 80a34cc:	07d1      	lsls	r1, r2, #31
 80a34ce:	bf5c      	itt	pl
 80a34d0:	2201      	movpl	r2, #1
 80a34d2:	601a      	strpl	r2, [r3, #0]
 80a34d4:	4b16      	ldr	r3, [pc, #88]	; (80a3530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a34d6:	681a      	ldr	r2, [r3, #0]
 80a34d8:	07d2      	lsls	r2, r2, #31
 80a34da:	bf5c      	itt	pl
 80a34dc:	2201      	movpl	r2, #1
 80a34de:	601a      	strpl	r2, [r3, #0]
 80a34e0:	4b14      	ldr	r3, [pc, #80]	; (80a3534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a34e2:	681a      	ldr	r2, [r3, #0]
 80a34e4:	07d0      	lsls	r0, r2, #31
 80a34e6:	bf5c      	itt	pl
 80a34e8:	2201      	movpl	r2, #1
 80a34ea:	601a      	strpl	r2, [r3, #0]
 80a34ec:	4b12      	ldr	r3, [pc, #72]	; (80a3538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a34ee:	681a      	ldr	r2, [r3, #0]
 80a34f0:	07d1      	lsls	r1, r2, #31
 80a34f2:	bf5c      	itt	pl
 80a34f4:	2201      	movpl	r2, #1
 80a34f6:	601a      	strpl	r2, [r3, #0]
 80a34f8:	4b10      	ldr	r3, [pc, #64]	; (80a353c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a34fa:	681a      	ldr	r2, [r3, #0]
 80a34fc:	07d2      	lsls	r2, r2, #31
 80a34fe:	bf5c      	itt	pl
 80a3500:	2201      	movpl	r2, #1
 80a3502:	601a      	strpl	r2, [r3, #0]
 80a3504:	4b0e      	ldr	r3, [pc, #56]	; (80a3540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3506:	681a      	ldr	r2, [r3, #0]
 80a3508:	07d0      	lsls	r0, r2, #31
 80a350a:	bf5c      	itt	pl
 80a350c:	2201      	movpl	r2, #1
 80a350e:	601a      	strpl	r2, [r3, #0]
 80a3510:	4b0c      	ldr	r3, [pc, #48]	; (80a3544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3512:	681a      	ldr	r2, [r3, #0]
 80a3514:	07d1      	lsls	r1, r2, #31
 80a3516:	bf5c      	itt	pl
 80a3518:	2201      	movpl	r2, #1
 80a351a:	601a      	strpl	r2, [r3, #0]
 80a351c:	4b0a      	ldr	r3, [pc, #40]	; (80a3548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a351e:	681a      	ldr	r2, [r3, #0]
 80a3520:	07d2      	lsls	r2, r2, #31
 80a3522:	bf5c      	itt	pl
 80a3524:	2201      	movpl	r2, #1
 80a3526:	601a      	strpl	r2, [r3, #0]
 80a3528:	4770      	bx	lr
 80a352a:	bf00      	nop
 80a352c:	20000698 	.word	0x20000698
 80a3530:	20000694 	.word	0x20000694
 80a3534:	20000690 	.word	0x20000690
 80a3538:	2000068c 	.word	0x2000068c
 80a353c:	20000688 	.word	0x20000688
 80a3540:	20000684 	.word	0x20000684
 80a3544:	20000680 	.word	0x20000680
 80a3548:	2000067c 	.word	0x2000067c

080a354c <atoi>:
 80a354c:	220a      	movs	r2, #10
 80a354e:	2100      	movs	r1, #0
 80a3550:	f000 b9c8 	b.w	80a38e4 <strtol>

080a3554 <__cxa_atexit>:
 80a3554:	b510      	push	{r4, lr}
 80a3556:	4c05      	ldr	r4, [pc, #20]	; (80a356c <__cxa_atexit+0x18>)
 80a3558:	4613      	mov	r3, r2
 80a355a:	b12c      	cbz	r4, 80a3568 <__cxa_atexit+0x14>
 80a355c:	460a      	mov	r2, r1
 80a355e:	4601      	mov	r1, r0
 80a3560:	2002      	movs	r0, #2
 80a3562:	f3af 8000 	nop.w
 80a3566:	bd10      	pop	{r4, pc}
 80a3568:	4620      	mov	r0, r4
 80a356a:	bd10      	pop	{r4, pc}
 80a356c:	00000000 	.word	0x00000000

080a3570 <memcpy>:
 80a3570:	b510      	push	{r4, lr}
 80a3572:	1e43      	subs	r3, r0, #1
 80a3574:	440a      	add	r2, r1
 80a3576:	4291      	cmp	r1, r2
 80a3578:	d004      	beq.n	80a3584 <memcpy+0x14>
 80a357a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a357e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3582:	e7f8      	b.n	80a3576 <memcpy+0x6>
 80a3584:	bd10      	pop	{r4, pc}

080a3586 <memmove>:
 80a3586:	4288      	cmp	r0, r1
 80a3588:	b510      	push	{r4, lr}
 80a358a:	eb01 0302 	add.w	r3, r1, r2
 80a358e:	d801      	bhi.n	80a3594 <memmove+0xe>
 80a3590:	1e42      	subs	r2, r0, #1
 80a3592:	e00b      	b.n	80a35ac <memmove+0x26>
 80a3594:	4298      	cmp	r0, r3
 80a3596:	d2fb      	bcs.n	80a3590 <memmove+0xa>
 80a3598:	1881      	adds	r1, r0, r2
 80a359a:	1ad2      	subs	r2, r2, r3
 80a359c:	42d3      	cmn	r3, r2
 80a359e:	d004      	beq.n	80a35aa <memmove+0x24>
 80a35a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a35a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a35a8:	e7f8      	b.n	80a359c <memmove+0x16>
 80a35aa:	bd10      	pop	{r4, pc}
 80a35ac:	4299      	cmp	r1, r3
 80a35ae:	d004      	beq.n	80a35ba <memmove+0x34>
 80a35b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a35b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a35b8:	e7f8      	b.n	80a35ac <memmove+0x26>
 80a35ba:	bd10      	pop	{r4, pc}

080a35bc <memset>:
 80a35bc:	4603      	mov	r3, r0
 80a35be:	4402      	add	r2, r0
 80a35c0:	4293      	cmp	r3, r2
 80a35c2:	d002      	beq.n	80a35ca <memset+0xe>
 80a35c4:	f803 1b01 	strb.w	r1, [r3], #1
 80a35c8:	e7fa      	b.n	80a35c0 <memset+0x4>
 80a35ca:	4770      	bx	lr

080a35cc <srand>:
 80a35cc:	b538      	push	{r3, r4, r5, lr}
 80a35ce:	4b12      	ldr	r3, [pc, #72]	; (80a3618 <srand+0x4c>)
 80a35d0:	4605      	mov	r5, r0
 80a35d2:	681c      	ldr	r4, [r3, #0]
 80a35d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a35d6:	b9d3      	cbnz	r3, 80a360e <srand+0x42>
 80a35d8:	2018      	movs	r0, #24
 80a35da:	f7fe f94f 	bl	80a187c <malloc>
 80a35de:	f243 330e 	movw	r3, #13070	; 0x330e
 80a35e2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a35e4:	8003      	strh	r3, [r0, #0]
 80a35e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a35ea:	8043      	strh	r3, [r0, #2]
 80a35ec:	f241 2334 	movw	r3, #4660	; 0x1234
 80a35f0:	8083      	strh	r3, [r0, #4]
 80a35f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a35f6:	80c3      	strh	r3, [r0, #6]
 80a35f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a35fc:	8103      	strh	r3, [r0, #8]
 80a35fe:	2305      	movs	r3, #5
 80a3600:	8143      	strh	r3, [r0, #10]
 80a3602:	230b      	movs	r3, #11
 80a3604:	8183      	strh	r3, [r0, #12]
 80a3606:	2201      	movs	r2, #1
 80a3608:	2300      	movs	r3, #0
 80a360a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a360e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3610:	2200      	movs	r2, #0
 80a3612:	611d      	str	r5, [r3, #16]
 80a3614:	615a      	str	r2, [r3, #20]
 80a3616:	bd38      	pop	{r3, r4, r5, pc}
 80a3618:	20000068 	.word	0x20000068

080a361c <strcasecmp>:
 80a361c:	4b0d      	ldr	r3, [pc, #52]	; (80a3654 <strcasecmp+0x38>)
 80a361e:	b530      	push	{r4, r5, lr}
 80a3620:	681d      	ldr	r5, [r3, #0]
 80a3622:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a3626:	18ea      	adds	r2, r5, r3
 80a3628:	7852      	ldrb	r2, [r2, #1]
 80a362a:	f002 0203 	and.w	r2, r2, #3
 80a362e:	2a01      	cmp	r2, #1
 80a3630:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3634:	bf08      	it	eq
 80a3636:	3320      	addeq	r3, #32
 80a3638:	18ac      	adds	r4, r5, r2
 80a363a:	7864      	ldrb	r4, [r4, #1]
 80a363c:	f004 0403 	and.w	r4, r4, #3
 80a3640:	2c01      	cmp	r4, #1
 80a3642:	bf08      	it	eq
 80a3644:	3220      	addeq	r2, #32
 80a3646:	1a9b      	subs	r3, r3, r2
 80a3648:	d101      	bne.n	80a364e <strcasecmp+0x32>
 80a364a:	2a00      	cmp	r2, #0
 80a364c:	d1e9      	bne.n	80a3622 <strcasecmp+0x6>
 80a364e:	4618      	mov	r0, r3
 80a3650:	bd30      	pop	{r4, r5, pc}
 80a3652:	bf00      	nop
 80a3654:	20000004 	.word	0x20000004

080a3658 <strcasestr>:
 80a3658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a365c:	780b      	ldrb	r3, [r1, #0]
 80a365e:	4607      	mov	r7, r0
 80a3660:	b343      	cbz	r3, 80a36b4 <strcasestr+0x5c>
 80a3662:	4e16      	ldr	r6, [pc, #88]	; (80a36bc <strcasestr+0x64>)
 80a3664:	1c4d      	adds	r5, r1, #1
 80a3666:	6832      	ldr	r2, [r6, #0]
 80a3668:	4628      	mov	r0, r5
 80a366a:	441a      	add	r2, r3
 80a366c:	7852      	ldrb	r2, [r2, #1]
 80a366e:	f002 0203 	and.w	r2, r2, #3
 80a3672:	2a01      	cmp	r2, #1
 80a3674:	bf0c      	ite	eq
 80a3676:	f103 0420 	addeq.w	r4, r3, #32
 80a367a:	461c      	movne	r4, r3
 80a367c:	f000 f851 	bl	80a3722 <strlen>
 80a3680:	4680      	mov	r8, r0
 80a3682:	b2e4      	uxtb	r4, r4
 80a3684:	46b9      	mov	r9, r7
 80a3686:	f819 0b01 	ldrb.w	r0, [r9], #1
 80a368a:	b1a0      	cbz	r0, 80a36b6 <strcasestr+0x5e>
 80a368c:	6833      	ldr	r3, [r6, #0]
 80a368e:	4403      	add	r3, r0
 80a3690:	785b      	ldrb	r3, [r3, #1]
 80a3692:	f003 0303 	and.w	r3, r3, #3
 80a3696:	2b01      	cmp	r3, #1
 80a3698:	bf08      	it	eq
 80a369a:	3020      	addeq	r0, #32
 80a369c:	b2c0      	uxtb	r0, r0
 80a369e:	4284      	cmp	r4, r0
 80a36a0:	d001      	beq.n	80a36a6 <strcasestr+0x4e>
 80a36a2:	464f      	mov	r7, r9
 80a36a4:	e7ee      	b.n	80a3684 <strcasestr+0x2c>
 80a36a6:	4642      	mov	r2, r8
 80a36a8:	4629      	mov	r1, r5
 80a36aa:	4648      	mov	r0, r9
 80a36ac:	f000 f842 	bl	80a3734 <strncasecmp>
 80a36b0:	2800      	cmp	r0, #0
 80a36b2:	d1f6      	bne.n	80a36a2 <strcasestr+0x4a>
 80a36b4:	4638      	mov	r0, r7
 80a36b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a36ba:	bf00      	nop
 80a36bc:	20000004 	.word	0x20000004

080a36c0 <strchr>:
 80a36c0:	b2c9      	uxtb	r1, r1
 80a36c2:	4603      	mov	r3, r0
 80a36c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a36c8:	b11a      	cbz	r2, 80a36d2 <strchr+0x12>
 80a36ca:	4291      	cmp	r1, r2
 80a36cc:	d1f9      	bne.n	80a36c2 <strchr+0x2>
 80a36ce:	4618      	mov	r0, r3
 80a36d0:	4770      	bx	lr
 80a36d2:	2900      	cmp	r1, #0
 80a36d4:	bf0c      	ite	eq
 80a36d6:	4618      	moveq	r0, r3
 80a36d8:	2000      	movne	r0, #0
 80a36da:	4770      	bx	lr

080a36dc <strcpy>:
 80a36dc:	4603      	mov	r3, r0
 80a36de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a36e2:	f803 2b01 	strb.w	r2, [r3], #1
 80a36e6:	2a00      	cmp	r2, #0
 80a36e8:	d1f9      	bne.n	80a36de <strcpy+0x2>
 80a36ea:	4770      	bx	lr

080a36ec <strdup>:
 80a36ec:	4b02      	ldr	r3, [pc, #8]	; (80a36f8 <strdup+0xc>)
 80a36ee:	4601      	mov	r1, r0
 80a36f0:	6818      	ldr	r0, [r3, #0]
 80a36f2:	f000 b803 	b.w	80a36fc <_strdup_r>
 80a36f6:	bf00      	nop
 80a36f8:	20000068 	.word	0x20000068

080a36fc <_strdup_r>:
 80a36fc:	b570      	push	{r4, r5, r6, lr}
 80a36fe:	4606      	mov	r6, r0
 80a3700:	4608      	mov	r0, r1
 80a3702:	460c      	mov	r4, r1
 80a3704:	f000 f80d 	bl	80a3722 <strlen>
 80a3708:	1c45      	adds	r5, r0, #1
 80a370a:	4629      	mov	r1, r5
 80a370c:	4630      	mov	r0, r6
 80a370e:	f7fe f8e5 	bl	80a18dc <_malloc_r>
 80a3712:	4606      	mov	r6, r0
 80a3714:	b118      	cbz	r0, 80a371e <_strdup_r+0x22>
 80a3716:	462a      	mov	r2, r5
 80a3718:	4621      	mov	r1, r4
 80a371a:	f7ff ff29 	bl	80a3570 <memcpy>
 80a371e:	4630      	mov	r0, r6
 80a3720:	bd70      	pop	{r4, r5, r6, pc}

080a3722 <strlen>:
 80a3722:	4603      	mov	r3, r0
 80a3724:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3728:	2a00      	cmp	r2, #0
 80a372a:	d1fb      	bne.n	80a3724 <strlen+0x2>
 80a372c:	1a18      	subs	r0, r3, r0
 80a372e:	3801      	subs	r0, #1
 80a3730:	4770      	bx	lr
	...

080a3734 <strncasecmp>:
 80a3734:	4b0f      	ldr	r3, [pc, #60]	; (80a3774 <strncasecmp+0x40>)
 80a3736:	b570      	push	{r4, r5, r6, lr}
 80a3738:	681e      	ldr	r6, [r3, #0]
 80a373a:	440a      	add	r2, r1
 80a373c:	4291      	cmp	r1, r2
 80a373e:	d016      	beq.n	80a376e <strncasecmp+0x3a>
 80a3740:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a3744:	18f4      	adds	r4, r6, r3
 80a3746:	7864      	ldrb	r4, [r4, #1]
 80a3748:	f004 0403 	and.w	r4, r4, #3
 80a374c:	2c01      	cmp	r4, #1
 80a374e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3752:	bf08      	it	eq
 80a3754:	3320      	addeq	r3, #32
 80a3756:	1935      	adds	r5, r6, r4
 80a3758:	786d      	ldrb	r5, [r5, #1]
 80a375a:	f005 0503 	and.w	r5, r5, #3
 80a375e:	2d01      	cmp	r5, #1
 80a3760:	bf08      	it	eq
 80a3762:	3420      	addeq	r4, #32
 80a3764:	1b1b      	subs	r3, r3, r4
 80a3766:	d103      	bne.n	80a3770 <strncasecmp+0x3c>
 80a3768:	2c00      	cmp	r4, #0
 80a376a:	d1e7      	bne.n	80a373c <strncasecmp+0x8>
 80a376c:	e000      	b.n	80a3770 <strncasecmp+0x3c>
 80a376e:	2300      	movs	r3, #0
 80a3770:	4618      	mov	r0, r3
 80a3772:	bd70      	pop	{r4, r5, r6, pc}
 80a3774:	20000004 	.word	0x20000004

080a3778 <strncmp>:
 80a3778:	b530      	push	{r4, r5, lr}
 80a377a:	b182      	cbz	r2, 80a379e <strncmp+0x26>
 80a377c:	1e45      	subs	r5, r0, #1
 80a377e:	3901      	subs	r1, #1
 80a3780:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a3784:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a3788:	42a3      	cmp	r3, r4
 80a378a:	d106      	bne.n	80a379a <strncmp+0x22>
 80a378c:	43ec      	mvns	r4, r5
 80a378e:	4414      	add	r4, r2
 80a3790:	42e0      	cmn	r0, r4
 80a3792:	d001      	beq.n	80a3798 <strncmp+0x20>
 80a3794:	2b00      	cmp	r3, #0
 80a3796:	d1f3      	bne.n	80a3780 <strncmp+0x8>
 80a3798:	461c      	mov	r4, r3
 80a379a:	1b18      	subs	r0, r3, r4
 80a379c:	bd30      	pop	{r4, r5, pc}
 80a379e:	4610      	mov	r0, r2
 80a37a0:	bd30      	pop	{r4, r5, pc}

080a37a2 <strstr>:
 80a37a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a37a4:	7803      	ldrb	r3, [r0, #0]
 80a37a6:	b963      	cbnz	r3, 80a37c2 <strstr+0x20>
 80a37a8:	780b      	ldrb	r3, [r1, #0]
 80a37aa:	2b00      	cmp	r3, #0
 80a37ac:	bf18      	it	ne
 80a37ae:	2000      	movne	r0, #0
 80a37b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a37b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a37b6:	b162      	cbz	r2, 80a37d2 <strstr+0x30>
 80a37b8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a37bc:	4630      	mov	r0, r6
 80a37be:	4297      	cmp	r7, r2
 80a37c0:	d0f7      	beq.n	80a37b2 <strstr+0x10>
 80a37c2:	4603      	mov	r3, r0
 80a37c4:	1c46      	adds	r6, r0, #1
 80a37c6:	7800      	ldrb	r0, [r0, #0]
 80a37c8:	b110      	cbz	r0, 80a37d0 <strstr+0x2e>
 80a37ca:	1e4d      	subs	r5, r1, #1
 80a37cc:	1e5c      	subs	r4, r3, #1
 80a37ce:	e7f0      	b.n	80a37b2 <strstr+0x10>
 80a37d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a37d2:	4618      	mov	r0, r3
 80a37d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a37d8 <_strtol_r>:
 80a37d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a37dc:	460f      	mov	r7, r1
 80a37de:	4680      	mov	r8, r0
 80a37e0:	483f      	ldr	r0, [pc, #252]	; (80a38e0 <_strtol_r+0x108>)
 80a37e2:	f8d0 9000 	ldr.w	r9, [r0]
 80a37e6:	463d      	mov	r5, r7
 80a37e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a37ec:	eb09 0004 	add.w	r0, r9, r4
 80a37f0:	7840      	ldrb	r0, [r0, #1]
 80a37f2:	f000 0008 	and.w	r0, r0, #8
 80a37f6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a37fa:	b108      	cbz	r0, 80a3800 <_strtol_r+0x28>
 80a37fc:	462f      	mov	r7, r5
 80a37fe:	e7f2      	b.n	80a37e6 <_strtol_r+0xe>
 80a3800:	2c2d      	cmp	r4, #45	; 0x2d
 80a3802:	d103      	bne.n	80a380c <_strtol_r+0x34>
 80a3804:	1cbd      	adds	r5, r7, #2
 80a3806:	787c      	ldrb	r4, [r7, #1]
 80a3808:	2601      	movs	r6, #1
 80a380a:	e003      	b.n	80a3814 <_strtol_r+0x3c>
 80a380c:	2c2b      	cmp	r4, #43	; 0x2b
 80a380e:	bf04      	itt	eq
 80a3810:	787c      	ldrbeq	r4, [r7, #1]
 80a3812:	1cbd      	addeq	r5, r7, #2
 80a3814:	b113      	cbz	r3, 80a381c <_strtol_r+0x44>
 80a3816:	2b10      	cmp	r3, #16
 80a3818:	d10a      	bne.n	80a3830 <_strtol_r+0x58>
 80a381a:	e05b      	b.n	80a38d4 <_strtol_r+0xfc>
 80a381c:	2c30      	cmp	r4, #48	; 0x30
 80a381e:	d157      	bne.n	80a38d0 <_strtol_r+0xf8>
 80a3820:	7828      	ldrb	r0, [r5, #0]
 80a3822:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3826:	2858      	cmp	r0, #88	; 0x58
 80a3828:	d14d      	bne.n	80a38c6 <_strtol_r+0xee>
 80a382a:	786c      	ldrb	r4, [r5, #1]
 80a382c:	2310      	movs	r3, #16
 80a382e:	3502      	adds	r5, #2
 80a3830:	2e00      	cmp	r6, #0
 80a3832:	bf14      	ite	ne
 80a3834:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a3838:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a383c:	fbbc faf3 	udiv	sl, ip, r3
 80a3840:	2700      	movs	r7, #0
 80a3842:	4638      	mov	r0, r7
 80a3844:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a3848:	eb09 0e04 	add.w	lr, r9, r4
 80a384c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3850:	f01e 0f04 	tst.w	lr, #4
 80a3854:	d001      	beq.n	80a385a <_strtol_r+0x82>
 80a3856:	3c30      	subs	r4, #48	; 0x30
 80a3858:	e00b      	b.n	80a3872 <_strtol_r+0x9a>
 80a385a:	f01e 0e03 	ands.w	lr, lr, #3
 80a385e:	d01b      	beq.n	80a3898 <_strtol_r+0xc0>
 80a3860:	f1be 0f01 	cmp.w	lr, #1
 80a3864:	bf0c      	ite	eq
 80a3866:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a386a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a386e:	ebce 0404 	rsb	r4, lr, r4
 80a3872:	42a3      	cmp	r3, r4
 80a3874:	dd10      	ble.n	80a3898 <_strtol_r+0xc0>
 80a3876:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a387a:	d00a      	beq.n	80a3892 <_strtol_r+0xba>
 80a387c:	4550      	cmp	r0, sl
 80a387e:	d806      	bhi.n	80a388e <_strtol_r+0xb6>
 80a3880:	d101      	bne.n	80a3886 <_strtol_r+0xae>
 80a3882:	4564      	cmp	r4, ip
 80a3884:	dc03      	bgt.n	80a388e <_strtol_r+0xb6>
 80a3886:	fb03 4000 	mla	r0, r3, r0, r4
 80a388a:	2701      	movs	r7, #1
 80a388c:	e001      	b.n	80a3892 <_strtol_r+0xba>
 80a388e:	f04f 37ff 	mov.w	r7, #4294967295
 80a3892:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3896:	e7d7      	b.n	80a3848 <_strtol_r+0x70>
 80a3898:	1c7b      	adds	r3, r7, #1
 80a389a:	d10c      	bne.n	80a38b6 <_strtol_r+0xde>
 80a389c:	2e00      	cmp	r6, #0
 80a389e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a38a2:	bf14      	ite	ne
 80a38a4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a38a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a38ac:	f8c8 3000 	str.w	r3, [r8]
 80a38b0:	b92a      	cbnz	r2, 80a38be <_strtol_r+0xe6>
 80a38b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a38b6:	b106      	cbz	r6, 80a38ba <_strtol_r+0xe2>
 80a38b8:	4240      	negs	r0, r0
 80a38ba:	b172      	cbz	r2, 80a38da <_strtol_r+0x102>
 80a38bc:	b107      	cbz	r7, 80a38c0 <_strtol_r+0xe8>
 80a38be:	1e69      	subs	r1, r5, #1
 80a38c0:	6011      	str	r1, [r2, #0]
 80a38c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a38c6:	2430      	movs	r4, #48	; 0x30
 80a38c8:	2b00      	cmp	r3, #0
 80a38ca:	d1b1      	bne.n	80a3830 <_strtol_r+0x58>
 80a38cc:	2308      	movs	r3, #8
 80a38ce:	e7af      	b.n	80a3830 <_strtol_r+0x58>
 80a38d0:	230a      	movs	r3, #10
 80a38d2:	e7ad      	b.n	80a3830 <_strtol_r+0x58>
 80a38d4:	2c30      	cmp	r4, #48	; 0x30
 80a38d6:	d0a3      	beq.n	80a3820 <_strtol_r+0x48>
 80a38d8:	e7aa      	b.n	80a3830 <_strtol_r+0x58>
 80a38da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a38de:	bf00      	nop
 80a38e0:	20000004 	.word	0x20000004

080a38e4 <strtol>:
 80a38e4:	4613      	mov	r3, r2
 80a38e6:	460a      	mov	r2, r1
 80a38e8:	4601      	mov	r1, r0
 80a38ea:	4802      	ldr	r0, [pc, #8]	; (80a38f4 <strtol+0x10>)
 80a38ec:	6800      	ldr	r0, [r0, #0]
 80a38ee:	f7ff bf73 	b.w	80a37d8 <_strtol_r>
 80a38f2:	bf00      	nop
 80a38f4:	20000068 	.word	0x20000068

080a38f8 <dynalib_user>:
 80a38f8:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a3908:	00000000 736d227b 203a2267 6c654822     ....{"msg": "Hel
 80a3918:	57206f6c 646c726f 007d2221 64417069     lo World!"}.ipAd
 80a3928:	73657264 64250073 2e64252e 252e6425     dress.%d.%d.%d.%
 80a3938:	00510064 3225002b 32250030 00210031     d.Q.+.%20.%21.!.
 80a3948:	00323225 32250022 00230033 00343225     %22.".%23.#.%24.
 80a3958:	32250024 00250035 00363225 32250026     $.%25.%.%26.&.%2
 80a3968:	005e0037 00383225 32250028 00290039     7.^.%28.(.%29.).
 80a3978:	00413225 3225002a 32250042 002c0043     %2A.*.%2B.%2C.,.
 80a3988:	00443225 3225002d 002e0045 00463225     %2D.-.%2E...%2F.
 80a3998:	3325002f 33250041 003b0042 00433325     /.%3A.%3B.;.%3C.
 80a39a8:	3325003c 003d0044 00453325 3325003e     <.%3D.=.%3E.>.%3
 80a39b8:	003f0046 00423525 00433525 3525005c     F.?.%5B.%5C.\.%5
 80a39c8:	005d0044 00453525 00463525 3625005f     D.].%5E.%5F._.%6
 80a39d8:	00600030 00423725 3725007b 007c0043     0.`.%7B.{.%7C.|.
 80a39e8:	00443725 00453725 6e55007e 776f6e6b     %7D.%7E.~.Unknow
 80a39f8:	6557006e 696c4362 23746e65 53206425     n.WebClient#%d S
 80a3a08:	65746174 7325203a 734d4020 646c2520     tate: %s @Ms %ld
 80a3a18:	6e6f4300 746e6574 6e654c2d 3a687467     .Content-Length:
 80a3a28:	6e6f4300 7463656e 3a6e6f69 65656b00     .Connection:.kee
 80a3a38:	6c612d70 00657669 0a0d0a0d 62655700     p-alive......Web
 80a3a48:	65696c43 2523746e 61502064 616f6c79     Client#%d Payloa
 80a3a58:	656c2064 6874676e 00642520 50545448     d length %d.HTTP
 80a3a68:	312e312f 0d732520 6363410a 2d737365     /1.1 %s..Access-
 80a3a78:	746e6f43 2d6c6f72 6f6c6c41 724f2d77     Control-Allow-Or
 80a3a88:	6e696769 0d2a203a 6e6f430a 746e6574     igin: *..Content
 80a3a98:	7079542d 25203a65 000a0d73 746e6f43     -Type: %s...Cont
 80a3aa8:	2d746e65 6f636e45 676e6964 7325203a     ent-Encoding: %s
 80a3ab8:	43000a0d 656e6e6f 6f697463 6b203a6e     ...Connection: k
 80a3ac8:	2d706565 76696c61 000a0d65 68636143     eep-alive...Cach
 80a3ad8:	6f432d65 6f72746e 6e203a6c 61632d6f     e-Control: no-ca
 80a3ae8:	2c656863 2d6f6e20 726f7473 6d202c65     che, no-store, m
 80a3af8:	2d747375 61766572 6164696c 0a0d6574     ust-revalidate..
 80a3b08:	6e6f4300 746e6574 6e654c2d 3a687467     .Content-Length:
 80a3b18:	0d642520 250a0d0a 45470073 50002054      %d....%s.GET .P
 80a3b28:	0054534f 4954504f 00534e4f 43626557     OST.OPTIONS.WebC
 80a3b38:	6e65696c 64252374 6e616820 48656c64     lient#%d handleH
 80a3b48:	20505454 50646e45 72745374 20732520     TTP EndPtStr %s 
 80a3b58:	53677241 25207274 65570073 696c4362     ArgStr %s.WebCli
 80a3b68:	23746e65 61206425 72206970 6f707365     ent#%d api respo
 80a3b78:	2065736e 206e656c 61006425 696c7070     nse len %d.appli
 80a3b88:	69746163 6a2f6e6f 006e6f73 20303032     cation/json.200 
 80a3b98:	57004b4f 6c436265 746e6569 20642523     OK.WebClient#%d 
 80a3ba8:	70747468 73657220 736e6f70 656c2065     http response le
 80a3bb8:	6425206e 62655700 65696c43 2523746e     n %d.WebClient#%
 80a3bc8:	72772064 20657469 74206f74 6c207063     d write to tcp l
 80a3bd8:	25206e65 6e690064 2e786564 6c6d7468     en %d.index.html
 80a3be8:	62655700 65696c43 2523746e 65732064     .WebClient#%d se
 80a3bf8:	6e69646e 65722067 72756f73 25206563     nding resource %
 80a3c08:	25202c73 79622064 2c736574 00732520     s, %d bytes, %s.
 80a3c18:	43626557 6e65696c 64252374 646e4520     WebClient#%d End
 80a3c28:	6e696f70 73252074 746f6e20 756f6620     point %s not fou
 80a3c38:	6f20646e 6e692072 696c6176 65570064     nd or invalid.We
 80a3c48:	696c4362 23746e65 43206425 6f6e6e61     bClient#%d Canno
 80a3c58:	69662074 6320646e 616d6d6f 6f20646e     t find command o
 80a3c68:	72612072 57007367 6c436265 746e6569     r args.WebClient
 80a3c78:	20642523 75746552 6e696e72 30342067     #%d Returning 40
 80a3c88:	6f4e2034 6f662074 00646e75 74786574     4 Not found.text
 80a3c98:	616c702f 34006e69 4e203430 4620746f     /plain.404 Not F
 80a3ca8:	646e756f 62655700 65696c43 2523746e     ound.WebClient#%
 80a3cb8:	6f462064 45646e75 6f70646e 20746e69     d FoundEndpoint 
 80a3cc8:	3e73253c 70795420 64252065 62655700     <%s> Type %d.Web
 80a3cd8:	76726553 74537265 3a657461 20732520     ServerState: %s 
 80a3ce8:	72746e65 20734d79 00646c25 53626557     entryMs %ld.WebS
 80a3cf8:	65767265 53203a72 74726174 62655700     erver: Start.Web
 80a3d08:	76726553 203a7265 706f7453 62655700     Server: Stop.Web
 80a3d18:	76726553 203a7265 74736552 00747261     Server: Restart.
 80a3d28:	43626557 6e65696c 64252374 20504920     WebClient#%d IP 
 80a3d38:	57007325 6c436265 746e6569 20642523     %s.WebClient#%d 
 80a3d48:	63736964 656e6e6f 64657463 62655700     disconnected.Web
 80a3d58:	65696c43 2523746e 656b2064 612d7065     Client#%d keep-a
 80a3d68:	6576696c 6d697420 74756f65 62655700     live timeout.Web
 80a3d78:	65696c43 2523746e 6f6e2064 7461642d     Client#%d no-dat
 80a3d88:	69742061 756f656d 65570074 696c4362     a timeout.WebCli
 80a3d98:	23746e65 72206425 69656365 20646576     ent#%d received 
 80a3da8:	57006425 6c436265 746e6569 20642523     %d.WebClient#%d 
 80a3db8:	6c756f63 74276e64 6e616820 20656c64     couldn't handle 
 80a3dc8:	75716572 00747365 43626557 6e65696c     request.WebClien
 80a3dd8:	64252374 73657220 6f632070 656c706d     t#%d resp comple
 80a3de8:	57006574 6c436265 746e6569 20642523     te.WebClient#%d 
 80a3df8:	746e6553 2c732520 20642520 65747962     Sent %s, %d byte
 80a3e08:	6f742073 2c6c6174 20642520 636f6c62     s total, %d bloc
 80a3e18:	5700736b 6c436265 746e6569 20642523     ks.WebClient#%d 
 80a3e28:	7065656b 696c612d 72206576 65757165     keep-alive reque
 80a3e38:	64657473 62655700 65696c43 2523746e     sted.WebClient#%
 80a3e48:	6c632064 6e69736f 6f632067 63656e6e     d closing connec
 80a3e58:	6e6f6974 62655700 76726553 54207265     tion.WebServer T
 80a3e68:	65535043 72657672 67654220 41006e69     CPServer Begin.A
 80a3e78:	6e696464 74732067 63697461 73657220     dding static res
 80a3e88:	6372756f 73252065 6d696d20 73252065     ource %s mime %s
 80a3e98:	636e6520 6e69646f 73252067 6e656c20      encoding %s len
 80a3ea8:	00642520 706f7453 00646570 74696157      %d.Stopped.Wait
 80a3eb8:	6e6e6f43 67654200 4e006e75 00656e6f     Conn.Begun.None.
 80a3ec8:	65636341 64657470 69615700 65530074     Accepted.Wait.Se
 80a3ed8:	0000646e                                nd..

080a3edc <CSWTCH.77>:
 80a3edc:	080a3ec3 080a3ec8 080a3ed1 080a3ed6     .>...>...>...>..

080a3eec <_ZTV11RdWebServer>:
	...
 80a3ef4:	080a09bd 080a09e5                       ........

080a3efc <CSWTCH.92>:
 80a3efc:	080a3eac 080a3eb4 080a3ebd              .>...>...>..

080a3f08 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a3f10:	080a1985 080a198b 080a1da3 080a1999     ................
 80a3f20:	080a1987                                ....

080a3f24 <_ZTV9TCPClient>:
	...
 80a3f2c:	080a02bd 080a02dd 080a1941 080a195b     ........A...[...
 80a3f3c:	080a1aa1 080a1a0b 080a19dd 080a1983     ................
 80a3f4c:	080a1b4d 080a1dbd 080a1a3f 080a1b19     M.......?.......
 80a3f5c:	080a1c9b 080a1ced 080a196b 080a1c5f     ........k..._...
 80a3f6c:	080a19bd 69726977 5400676e 6c435043     ....wiring.TCPCl
 80a3f7c:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a3f8c <_ZTV21StringPrintableHelper>:
	...
 80a3f94:	080a1e29 080a1e2b 080a200f 080a1fc3     )...+.... ......

080a3fa4 <_ZTV5Print>:
	...
 80a3fb4:	080a00ad 080a21f9 64756162 72655300     .....!..baud.Ser
 80a3fc4:	006c6169 53425355 61697265 7400316c     ial.USBSerial1.t
 80a3fd4:	00657079 61726170 6d63006d 6e680064     ype.param.cmd.hn
 80a3fe4:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
 80a3ff4:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
 80a4004:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
 80a4014:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
 80a4024:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
 80a4034:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
 80a4044:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
 80a4054:	69617465 3d20736c 00660020 66006e6c     etails = .f.ln.f
 80a4064:	6f63006e 64006564 69617465 6f6e006c     n.code.detail.no
 80a4074:	7400656e 65636172 666e6900 6177006f     ne.trace.info.wa
 80a4084:	65006e72 726f7272 6e617000 61006369     rn.error.panic.a
 80a4094:	5a006c6c 302b2500 253a6433 00753230     ll.Z.%+03d:%02u.
 80a40a4:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 80a40b4:	007a2553 74637361 00656d69              S%z.asctime.

080a40c0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a40c8:	080a24f5 080a24fb 080a253f 080a2509     .$...$..?%...%..
 80a40d8:	080a24f7                                .$..

080a40dc <_ZTV9IPAddress>:
	...
 80a40e4:	080a2a8d 080a2a7d 080a2a7f              .*..}*...*..

080a40f0 <_ZTV9USBSerial>:
	...
 80a40f8:	080a2b49 080a2b99 080a2ba7 080a21f9     I+...+...+...!..
 80a4108:	080a2b85 080a2b4b 080a2b61 080a2b93     .+..K+..a+...+..
 80a4118:	080a2b77 080a2b45                       w+..E+..

080a4120 <_ZTV11USARTSerial>:
	...
 80a4128:	080a2ce1 080a2d31 080a2d3f 080a21f9     .,..1-..?-...!..
 80a4138:	080a2cf5 080a2d17 080a2d03 080a2d2b     .,...-...-..+-..
 80a4148:	080a2ce3 080a2ce7                       .,...,..

080a4150 <_ZTV6Stream>:
	...
 80a4160:	080a00ad 080a21f9 080a00ad 080a00ad     .....!..........
 80a4170:	080a00ad 080a00ad                       ........

080a4178 <_ZTV6Client>:
	...
 80a4188:	080a00ad 080a00ad 080a00ad 080a00ad     ................
 80a4198:	080a00ad 080a00ad 080a00ad 080a00ad     ................
 80a41a8:	080a00ad 080a00ad 080a00ad 080a00ad     ................

080a41b8 <_ZTV15TCPServerClient>:
	...
 80a41c0:	080a2ead 080a2ec1 080a1941 080a195b     ........A...[...
 80a41d0:	080a1aa1 080a1a0b 080a19dd 080a1983     ................
 80a41e0:	080a1b4d 080a1dbd 080a1a3f 080a1b19     M.......?.......
 80a41f0:	080a1c9b 080a1ced 080a196b 080a1c5f     ........k..._...
 80a4200:	080a2e59                                Y...

080a4204 <_ZTV9TCPServer>:
	...
 80a420c:	080a2f4d 080a2f6d 080a2e1d 080a2e33     M/..m/......3...
 80a421c:	080a2f81 080a2e05 080a2e43              ./......C...

080a4228 <_ZTVN5spark9WiFiClassE>:
	...
 80a4230:	080a3177 080a316d 080a3163 080a30e1     w1..m1..c1...0..
 80a4240:	080a2289 080a3157 080a314b 080a3143     ."..W1..K1..C1..
 80a4250:	080a3139 080a312f 080a30eb              91../1...0..

080a425c <_ZTVN5spark12NetworkClassE>:
	...
 80a4264:	080a3195 080a319f 080a31a9 080a31b3     .1...1...1...1..
 80a4274:	080a31bd 080a31c9 080a31d5 080a31e1     .1...1...1...1..
 80a4284:	080a31e9 080a31f3 080a31fd              .1...1...1..

080a4290 <_ctype_>:
 80a4290:	20202000 20202020 28282020 20282828     .         ((((( 
 80a42a0:	20202020 20202020 20202020 20202020                     
 80a42b0:	10108820 10101010 10101010 10101010      ...............
 80a42c0:	04040410 04040404 10040404 10101010     ................
 80a42d0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a42e0:	01010101 01010101 01010101 10101010     ................
 80a42f0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4300:	02020202 02020202 02020202 10101010     ................
 80a4310:	00000020 00000000 00000000 00000000      ...............
	...

080a4394 <__sf_fake_stdin>:
	...

080a43b4 <__sf_fake_stdout>:
	...

080a43d4 <__sf_fake_stderr>:
	...

080a43f4 <link_const_variable_data_end>:
 80a43f4:	080a026d 	.word	0x080a026d
 80a43f8:	080a14af 	.word	0x080a14af
 80a43fc:	080a190d 	.word	0x080a190d
 80a4400:	080a22d1 	.word	0x080a22d1
 80a4404:	080a234d 	.word	0x080a234d
 80a4408:	080a23a1 	.word	0x080a23a1
 80a440c:	080a3181 	.word	0x080a3181
 80a4410:	080a3265 	.word	0x080a3265
 80a4414:	080a3279 	.word	0x080a3279
 80a4418:	080a32bd 	.word	0x080a32bd
 80a441c:	080a3341 	.word	0x080a3341
 80a4420:	080a3405 	.word	0x080a3405
 80a4424:	080a34c9 	.word	0x080a34c9

080a4428 <link_constructors_end>:
	...
